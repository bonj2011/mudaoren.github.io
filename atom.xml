<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木道人</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-06T12:05:32.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木道人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代理模式</title>
    <link href="http://yoursite.com/2019/01/06/Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/01/06/Java代理模式/</id>
    <published>2019-01-06T11:51:28.705Z</published>
    <updated>2019-01-06T12:05:32.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是代理模式？"><a href="#一、什么是代理模式？" class="headerlink" title="一、什么是代理模式？"></a><font color="#006600">一、什么是代理模式？</font></h1><p>　　代理模式也叫做委托模式，为其他对象提供一种代理以控制对这个对象的访问。<br>　　举一个例子，你希望假期出国旅游，但是又不想自己处理诸如签证、行程、交通、食宿等麻烦事，就可以找个旅游公司代办，你只需要按照旅游公司的安排出行。生活中的经纪人、中介、律师所的律师、会计事务所会计、甚至超市等都是现实中代理模式应用。</p><h1 id="二、常用的代理模式"><a href="#二、常用的代理模式" class="headerlink" title="二、常用的代理模式"></a><font color="#006600">二、常用的代理模式</font></h1><p>　　常用的代理模式分为<strong>静态代理</strong>和<strong>动态代理</strong>。</p><h2 id="2-1-静态代理"><a href="#2-1-静态代理" class="headerlink" title="2.1 静态代理"></a>2.1 静态代理</h2><p>　　静态代理是在程序编译阶段就已经确定代理类和被代理类，他们的关系已经存在于编译后的字节码文件中。简单讲就是程序员手写的代理就是静态代理。</p><h3 id="2-1-1-使用场景"><a href="#2-1-1-使用场景" class="headerlink" title="2.1.1 使用场景"></a>2.1.1 使用场景</h3><p>　　类型（接口/继承）单一，接口功能相对单一，实现类明确且数量较少的情况。</p><h3 id="2-1-2-实现方式"><a href="#2-1-2-实现方式" class="headerlink" title="2.1.2 实现方式"></a>2.1.2 实现方式</h3><ul><li>继承</li><li>接口</li></ul><h3 id="2-1-3-实现示例"><a href="#2-1-3-实现示例" class="headerlink" title="2.1.3 实现示例"></a>2.1.3 实现示例</h3><p><strong>定义一个抽象的被代理者Subject</strong></p><pre><code>/** * 被代理对象 * 航空公司 */public interface AirlineCompany{    // 订票方法    boolean booking();}</code></pre><p><strong>定义一个具体的被代理者RealSubject</strong></p><pre><code>/** * 南方航空 */public class SouthernAirlines implements AirlineCompany{    @Override    public boolean booking()    {        System.out.println(&quot;订票成功, 欢迎乘坐南方航空！&quot;);        return true;    }}</code></pre><p><strong>定义一个代理proxy</strong></p><pre><code>/** * 机票代理公司，可以代理多家航空公司的机票 */public class AirlineProxy implements AirlineCompany{    private AirlineCompany airlineCompany;    public AirlineProxy(AirlineCompany airlineCompany)    {        this.airlineCompany = airlineCompany;    }    @Override    public boolean booking()    {        System.out.println(&quot;通过代理订购机票！&quot;);        return airlineCompany.booking();    }}</code></pre><p><strong>测试方法，即消费者</strong></p><pre><code>/** * 消费者 */public class Customer{    // 消费者预订机票    public static void main(String[] args)    {        // 定义一家航空公司，比如南方航空        AirlineCompany southernAir = new SouthernAirlines();        // 定义一家机票代理商        AirlineCompany proxy = new AirlineProxy(southernAir);        boolean result = proxy.booking();        System.out.println(&quot;消费者订购机票结果：&quot;+ result);    }}</code></pre><h3 id="2-1-4-小结"><a href="#2-1-4-小结" class="headerlink" title="2.1.4 小结"></a>2.1.4 小结</h3><p>　　业务类只需要关注业务逻辑本身，保证了业务类的重用性和可扩展性。尽管继承和接口都可以实现静态代理模式，但是使用继承大大限制了代理的范围，因而常用的代理实现方式是接口。比如一个票务公司通常会同时代理机票、火车票、汽车票、轮船票、景点门票甚至演出门票等，这种情况下明显使用接口更加合适。</p><h2 id="2-2-动态代理"><a href="#2-2-动态代理" class="headerlink" title="2.2 动态代理"></a>2.2 动态代理</h2><p>　　动态代理是在程序运行阶段才能确定被代理类，被代理类通常是在使用时才会被通过反射机制创建。</p><h3 id="2-2-1-使用场景"><a href="#2-2-1-使用场景" class="headerlink" title="2.2.1 使用场景"></a>2.2.1 使用场景</h3><ul><li>被代理的实现类不确定，比如对第三方开放。</li><li>对象创建开销很大，在使用时才需要创建。</li><li>调用其他进程的接口。</li></ul><p>　　动态代理已经被广泛使用，常见的面向切面编程AOP、Hibernate、RPC、JDBC驱动、OSGI、java注解等。</p><h3 id="2-2-2-实现方式"><a href="#2-2-2-实现方式" class="headerlink" title="2.2.2 实现方式"></a>2.2.2 实现方式</h3><ul><li>jdk原生动态代理</li><li>Cglib动态代理</li></ul><h3 id="2-2-3-jdk原生动态代理实现步骤"><a href="#2-2-3-jdk原生动态代理实现步骤" class="headerlink" title="2.2.3 jdk原生动态代理实现步骤"></a>2.2.3 jdk原生动态代理实现步骤</h3><p><strong>创建被代理的接口</strong></p><pre><code>/** * 被代理对象 * 航空公司 */public interface AirlineCompany{    // 订票方法    boolean booking();    // 返回公司名称    String company();}</code></pre><p><strong>创建一个被代理接口的具体实现</strong></p><pre><code>/** * 南方航空 */public class SouthernAirlines implements AirlineCompany{    @Override    public boolean booking()    {        System.out.println(&quot;订票成功，欢迎乘坐南方航空！&quot;);        return true;    }    @Override    public String company()    {        return &quot;南方航空&quot;;    }}</code></pre><p><strong>创建一个实现接口InvocationHandler的类，它必须实现invoke方法</strong></p><pre><code>/** * 机票代理公司，可以代理多家航空公司的机票 */public class AirlineProxy implements InvocationHandler{    private Object target;    /**     * @param object 该参数为要代理的实例对象，目的是用于执行method.invoke()方法（也就是执行目标方法）     * @return Object 返回被代理类实例     * /    public Object getInstance(Object object)    {        this.target = object;        Class clazz = object.getClass();        System.out.println(MessageFormat.format(&quot;创建{0}的代理！&quot;, target.getClass()));        // 这里要调用Proxy的newProxyInstance静态方法，创建一个代理类。如果这里不创建，那么需要在顾客订票时创建。newProxyInstance()会返回一个实现了指定接口的代理对象，对该对象的所有方法调用都会转发给InvocationHandler.invoke()方法。        return Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), this);    }    /**     * 在invoke()方法里我们可以加入任何逻辑。     * @param proxy 动态生成的代理对象     * @param method 目标方法的实例     * @param args 目标方法的参数     * @return 该方法的返回值就是代理对象执行目标方法的返回值     * /    @Override    public Object invoke(Object proxy, Method method, Object[] args)            throws Throwable    {        return method.invoke(target, args);    }}</code></pre><p><strong>通过代理对象调用目标方法</strong></p><pre><code>/** * 消费者 */public class Customer{    // 消费者预订机票    public static void main(String[] args)    {        // 定义一家航空公司,比如南方航空        AirlineCompany southernAir = new SouthernAirlines();        // 定义一家机票代理商        AirlineCompany proxy = (AirlineCompany)new AirlineProxy().getInstance(southernAir);        boolean result = proxy.booking();        String companyName = proxy.company();        System.out.println(MessageFormat.format(&quot;消费者通过代理[ {0}]，订购[{1}]机票结果[{2}]&quot;, proxy.getClass(), companyName, result));    }}</code></pre><p><strong>测试结果：</strong></p><pre><code>创建class designPaterns.proxyPaterns.dynamicProxy.jdkRealize.SouthernAirlines的代理！订票成功，欢迎乘坐南方航空！消费者通过代理[ class com.sun.proxy.$Proxy0]，订购[南方航空]机票结果[true]</code></pre><p><strong>小结：</strong><br>　　JDK原生动态代理只能代理实现了接口的类， 没有实现接口的类不能实现动态代理。</p><h3 id="2-2-4-Cglib动态代理实现步骤"><a href="#2-2-4-Cglib动态代理实现步骤" class="headerlink" title="2.2.4 Cglib动态代理实现步骤"></a>2.2.4 Cglib动态代理实现步骤</h3><p>　　Cglib动态代理的实现原理和jdk基本相同，都是生成新的代理类。但具体实现有所不同，cglib动态代理生成的代理类是被代理者的子类，且会重写父类除private和final修饰的所有方法，要求该父类必须有空的构造方法。</p><p><strong>创建一个被代理类型的具体实现</strong></p><pre><code>/** * 南方航空 */public class SouthernAirlines{    public boolean booking()    {        System.out.println(&quot;订票成功，欢迎乘坐南方航空！&quot;);        return true;    }    public String company()    {        return &quot;南方航空&quot;;    }}</code></pre><p><strong>创建一个代理，需要实现cglib包的MethodInterceptor接口，以保证可以调用方法intercept</strong></p><pre><code>/**   *  定义一个代理 */public class AirlineProxy implements MethodInterceptor{    private Object target;    // 返回代理对象    public Object getInstance(Object object)    {        this.target = object;        Enhancer enhancer = new Enhancer();        enhancer.setSuperclass(target.getClass());        enhancer.setCallback(this);        System.out.println(MessageFormat.format(&quot;创建{0}的代理对象！&quot;, target.getClass()));        return enhancer.create();            }    /**     * 实现MethodInterceptor接口的intercept方法后，所有生成的代理方法都调用这个方法     * @param obj 目标类的实例     * @param method 目标方法实例（通过反射获取的目标方法实例）     * @param args 目标方法的参数     * @param proxy 代理类的实例     * @return Object 目标方法的返回值。     */    public Object intercept(Object obj, Method method, Object[] args,            MethodProxy proxy) throws Throwable    {        return method.invoke(target, args);    }}</code></pre><p><strong>通过代理对象调用目标方法</strong></p><pre><code>/** * 定义一个顾客 */public class Customer{    // 顾客通过代理订票    public static void main(String[] args)    {        // 南方航空        SouthernAirlines southernAir = new SouthernAirlines();        // 定义一家机票代理商        SouthernAirlines proxy = (SouthernAirlines)new AirlineProxy().getInstance(southernAir);        boolean result = proxy.booking();        String companyName = proxy.company();        System.out.println(MessageFormat.format(&quot;顾客通过代理[ {0}]，订购[{1}]机票结果[{2}]&quot;, proxy.getClass(), companyName, result));    }}</code></pre><p><strong>测试结果：</strong></p><pre><code>创建class com.mudaoren.designPaterns.proxyPaterns.dynamicProxy.cblibrealize.SouthernAirlines的代理对象！订票成功，欢迎乘坐南方航空！顾客通过代理[ class com.mudaoren.designPaterns.proxyPaterns.dynamicProxy.cblibrealize.SouthernAirlines$$EnhancerByCGLIB$$f6637d97]，订购[南方航空]机票结果[true]</code></pre><p>小结：<br>　　cglib的动态代理是针对类来实现代理。对指定目标类产生一个子类，通过方法拦截技术拦截所有父类方法的调用。因为通过继承实现，所以final类无法使用。</p><!-- 参考https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651482109&idx=1&sn=04445b8b5c493e0bf439e779bb9791c2&chksm=bd250b828a5282944348b26b3d4711f551ad3302d07b1b16a0cb6f93c2067bd8011b1a2d3bc0&scene=0&xtrack=1#rdhttps://mp.weixin.qq.com/s/FGK3DD9bcDS3FwO39-uh6g -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、什么是代理模式？&quot;&gt;&lt;a href=&quot;#一、什么是代理模式？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是代理模式？&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#006600&quot;&gt;一、什么是代理模式？&lt;/font&gt;&lt;/h1&gt;&lt;p&gt;　　代理模式也叫做
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="动态代理" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PDCA循环</title>
    <link href="http://yoursite.com/2019/01/02/PDCA%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/01/02/PDCA循环/</id>
    <published>2019-01-02T15:31:09.657Z</published>
    <updated>2019-01-05T07:14:17.922Z</updated>
    
    <content type="html"><![CDATA[<p>　　PDCA循环也叫戴明循环，是一个持续改进模型，包括持续改进和不断学习的四个循环反复步骤。分别是计划（Plan）、执行（Do）、检查（Check）、处理（Action）。</p><h2 id="PDCA的典型适用场景"><a href="#PDCA的典型适用场景" class="headerlink" title="PDCA的典型适用场景"></a>PDCA的典型适用场景</h2><ul><li>个人管理和提升</li><li>项目管理</li><li>人力资源管理</li><li>供应商管理</li><li>流程管理</li><li>持续改进</li></ul><h2 id="PDCA循环步骤"><a href="#PDCA循环步骤" class="headerlink" title="PDCA循环步骤"></a>PDCA循环步骤</h2><ol><li>计划（Plan）。制定行动方案和目标，可以使用5W1H。</li><li>执行（Do）。依据计划具体执行。</li><li>检查（Check）。检查计划执行的过程和结果是否符合预期方案或目标，出现哪些问题和偏差。检查点的选择就是执行过程中的“控制点”、“管理点”。</li><li>效果（Action）。对检查结果进行处理，好的经验进行固化推广，失败的经验要总结改进措施，以便应用到下一个循环。Action如同导演拍电影时使用的Action，由演员按照剧本进行表演，导演对表演效果进行评判。</li></ol><h2 id="PDCA循环的重点"><a href="#PDCA循环的重点" class="headerlink" title="PDCA循环的重点"></a>PDCA循环的重点</h2><p>　　持续改进，不断上升。多个PDCA环是持续上升的过程，预示着效果、质量和水平不断提升。</p><p><img src="https://i.imgur.com/oPugqmw.jpg" alt=""></p><h2 id="相关理论"><a href="#相关理论" class="headerlink" title="相关理论"></a>相关理论</h2><ul><li>Plan的过程建议使用5W1H的方式进行，即why、what、where、who、when、how。</li><li>Check的过程如果能结合AAR（After Action Review）方法进行，效果会更好。AAR是美国陆军的一种任务检视方法，主要有4个方面：当初的目标是什么？ 实际发生了什么？ 从中学到了什么？ 以后该怎么做？</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　PDCA循环也叫戴明循环，是一个持续改进模型，包括持续改进和不断学习的四个循环反复步骤。分别是计划（Plan）、执行（Do）、检查（Check）、处理（Action）。&lt;/p&gt;
&lt;h2 id=&quot;PDCA的典型适用场景&quot;&gt;&lt;a href=&quot;#PDCA的典型适用场景&quot; cl
      
    
    </summary>
    
      <category term="管理" scheme="http://yoursite.com/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PDCA循环" scheme="http://yoursite.com/tags/PDCA%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="戴明循环" scheme="http://yoursite.com/tags/%E6%88%B4%E6%98%8E%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>高效能认识的七个习惯读书笔记</title>
    <link href="http://yoursite.com/2018/12/24/%E9%AB%98%E6%95%88%E8%83%BD%E8%AE%A4%E8%AF%86%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/24/高效能认识的七个习惯读书笔记/</id>
    <published>2018-12-24T15:44:22.185Z</published>
    <updated>2018-12-25T14:34:41.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="成长过程"><a href="#成长过程" class="headerlink" title="成长过程"></a>成长过程</h2><p>依赖期——&gt;独立期——&gt;互赖期</p><p><img src="https://i.imgur.com/6Iag2aq.png" alt="七个习惯模型"></p><h2 id="独立"><a href="#独立" class="headerlink" title="独立"></a>独立</h2><p>生理独立：自由行动<br>心智独立：自主思考<br>情感独立：肯定自我<br>精神独立：价值观清晰（合作与奉献）</p><h2 id="互赖"><a href="#互赖" class="headerlink" title="互赖"></a>互赖</h2><p>合作、双赢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;成长过程&quot;&gt;&lt;a href=&quot;#成长过程&quot; class=&quot;headerlink&quot; title=&quot;成长过程&quot;&gt;&lt;/a&gt;成长过程&lt;/h2&gt;&lt;p&gt;依赖期——&amp;gt;独立期——&amp;gt;互赖期&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6Ia
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高效能认识的七个习惯" scheme="http://yoursite.com/tags/%E9%AB%98%E6%95%88%E8%83%BD%E8%AE%A4%E8%AF%86%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSRF 攻击与防范</title>
    <link href="http://yoursite.com/2018/12/23/CSRF%20%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E8%8C%83/"/>
    <id>http://yoursite.com/2018/12/23/CSRF 攻击与防范/</id>
    <published>2018-12-23T11:16:30.079Z</published>
    <updated>2018-12-24T14:58:15.105Z</updated>
    
    <content type="html"><![CDATA[<p>　　CSRF（Cross Site Request Forgery），跨站点请求伪造，是一种常见的Web攻击方式。</p><h2 id="1-CSRF如何攻击？"><a href="#1-CSRF如何攻击？" class="headerlink" title="1. CSRF如何攻击？"></a>1. CSRF如何攻击？</h2><p>　　CSRF攻击之所以会成功是由于<strong>请求操作的所有参数都能被攻击者所预知</strong>。<br>　　1） 一个普通的银行用户A，通过银行网站<code>http://huixfeng.bank.com/transfer?account=A&amp;amount=20000&amp;to=B</code>， 向B用户账户转账20000。正常情况，服务端会对用户A的请求进行验证，假设是通过session完成。<br>　　2） 攻击者X也了解到该银行的转账链接<code>http://huixfeng.bank.com/transfer?account=A&amp;amount=10000&amp;to=X</code>，希望从A的账户向自己的账户X，转账10000元。但是因为服务端会通过session验证，他无法成功完成转账。<br>　　3） X想到了CSRF攻击，他自己做了一个木马网站，通过某些手段诱导了A用户点击这个木马网站。并且木马网站中植入代码<code>http://huixfeng.bank.com/transfer?account=A&amp;amount=10000&amp;to=X</code>,这时，如果A用户点击了木马链接，就会向银行服务发起转账请求。<br>　　4） 尽管X成功的诱导了A向银行发起了转账请求，但是由于银行端需要session验证，所以此时转账并不会成功。 假设用户A在点击木马链接前，恰好登陆过银行的网站，那么A的浏览器cookie中可能还存有认证信息，如果A用户在银行服务器的session此时没有过期，那么这个攻击就成功了。</p><h2 id="2-CSRF-攻击的目标"><a href="#2-CSRF-攻击的目标" class="headerlink" title="2. CSRF 攻击的目标"></a>2. CSRF 攻击的目标</h2><p>　　浏览器具有同源策略，攻击者无法解析浏览器返回的结果。因此<strong>CSRF攻击主要是通过请求连接来触发Web端的某些操作，常见的操作是服务器端数据的增删改</strong>，如同上例中的银行账户数据的变化。Google的Gmail邮箱曾经出现过一个CSRF漏洞，攻击者诱导用户点击木马链接后，向服务端发送了一个为用户设置邮件自动转发规则，将用户的邮件自动转发到攻击者指定的邮箱。</p><h2 id="3-如何防范CSRF"><a href="#3-如何防范CSRF" class="headerlink" title="3. 如何防范CSRF"></a>3. 如何防范CSRF</h2><p>　　目前常用的防御措施：</p><ul><li>验证码</li><li>增加HTTP Referer验证</li><li>增加token验证</li></ul><h3 id="3-1-验证码"><a href="#3-1-验证码" class="headerlink" title="3.1 验证码"></a>3.1 验证码</h3><p>　　重要操作增加验证码校验，强制用户完成互动。比如银行转账或消费时，当超过10000时自动触发验证码验证，当用户输入正确验证码后才能继续操作。但是这种方式严重影响用户体验，并不适合所有场景。</p><h3 id="3-2-增加HTTP-Referer验证"><a href="#3-2-增加HTTP-Referer验证" class="headerlink" title="3.2 增加HTTP Referer验证"></a>3.2 增加HTTP Referer验证</h3><p>　　HTTP Referer是HTTP Header中的字段叫Referer，它记录了该HTTP请求的来源地址。</p><p><img src="https://i.imgur.com/QcuxlgF.png" alt=""></p><p>　　通常情况下，当用户登录一个网站后，在Web页面上的任何操作都是来源于这个网站，这个页面上的所有操作请求的Referer值就是操作所在的页面url。因此服务端可以通过对HTTP Referer进行验证，即可判断该请求是否合法。<br>　　还是以文章开头的例子，用户A在银行界面上发起的所有操作的HTTP Referer值都会带有该网站的域名。而攻击者通过木马网站触发的转账请求的HTTP Referer值是木马网站的url。银行服务端只需要增加对Referer的验证就可以判断该转账操作是否合法。</p><p><strong>优点：</strong><br>　　简单方便。只需要在服务端增加拦截器对请求的HTTP Referer统一校验，没有侵入性。</p><p><strong>缺点：</strong><br>　　1） Referer的值是浏览器提供，尽管你理论上HTTP协议和浏览器可以共同保证。但浏览器并不是完全可信的，有些浏览器比如IE6有方法可以篡改Referer值。<br>　　2） Referer记录下用户的访问来源，涉及到用户隐私保护，在某些地区如欧洲北美等地区用户保护组织并不认可通过Referer发送来源信息，用户可以自己在浏览器中设置禁止发送Referer信息。</p><h3 id="3-3-增加token验证"><a href="#3-3-增加token验证" class="headerlink" title="3.3 增加token验证"></a>3.3 增加token验证</h3><p>　　CSRF的攻击者通过完整伪造用户请求，诱导用户在自己的浏览器发起了操作请求，而此时请求的验证信息完全来源于用户浏览器的cookie。<br>　　基于上述事实使用token验证时，token必须是不可预测的，并且不能存储在cookie中。惯用的做法是在HTTP请求中增加一个token参数，如CSRFToken，参数值是由服务端随机产生并返回给浏览器的数值，在服务端增加拦截器进行验证。<br>　　具体操作中，Web服务端增加两个拦截器，一个token赋值拦截器，一个token验证拦截器。<br>　　1） 用户在登陆网站时，token赋值拦截器会产生一个随机token并将token置于javascript中返回给浏览器。浏览器在接收到返回消息中的javascript时会立即执行该脚本，该脚本的作用是通知浏览器将CSRFToken设置到下次请求的hander中。<br>　　2） 用户再次发起请求时，hander中会携带CSRFToken到服务端，服务端的token验证拦截器会对该CSRFToken进行验证。<br>　　为了实现方便，一般用户的一次会话会产生一个Token，并保存到session中用于token的验证（注意，分布式系统中需要存在session中）。当然也可以每次请求使用一个token，但是这种方式会造成一个问题：当用户在浏览器中同时打开多个页面同时操作时，一个页面消耗掉token，另外一个页面就不能再使用该token了，此时需要服务端一次产生多个token供多个页面使用，这种方式复杂性就增加了。<br>　　一般实现是为javaScript制作一个钩子返回给浏览器以监控浏览器的JS动作，当浏览器下一次操作时，钩子就会生效向Header中添加token（当然脚本中也可以同时向from中写入token），非IE浏览器可以使用XMLHttpRequest，IE浏览器使用window.XMLHttpRequest，关于XMLHttpRequest可参考<a href="http://www.w3school.com.cn/xmldom/dom_http.asp。" target="_blank" rel="noopener">http://www.w3school.com.cn/xmldom/dom_http.asp。</a></p><p><strong>优点：</strong><br>　　安全性高，无侵入性。实现原理也并不复杂。</p><p><strong>缺点：</strong><br>　　1） 返回消息中需要携带JavaScript片段，增加了网络传输负担。<br>　　2） 如果网站支持跳转到用户指定个人网站，那么这种方式会造成token泄露，因此这种情况还需要做特殊处理。</p><h3 id="3-4-开源工具"><a href="#3-4-开源工具" class="headerlink" title="3.4 开源工具"></a>3.4 开源工具</h3><p>　　<a href="https://github.com/aramrami/OWASP-CSRFGuard" target="_blank" rel="noopener">OWASP-CSRFGuard</a>是一个拥有BSD许可的友好开源软件，通过简单配置即可使用。</p><h2 id="4-CSRF测试"><a href="#4-CSRF测试" class="headerlink" title="4. CSRF测试"></a>4. CSRF测试</h2><p>　　开源测试工具<a href="https://www.owasp.org/index.php/CSRFTester" title="CSRFTester" target="_blank" rel="noopener">CSRFTester</a>工具可以进行测试。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>　　CSRF的Token防御仅能对抗CSRF攻击，如果网站还存在XSS漏洞，攻击者可以通过模拟客户端浏览器执行任意操作，攻击者可以获取到Token，并构造出合法请求而绕过CSRF防御。因此安全防御必须成体系建设。</p><p>参考</p><blockquote><p><a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)" target="_blank" rel="noopener">https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)</a><br>《白帽子讲Web安全》<br><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html?mhq=token%20%20%E6%94%BB%E5%87%BB&amp;mhsrc=ibmsearch_d" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html?mhq=token%20%20%E6%94%BB%E5%87%BB&amp;mhsrc=ibmsearch_d</a><br><a href="http://www.yihaomen.com//article//java//408.htm" target="_blank" rel="noopener">http://www.yihaomen.com//article//java//408.htm</a><br><a href="https://my.oschina.net/langxSpirit/blog/678901" target="_blank" rel="noopener">https://my.oschina.net/langxSpirit/blog/678901</a><br><a href="https://blog.csdn.net/u013711961/article/details/70237515" target="_blank" rel="noopener">https://blog.csdn.net/u013711961/article/details/70237515</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　CSRF（Cross Site Request Forgery），跨站点请求伪造，是一种常见的Web攻击方式。&lt;/p&gt;
&lt;h2 id=&quot;1-CSRF如何攻击？&quot;&gt;&lt;a href=&quot;#1-CSRF如何攻击？&quot; class=&quot;headerlink&quot; title=&quot;1. CS
      
    
    </summary>
    
      <category term="安全隐私" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E9%9A%90%E7%A7%81/"/>
    
    
      <category term="Web安全" scheme="http://yoursite.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="CSRF" scheme="http://yoursite.com/tags/CSRF/"/>
    
      <category term="Token" scheme="http://yoursite.com/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>中国惠普前总裁孙振耀谈工作与生活</title>
    <link href="http://yoursite.com/2018/12/18/%E4%B8%AD%E5%9B%BD%E6%83%A0%E6%99%AE%E5%89%8D%E6%80%BB%E8%A3%81%E5%AD%99%E6%8C%AF%E8%80%80%E8%B0%88%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB/"/>
    <id>http://yoursite.com/2018/12/18/中国惠普前总裁孙振耀谈工作与生活/</id>
    <published>2018-12-18T15:05:47.366Z</published>
    <updated>2018-12-18T23:50:51.922Z</updated>
    
    <content type="html"><![CDATA[<p><em>偶然拜读孙振耀先生的退休感言，字字真切，多有同感，深受启发，然知易行难，故收藏在此，以便时常翻阅以激励自己。</em></p><p>文/中国惠普前总裁 孙振耀</p><p>　　我有个有趣的观察，外企公司多的是25-35岁的白领，40岁以上的员工很少，二三十岁的外企员工是意气风发的，但外企公司40岁附近的经理人是很尴尬的。我见过的40岁附近的外企经理人大多在一直跳槽，最后大多跳到民企，比方说，唐骏。外企员工的成功很大程度上是公司的成功，并非个人的成功，西门子的确比国美大，但并不代表西门子中国经理比国美的老板强，甚至可以说差得很远。而进外企的人往往并不能很早理解这一点，把自己的成功90%归功于自己的能力，实际上，外企公司随便换个中国区总经理并不会给业绩带来什么了不起的影响。好了问题来了，当这些经理人40多岁了，他们的薪资要求变得很高，而他们的才能其实又不是那么出众，作为外企公司的老板，你会怎么选择？有的是只要不高薪水的，要出位的精明强干精力冲沛的年轻人，有的是，为什么还要用你？</p><p>　　从上面这个例子，其实可以看到我们的工作轨迹，二三十岁的时候，生活的压力还比较小，身体还比较好，上面的父母身体还好，下面又没有孩子，不用还房贷，也没有孩子要上大学，当个外企小白领还是很光鲜的，挣得不多也够花了。但是人终归要结婚生子，终归会老，到了40岁，父母老了，要看病要吃药，要有人看护，自己要还房贷，要过基本体面的生活，要养小孩……那个时候需要挣多少钱才够花才重要。所以，看待工作，眼光要放远一点，一时的谁高谁低并不能说明什么。</p><p>　　从这个角度上来说，我不太赞成过于关注第一份工作的薪水，更没有必要攀比第一份工作的薪水，这在刚刚出校园的学生中间是很常见的。正常人大概要工作35年，这好比是一场马拉松比赛，和真正的马拉松比赛不同的是，这次比赛没有职业选手，每个人都只有一次机会。要知到，有很多人甚至坚持不到终点，大多数人最后是走到终点的，只有少数人是跑过终点的，因此在刚开始的时候，去抢领先的位置并没有太大的意义。刚进社会的时候如果进500强公司，大概能拿到3k-6k/月的工资，有些特别技术的人才可能可以到8k/月，可问题是，5年以后拿多少？估计5k-10k了不起了。起点虽然高，但增幅有限，而且，后面的年轻人追赶的压力越来越大。</p><p>　　我前两天问我的一个销售，你会的这些东西一个新人2年就都学会了，但新人所要求的薪水却只是你的一半，到时候，你怎么办？</p><p>　　职业生涯就像一场体育比赛，有初赛、复赛、决赛。初赛的时候大家都刚刚进社会，大多数都是实力一般的人，这时候努力一点认真一点很快就能让人脱颖而出，于是有的人二十多岁做了经理，有的人迟些也终于赢得了初赛，三十多岁成了经理。然后是复赛，能参加复赛的都是赢得初赛的，每个人都有些能耐，在聪明才智上都不成问题，这个时候再想要胜出就不那么容易了，单靠一点点努力和认真还不够，要有很强的坚忍精神，要懂得靠团队的力量，要懂得收服人心，要有长远的眼光……</p><p>　　看上去赢得复赛并不容易，但，还不是那么难。因为这个世界的规律就是给人一点成功的同时让人骄傲自满，刚刚赢得初赛的人往往不知道自己赢得的仅仅是初赛，有了一点小小的成绩大多数人都会骄傲自满起来，认为自己已经懂得了全部，不需要再努力再学习了，他们会认为之所以不能再进一步已经不是自己的原因了。虽然他们仍然不好对付，但是他们没有耐性，没有容人的度量，更没有清晰长远的目光。就像一只愤怒的斗牛，虽然猛烈，最终是会败的，而赢得复赛的人则象斗牛士一样，不急不躁，跟随着自己的节拍，慢慢耗尽对手的耐心和体力。赢得了复赛以后，大约已经是一位很了不起的职业经理人了，当上了中小公司的总经理，大公司的副总经理，主管着每年几千万乃至几亿的生意。</p><p>　　最终的决赛来了，说实话我自己都还没有赢得决赛，因此对于决赛的决胜因素也只能凭自己的猜测而已，这个时候的输赢或许就像武侠小说里写得那样，大家都是高手，只能等待对方犯错了，要想轻易击败对手是不可能的，除了使上浑身解数，还需要一点运气和时间。世界的规律依然发挥着作用，赢得复赛的人已经不只是骄傲自满了，他们往往刚愎自用，听不进去别人的话，有些人的脾气变得暴躁，心情变得浮躁，身体变得糟糕，他们最大的敌人就是他们自己，在决赛中要做的只是不被自己击败，等着别人被自己击败。这和体育比赛是一样的，最后高手之间的比赛，就看谁失误少谁就赢得了决赛。</p><p>　　<strong>根源</strong></p><p>　　你工作快乐么？你的工作好么？</p><p>　　有没有觉得干了一段时间以后工作很不开心？有没有觉得自己入错了行？有没有觉得自己没有得到应有的待遇？有没有觉得工作像一团乱麻每天上班都是一种痛苦？有没有很想换个工作？有没有觉得其实现在的公司并没有当初想象得那么好？有没有觉得这份工作是当初因为生存压力而找的，实在不适合自己？你从工作中得到你想要得到的了么？你每天开心么？</p><p>　　天涯上愤怒的人很多，你有没有想过，你为什么不快乐？你为什么愤怒？</p><p>　　其实，你不快乐的根源，是因为你不知道要什么！你不知道要什么，所以你不知道去追求什么，你不知道追求什么，所以你什么也得不到。</p><p>　　我总觉得，职业生涯首先要关注的是自己，自己想要什么？大多数人大概没想过这个问题，唯一的想法只是——我想要一份工作，我想要一份不错的薪水，我知道所有人对于薪水的渴望，可是，你想每隔几年重来一次找工作的过程么？你想每年都在这种对于工作和薪水的焦急不安中度过么？不想的话，就好好想清楚。饮鸩止渴，不能因为口渴就拼命喝毒药。越是焦急，越是觉得自己需要一份工作，越饥不择食，越想不清楚，越容易失败，你的经历越来越差，下一份工作的人看着你的简历就皱眉头。于是你越喝越渴，越渴越喝，陷入恶性循环。最终只能哀叹世事不公或者生不逢时，只能到天涯上来发泄一把，在失败者的共鸣当中寻求一点心理平衡罢了。大多数人都有生存压力，我也是，有生存压力就会有很多焦虑，积极的人会从焦虑中得到动力，而消极的人则会因为焦虑而迷失方向。所有人都必须在压力下做出选择，这就是世道，你喜欢也罢不喜欢也罢。</p><p>　　一般我们处理的事情分为重要的事情和紧急的事情，如果不做重要的事情就会常常去做紧急的事情。比如锻炼身体保持健康是重要的事情，而看病则是紧急的事情。如果不锻炼身体保持健康，就会常常为了病痛烦恼。又比如防火是重要的事情，而救火是紧急的事情，如果不注意防火，就要常常救火。找工作也是如此，想好自己究竟要什么是重要的事情，找工作是紧急的事情，如果不想好，就会常常要找工作。往往紧急的事情给人的压力比较大，迫使人们去赶紧做，相对来说重要的事情反而没有那么大的压力，大多数人做事情都是以压力为导向的，压力之下，总觉得非要先做紧急的事情，结果就是永远到处救火，永远没有停歇的时候。(很多人的工作也像是救火队一样忙碌痛苦，也是因为工作中没有做好重要的事情。)那些说自己活在水深火热为了生存顾不上那么多的朋友，今天找工作困难是当初你们没有做重要的事情，是结果不是原因。如果今天你们还是因为急于要找一份工作而不去思考，那么或许将来要继续承受痛苦找工作的结果。</p><p>　　我始终觉得我要说的话题，沉重了点，需要很多思考，远比唐笑打武警的话题来的枯燥乏味，但是，天下没有轻松的成功，成功，要付代价。请先忘记一切的生存压力，想想这辈子你最想要的是什么？所以，最要紧的事情，先想好自己想要什么。</p><p>　　<strong>什么是好工作</strong></p><p>　　当初微软有个唐骏，很多大学里的年轻人觉得这才是他们向往的职业生涯，我在清华bbs里发的帖子被这些学子们所不屑，那个时候学生们只想出国或者去外企，不过如今看来，我还是对的，唐骏去了盛大，陈天桥创立的盛大，一家民营公司。一个高学历的海归在500强的公司里拿高薪水，这大约是很多年轻人的梦想，问题是，每年毕业的大学生都在做这个梦，好的职位却只有500个。</p><p>　　人都是要面子的，也是喜欢攀比的，即使在工作上也喜欢攀比，不管那是不是自己想要的。大家认为外企公司很好，可是好在哪里呢？好吧，他们在比较好的写字楼，这是你想要的么？他们出差住比较好的酒店，这是你想要的么？别人会羡慕一份外企公司的工作，这是你想要的么？那一切都是给别人看的，你干吗要活得那么辛苦给别人看？另一方面，他们薪水福利一般，并没有特别了不起，他们的晋升机会比较少，很难做到很高阶的主管，他们虽然厌恶常常加班，却不敢不加班，因为“你不干有得是人干”，大部分情况下会找个台湾人香港人新加坡人来管你，而这些人又往往有些莫名其妙的优越感。你想清楚了么？500强一定好么？找工作究竟是考虑你想要什么，还是考虑别人想看什么？</p><p>　　我的大学同学们大多数都到美国了，甚至毕业这么多年了，还有人最近到国外去了。出国真的有那么好么？我的大学同学们，大多数还是在博士、博士后、访问学者地挣扎着，至今只有一个正经在一个美国大学里拿到个正式的教职。国内的教授很难当么？我有几个表亲也去了国外了，他们的父母独自在国内，没有人照顾，有好几次人在家里昏倒都没人知道，出国，真的这么光彩么？就像有人说的“很多事情就像看A片，看的人觉得很爽，做的人未必。”</p><p>　　人总想找到那个最好的，可是，什么是最好的？你觉得是最好的那个，是因为你的确了解，还是因为别人说他是最好的？即使他对于别人是最好的，对于你也一定是最好的么？</p><p>　　对于自己想要什么，自己要最清楚，别人的意见并不是那么重要。很多人总是常常被别人的意见所影响，亲戚的意见，朋友的意见，同事的意见……问题是，你究竟是要过谁的一生？人的一生不是父母一生的续集，也不是儿女一生的前传，更不是朋友一生的外篇，只有你自己对自己的一生负责，别人无法也负不起这个责任。自己做的决定，至少到最后，自己没什么可后悔。对于大多数正常智力的人来说，所做的决定没有大的对错，无论怎么样的选择，都是可以尝试的。比如你没有考自己上的那个学校，没有入现在这个行业，这辈子就过不下去了？就会很失败？不见得。</p><p>　　我想，好工作，应该是适合你的工作，具体点说，应该是能给你带来你想要的东西的工作，你或许应该以此来衡量你的工作究竟好不好，而不是拿公司的大小，规模，外企还是国企，是不是有名，是不是上市公司来衡量。小公司，未必不是好公司，赚钱多的工作，也未必是好工作。你还是要先弄清楚你想要什么，如果你不清楚你想要什么，你就永远也不会找到好工作，因为你永远只看到你得不到的东西，你得到的，都是你不想要的。</p><p>　　可能，最好的，已经在你的身边，只是，你还没有学会珍惜。人们总是盯着得不到的东西，而忽视了那些已经得到的东西。</p><p>　　<strong>普通人</strong></p><p>　　我发现中国人的励志和国外的励志存在非常大的不同，中国的励志比较鼓励人立下大志愿，卧薪尝胆，有朝一日成富成贵。而国外的励志比较鼓励人勇敢面对现实生活，面对普通人的困境，虽然结果也是成富成贵，但起点不一样，相对来说，我觉得后者在操作上更现实，而前者则需要用999个失败者来堆砌一个成功者的故事。</p><p>　　我们都是普通人，普通人的意思就是，概率这件事是很准的。因此，我们不会买彩票中500万，我们不会成为比尔盖茨或者李嘉诚，我们不会坐飞机掉下来，我们当中很少的人会创业成功，我们之中有30%的人会离婚，我们之中大部分人会活过65岁……</p><p>　　所以请你在想自己要什么的时候，要得“现实”一点，你说我想要做李嘉诚，抱歉，我帮不上你。成为比尔盖茨或者李嘉诚这种人，是靠命的，看我写的这篇文章绝对不会让你成为他们，即使你成为了他们，也绝对不是我这篇文章的功劳。“王侯将相宁有种乎”但真正当皇帝的只有一个人，王侯将相，人也不多。目标定得高些对于喜欢挑战的人来说有好处，但对于大多数普通人来说，反而比较容易灰心沮丧，很容易就放弃了。</p><p>　　回过头来说，李嘉诚比你有钱大致50万倍，他比你更快乐么？或许。有没有比你快乐50万倍，一定没有。他比你最多也就快乐一两倍，甚至有可能还不如你快乐。寻找自己想要的东西不是和别人比赛，比谁要得更多更高，比谁的目标更远大。虽然成为李嘉诚这个目标很宏大，但你并不见得会从这个目标以及追求目标的过程当中获得快乐，而且基本上你也做不到。你必须听听你内心的声音，寻找真正能够使你获得快乐的东西，那才是你想要的东西。</p><p>　　你想要的东西，或者我们把它称之为目标，目标其实并没有高低之分，你不需要因为自己的目标没有别人远大而不好意思，达到自己的目标其实就是成功，成功有大有小，快乐却是一样的。我们追逐成功，其实追逐的是成功带来的快乐，而非成功本身。职业生涯的道路上，我们常常会被攀比的心态蒙住眼睛，忘记了追求的究竟是什么，忘记了是什么能使我们更快乐。</p><p>　　社会上一夜暴富的新闻很多，这些消息，总会在我们的心里面掀起很多涟漪，涟漪多了就变成惊涛骇浪，心里的惊涛骇浪除了打翻承载你目标的小船，并不会使得你也一夜暴富。“只见贼吃肉，不见贼挨揍。”我们这些普通人既没有当贼的勇气，又缺乏当贼的狠辣绝决，虽然羡慕吃肉，却更害怕挨揍，偶尔看到几个没挨揍的贼就按奈不住，或者心思活动，或者大感不公，真要叫去做贼，却也不敢。</p><p>　　我还是过普通人的日子，要普通人的快乐，至少，晚上睡得着觉。</p><p>　　<strong>跳槽与积累</strong></p><p>　　首先要说明，工作是一件需要理智的事情，所以不要在工作上耍个性，天涯上或许会有人觉得你很有个性而叫好，煤气公司电话公司不会因为觉得你很有个性而免了你的帐单。当你很帅地炒掉了你的老板，当你很酷地挖苦了一番招聘的HR，账单还是要照付，只是你赚钱的时间更少了，除了你自己，没人受损失。</p><p>　　我并不反对跳槽，但跳槽决不是解决问题的办法，而且频繁跳槽的后果是让人觉得没有忠诚度可言，而且不能安心工作。现在很多人从网上找工作，很多找工作的网站常常给人出些馊主意，要知道他们是盈利性企业，当然要从自身盈利的角度来考虑，大家越是频繁跳槽频繁找工作他们越是生意兴隆，所以鼓动人们跳槽是他们的工作。所以他们会常常告诉你，你拿的薪水少了，你享受的福利待遇差了，又是“薪情快报”又是“赞叹自由奔放的灵魂”。至于是否会因此让你不能安心，你跳了槽是否解决问题，是否更加开心，那个，他们管不着。</p><p>　　要跳槽肯定是有问题，一般来说问题发生了，躲是躲不开的，很多人跳槽是因为这样或者那样的不开心，如果这种不开心，在现在这个公司不能解决，那么在下一个公司多半也解决不掉。你必须相信，90%的情况下，你所在的公司并没有那么烂，你认为不错的公司也没有那么好。就像围城里说的，“城里的人拼命想冲出来，而城外的人拼命想冲进去。”每个公司都有每个公司的问题，没有问题的公司是不存在的。换个环境你都不知道会碰到什么问题，与其如此，不如就在当下把问题解决掉。很多问题当你真的想要去解决的时候，或许并没有那么难。有的时候你觉得问题无法解决，事实上，那只是“你觉得”。</p><p>　　人生的曲线应该是曲折向上的，偶尔会遇到低谷但大趋势总归是曲折向上的，而不是象脉冲波一样每每回到起点，我见过不少面试者，30多岁了，四五份工作经历，每次多则3年，少则1年，30多岁的时候回到起点从一个初级职位开始干起，拿基本初级的薪水，和20多岁的年轻人一起竞争，不觉得有点辛苦么？这种日子好过么？</p><p>　　资本靠的就是积累，这种积累包括人际关系，经验，人脉，口碑……如果常常更换行业，代表几年的积累付之东流，一切从头开始，如果换了两次行业，35岁的时候大概只有5年以下的积累，而一个没有换过行业的人至少有了10年的积累，谁会占优势？工作到2-3年的时候，很多人觉得工作不顺利，好像到了一个瓶颈，心情烦闷，就想辞职，乃至换一个行业，觉得这样所有一切烦恼都可以抛开，会好很多。其实这样做只是让你从头开始，到了时候还是会发生和原来行业一样的困难，熬过去就向上跨了一大步，要知道每个人都会经历这个过程，每个人的职业生涯中都会碰到几个瓶颈，你熬过去了而别人没有熬过去你就领先了。跑长跑的人会知道，开始的时候很轻松，但是很快会有第一次的难受，但过了这一段又能跑很长一段，接下来会碰到第二次的难受，坚持过了以后又能跑一段，如此往复，难受一次比一次厉害，直到坚持不下去了。大多数人第一次就坚持不了了，一些人能坚持到第二次，第三次虽然大家都坚持不住了，可是跑到这里的人也没几个了，这点资本足够你安稳活这一辈子了。</p><p>　　一份工作到两三年的时候，大部分人都会变成熟手，这个时候往往会陷入不断的重复，有很多人会觉得厌倦，有些人会觉得自己已经搞懂了一切，从而懒得去寻求进步了。很多时候的跳槽是因为觉得失去兴趣了，觉得自己已经完成比赛了。其实这个时候比赛才刚刚开始，工作两三年的人，无论是客户关系，人脉，手下，和领导的关系，在业内的名气……还都是远远不够的，但稍有成绩的人总是会自我感觉良好的，每个人都觉得自己跟客户关系铁得要命，觉得自己在业界的口碑好得很。其实可以肯定地说，一定不是，这个时候，还是要拿出前两年的干劲来，稳扎稳打，积累才刚刚开始。</p><p>　　你足够了解你的客户吗？你知道他最大的烦恼是什么吗？你足够了解你的老板么？你知道他最大的烦恼是什么吗？你足够了解你的手下么？你知道他最大的烦恼是什么吗？如果你不知道，你凭什么觉得自己已经积累够了？如果你都不了解，你怎么能让他们帮你的忙，做你想让他们做的事情？如果他们不做你想让他们做的事情，你又何来的成功？</p><p>　　<strong>等待</strong></p><p>　　这是个浮躁的人们最不喜欢的话题，本来不想说这个话题，因为会引起太多的争论，而我又无意和人争论这些，但是考虑到对于职业生涯的长久规划，这是一个躲避不了的话题，还是决定写一写，不爱看的请离开吧。</p><p>　　并不是每次穿红灯都会被汽车撞，并不是每个罪犯都会被抓到，并不是每个错误都会被惩罚，并不是每个贪官都会被枪毙，并不是你的每一份努力都会得到回报，并不是你的每一次坚持都会有人看到，并不是你每一点付出都能得到公正的回报，并不是你的每一个善意都能被理解……这个，就是世道。好吧，世道不够好，可是，你有推翻世道的勇气么？如果没有，你有更好的解决办法么？有很多时候，人需要一点耐心，一点信心。每个人总会轮到几次不公平的事情，而通常，安心等待是最好的办法。</p><p>　　有很多时候我们需要等待，需要耐得住寂寞，等待属于你的那一刻。周润发等待过，刘德华等待过，周星驰等待过，王菲等待过，张艺谋也等待过……看到了他们如今的功成名就的人，你可曾看到当初他们的等待和耐心？你可曾看到金马奖影帝在街边摆地摊？你可曾看到德云社一群人在剧场里给一位观众说相声？你可曾看到周星驰的角色甚至连一句台词都没有？每一个成功者都有一段低沉苦闷的日子，我几乎能想象得出来他们借酒浇愁的样子，我也能想象得出他们为了生存而挣扎的窘迫。在他们一生最中灿烂美好的日子里，他们渴望成功，但却两手空空，一如现在的你。没有人保证他们将来一定会成功，而他们的选择是耐住寂寞。如果当时的他们总念叨着“成功只是属于特权阶级的”，你觉得他们今天会怎样？</p><p>　　曾经我也不明白有些人为什么并不比我有能力却要坐在我的头上，年纪比我大就一定要当我的领导么？为什么有些烂人不需要努力就能赚钱？为什么刚刚改革开放的时候的人能那么容易赚钱，而轮到我们的时候，什么事情都要正规化了？有一天我突然想，我还在上学的时候他们就在社会里挣扎奋斗了，他们在社会上奋斗积累了十几二十年，我们新人来了，他们有的我都想要，我这不是在要公平，我这是在要抢劫。因为我要得太急，因为我忍不住寂寞。二十多岁的男人，没有钱，没有事业，却有蓬勃的欲望。</p><p>　　人总是会遇到挫折的，人总是会有低潮的，人总是会有不被人理解的时候的，人总是有要低声下气的时候，这些时候恰恰是人生最关键的时候，因为大家都会碰到挫折，而大多数人过不了这个门槛，你能过，你就成功了。在这样的时刻，我们需要耐心等待，满怀信心地去等待，相信，生活不会放弃你，机会总会来的。至少，你还年轻，你没有坐牢，没有生治不了的病，没有欠还不起的债。比你不幸的人远远多过比你幸运的人，你还怕什么？路要一步步走，虽然到达终点的那一步很激动人心，但大部分的脚步是平凡甚至枯燥的，但没有这些脚步，或者耐不住这些平凡枯燥，你终归是无法迎来最后的那些激动人心。</p><p>　　逆境，是上帝帮你淘汰竞争者的地方。要知道，你不好受，别人也不好受，你坚持不下去了，别人也一样，千万不要告诉别人你坚持不住了，那只能让别人获得坚持的信心，让竞争者看着你微笑的面孔，失去信心，退出比赛。胜利属于那些有耐心的人。</p><p>　　在最绝望的时候，我会去看电影《The Pursuit of Happyness》《Jerry Maguire》，让自己重新鼓起勇气，因为，无论什么时候，我们总还是有希望。当所有的人离开的时候，我不失去希望，我不放弃。每天下班坐在车里，我喜欢哼着《隐形的翅膀》看着窗外，我知道，我在静静等待，等待属于我的那一刻。</p><p>　　原贴里伊吉网友的话我很喜欢，抄录在这里：</p><p>　　每个人都希望，自己是独一无二的特殊者</p><p>　　含着金匙出生、投胎到好家庭、工作安排到电力局拿1w月薪这样的小概率事件，当然最好轮到自己</p><p>　　红军长征两万五、打成右派反革命、胼手胝足牺牲尊严去奋斗，最好留给祖辈父辈和别人</p><p>　　自然，不是每个吃过苦的人都会得到回报</p><p>　　但是，任何时代，每一个既得利益者身后，都有他的祖辈父辈奋斗挣扎乃至流血付出生命的身影</p><p>　　羡慕别人有个好爸爸，没什么不可以</p><p>　　问题是，你的下一代，会有一个好爸爸吗？</p><p>　　至于问到为什么不能有同样的赢面概率？我只能问：为什么物种竞争中，人和猴子不能有同样的赢面概率？</p><p>　　物竞天择。猴子的灵魂不一定比你卑微，但你身后有几十万年的类人猿进化积淀。</p><p>　　<strong>入对行跟对人</strong></p><p>　　在中国，大概很少有人是一份职业做到底的，虽然如此，第一份工作还是有些需要注意的地方，有两件事情格外重要，第一件是入行，第二件事情是跟人。第一份工作对人最大的影响就是入行，现代的职业分工已经很细，我们基本上只能在一个行业里成为专家，不可能在多个行业里成为专家。很多案例也证明即使一个人在一个行业非常成功，到另外一个行业，往往完全不是那么回事情，“你想改变世界，还是想卖一辈子汽水？”是乔布斯邀请百事可乐总裁约翰·斯考利加盟苹果时所说的话，结果这位在百事非常成功的约翰，到了苹果表现平平。其实没有哪个行业特别好，也没有哪个行业特别差，或许有报道说哪个行业的平均薪资比较高，但是他们没说的是，那个行业的平均压力也比较大。看上去很美的行业一旦进入才发现很多地方其实并不那么完美，只是外人看不见。</p><p>　　说实话，我自己都没有发大财，所以我的建议只是让人快乐工作的建议，不是如何发大财的建议，我们只讨论一般普通打工者的情况。我认为选择什么行业并没有太大关系，看问题不能只看眼前。比如，从前年开始，国家开始整顿医疗行业，很多医药公司开不下去，很多医药行业的销售开始转行。其实医药行业的不景气是针对所有公司的，并非针对一家公司，大家的日子都不好过，这个时候跑掉是非常不划算的，大多数正规的医药公司即使不做新生意撑个两三年总是能撑的，大多数医药销售靠工资撑个两三年也是可以撑的，国家不可能永远捏着医药行业不放的，两三年以后光景总归还会好起来的，那个时候别人都跑了而你没跑，那时的日子应该会好过很多。有的时候觉得自己这个行业不行了，问题是，再不行的行业，做得人少了也变成了好行业，当大家都觉得不好的时候，往往却是最好的时候。大家都觉得金融行业好，金融行业门槛高不说，有多少人削尖脑袋要钻进去，竞争激励，进去以后还要时时提防，一个疏忽，就被后来的人给挤掉了，压力巨大，又如何谈得上快乐？也就未必是“好”工作了。</p><p>　　太阳能这个东西至今还不能进入实际应用的阶段，但是中国已经有7家和太阳能有关的公司在纽交所上市了，国美苏宁永乐其实是贸易型企业，也能上市，鲁泰纺织连续10年利润增长超过50%，卖茶的一茶一座，卖衣服的海澜之家都能上市……其实选什么行业真的不重要，关键是怎么做。事情都是人做出来的，关键是人。</p><p>　　有一点是需要记住的，这个世界上，有史以来直到我们能够预见得到的未来，成功的人总是少数，有钱的人总是少数，大多数人是一般的，普通的，不太成功的。因此，大多数人的做法和看法，往往都不是距离成功最近的做法和看法。因此大多数人说好的东西不见得好，大多数人说不好的东西不见得不好。大多数人都去炒股的时候说明跌只是时间问题，大家越是热情高涨的时候，跌的日子越近。大多数人买房子的时候，房价不会涨，而房价涨的差不多的时候，大多数人才开始买房子。不会有这样一件事情让大家都变成功，发了财，历史上不曾有过，将来也不会发生。有些东西即使一时运气好得到了，还是会在别的时候别的地方失去的。<br>　　年轻人在职业生涯的刚开始，尤其要注意的是，要做对的事情，不要让自己今后几十年的人生总是提心吊胆，更不值得为了一份工作赔上自己的青春年华。我的公司是个不行贿的公司，以前很多人不理解，甚至自己的员工也不理解，不过如今，我们是同行中最大的企业，客户乐意和我们打交道，尤其是在国家打击腐败的时候，每个人都知道我们做生意不给钱的名声，都敢于和我们做生意。而勇于给钱的公司，不是倒了，就是跑了，要不就是每天睡不好觉，人还是要看长远一点。很多时候，看起来最近的路，其实是最远的路，看起来最远的路，其实是最近的路。</p><p>　　跟对人是说，入行后要跟个好领导好老师，刚进社会的人做事情往往没有经验，需要有人言传身教。对于一个人的发展来说，一个好领导是非常重要的。所谓“好”的标准，不是他让你少干活多拿钱，而是以下三个。</p><p>　　首先，好领导要有宽广的心胸，如果一个领导每天都会发脾气，那几乎可以肯定他不是个心胸宽广的人，能发脾气的时候却不发脾气的领导，多半是非常厉害的领导。中国人当领导最大的毛病是容忍不了能力比自己强的人，所以常常可以看到的一个现象是，领导很有能力，手下一群庸才或者手下一群闲人。如果看到这样的环境，还是不要去的好。</p><p>　　其次，领导要愿意从下属的角度来思考问题，这一点其实是从面试的时候就能发现的，如果这位领导总是从自己的角度来考虑问题，几乎不听你说什么，这就危险了。从下属的角度来考虑问题并不代表同意下属的说法，但他必须了解下属的立场，下属为什么要这么想，然后他才有办法说服你，只关心自己怎么想的领导往往难以获得下属的信服。</p><p>　　第三，领导敢于承担责任，如果出了问题就把责任往下推，有了功劳就往自己身上揽，这样的领导不跟也罢。选择领导，要选择关键时刻能抗得住的领导，能够为下属的错误买单的领导，因为这是他作为领导的责任。</p><p>　　有可能，你碰不到好领导，因为，中国的领导往往是屁股决定脑袋的领导，因为他坐领导的位置，所以他的话就比较有道理，这是传统观念官本位的误区，可能有大量的这种无知无能的领导，只是，这对于你其实是好事，如果将来有一天你要超过他，你希望他比较聪明还是比较笨？相对来说这样的领导其实不难搞定，只是你要把自己的身段放下来而已。多认识一些人，多和比自己强的人打交道，同样能找到好的老师，不要和一群同样郁闷的人一起控诉社会，控诉老板，这帮不上你，只会让你更消极。和那些比你强的人打交道，看他们是怎么想的，怎么做的，学习他们，然后跟更强的人打交道。</p><p>　　<strong>选择</strong></p><p>　　我们每天做的最多的事情，其实是选择，因此在谈职业生涯的时候不得不提到这个话题。</p><p>　　我始终认为，在很大的范围内，我们究竟会成为一个什么样的人，决定权在我们自己，每天我们都在做各种各样的选择，我可以不去写这篇文章，去别人的帖子拍拍砖头，也可以写下这些文字，帮助别人的同时也整理自己的思路，我可以多注意下格式让别人易于阅读，也可以写成一堆，我可以就这样发上来，也可以在发以前再看几遍，你可以选择不刮胡子就去面试，也可以选择出门前照照镜子……每天，每一刻我们都在做这样那样的决定，我们可以漫不经心，也可以多花些心思，成千上万的小选择累计起来，就决定了最终我们是个什么样的人。</p><p>　　从某种意义上来说我们的未来不是别人给的，是我们自己选择的，很多人会说我命苦啊，没得选择阿，如果你认为“去微软还是去IBM”“上清华还是上北大”“当销售副总还是当厂长”这种才叫选择的话，的确你没有什么选择，大多数人都没有什么选择。但每天你都可以选择是否为客户服务更周到一些，是否对同事更耐心一些，是否把工作做得更细致一些，是否把情况了解得更清楚一些，是否把不清楚的问题再弄清楚一些……你也可以选择在是否在痛苦中继续坚持，是否抛弃掉自己的那些负面的想法，是否原谅一个人的错误，是否相信我在这里写下的这些话，是否不要再犯同样的错误……生活每天都在给你选择的机会，每天都在给你改变自己人生的机会，你可以选择赖在地上撒泼打滚，也可以选择咬牙站起来。你永远都有选择。有些选择不是立杆见影的，需要累积，比如农民可以选择自己常常去浇地，也可以选择让老天去浇地，诚然你今天浇水下去苗不见得今天马上就长出来，但常常浇水，大部分苗终究会长出来的，如果你不浇，收成一定很糟糕。</p><p>　　每天生活都在给你机会，他不会给你一叠现金也不会拱手送你个好工作，但实际上，他还是在给你机会。我的家庭是一个普通的家庭，没有任何了不起的社会关系，我的父亲在大学毕业以后就被分配到了边疆，那个小县城只有一条马路，他们那一代人其实比我们更有理由抱怨，他们什么也没得到，年轻的时候文化大革命，书都没得读，支援边疆插队落户，等到老了，却要给年轻人机会了。他有足够的理由象成千上万那样的青年一样坐在那里抱怨生不逢时，怨气冲天。然而在分配到边疆的十年之后，国家恢复招研究生，他考回了原来的学校。研究生毕业，他被分配到了安徽一家小单位里，又是3年以后，国家第一届招收博士生，他又考回了原来的学校，成为中国第一代博士，那时的他比现在的我年纪还大。生活并没有放弃他，他也没有放弃生活。10年的等待，他做了他自己的选择，他没有放弃，他没有破罐子破摔，所以时机到来的时候，他改变了自己的人生。你最终会成为什么样的人，就决定在你的每个小小的选择之间。</p><p>　　你选择相信什么？你选择和谁交朋友？你选择做什么？你选择怎么做？……我们面临太多的选择，而这些选择当中，意识形态层面的选择又远比客观条件的选择来得重要得多，比如选择做什么产品其实并不那么重要，而选择怎么做才重要。选择用什么人并不重要，而选择怎么带这些人才重要。大多数时候选择客观条件并不要紧，大多数关于客观条件的选择并没有对错之分，要紧的是选择怎么做。一个大学生毕业了，他要去微软也好，他要卖猪肉也好，他要创业也好，他要做游戏代练也好，只要不犯法，不害人，都没有什么关系，要紧的是，选择了以后，怎么把事情做好。</p><p>　　除了这些，你还可以选择时间和环境，比如，你可以选择把这辈子最大的困难放在最有体力最有精力的时候，也可以走一步看一步，等到了40岁再说，只是到了40多岁，那正是一辈子最脆弱的时候，上有老下有小，如果在那个时候碰上了职业危机，实在是一件很苦恼的事情。与其如此不如在20多岁30多岁的时候吃点苦，好让自己脆弱的时候活得从容一些。你可以选择在温室里成长，也可以选择到野外磨砺，你可以选择在办公室吹冷气的工作，也可以选择40度的酷热下，去见你的客户，只是，这一切最终会累积起来，引导你到你应得的未来。</p><p>　　我不敢说所有的事情你都有得选择，但是绝大部分事情你有选择，只是往往你不把这当作一种选择。认真对待每一次选择，才会有比较好的未来。</p><p>　　<strong>选择职业</strong></p><p>　　职业的选择，总的来说，无非就是销售、市场、客服、物流、行政、人事、财务、技术、管理几个大类，有个有趣的现象就是，500强的CEO当中最多的是销售出身，第二多的人是财务出身，这两者加起来大概超过95%。现代IT行业也有技术出身成为老板的，但实际上，后来他们还是从事了很多销售和市场的工作，并且表现出色，公司才获得了成功，完全靠技术能力成为公司老板的，几乎没有。这是有原因的，因为销售就是一门跟人打交道的学问，而管理其实也是跟人打交道的学问，这两者之中有很多相通的东西，他们的共同目标就是“让别人去做某件特定的事情。”而财务则是从数字的层面了解生意的本质，从宏观上看待生意的本质，对于一个生意是否挣钱，是否可以正常运作有着最深刻的认识。</p><p>　　公司小的时候是销售主导公司，而公司大的时候是财务主导公司，销售的局限性在于只看人情不看数字，财务的局限性在于只看数字不看人情。公司初期，运营成本低，有订单就活得下去，跟客户也没有什么谈判的条件，别人肯给生意做已经谢天谢地了，这个时候订单压倒一切，客户的要求压倒一切，所以当然要顾人情。公司大了以后，一切都要规范化，免得因为不规范引起一些不必要的风险，同时运营成本也变高，必须提高利润率，把有限的资金放到最有产出的地方。对于上市公司来说，股东才不管你客户是不是最近出国，最近是不是那个省又在搞严打，到了时候就要把业绩拿出来，拿不出来就抛股票，这个时候就是数字压倒一切。<br>　　前两天听到有人说一句话觉得很有道理，开始的时候我们想“能做什么？”，等到公司做大了有规模了，我们想“不能做什么。”很多人在工作中觉得为什么领导这么保守，这也不行那也不行，错过很多机会。很多时候是因为，你还年轻，你想的是“能做什么”，而作为公司领导要考虑的方面很多，他比较关心“不能做什么”。</p><p>　　我并非鼓吹大家都去做销售或者财务，究竟选择什么样的职业，和你究竟要选择什么样的人生有关系，有些人就喜欢下班按时回家，看看书听听音乐，那也挺好，但就不适合找个销售的工作了，否则会是折磨自己。有些人就喜欢出风头，喜欢成为一群人的中心，如果选择做财务工作，大概也干不久，因为一般老板不喜欢财务太积极，也不喜欢财务话太多。先想好自己要过怎样的人生，再决定要找什么样的职业。有很多的不快乐，其实是源自不满足，而不满足，很多时候是源自于心不定，而心不定则是因为不清楚究竟自己要什么，不清楚要什么的结果就是什么都想要，结果什么都没得到。</p><p>　　我想，我们还是因为生活而工作，不是因为工作而生活，生活是最要紧的，工作只是生活中的一部分。我总是觉得生活的各方方面都是相互影响的，如果生活本身一团乱麻，工作也不会顺利。所以要有娱乐、要有社交、要锻炼身体，要有和睦的家庭……最要紧的，要开心，我的两个销售找我聊天，一肚子苦水，我问他们，2年以前，你什么都没有，工资不高，没有客户关系，没有业绩，处于被开的边缘，现在的你比那时条件好了很多，为什么现在却更加不开心了？如果你做得越好越不开心，那你为什么还要工作？首先的首先，人还是要让自己高兴起来，让自己心态好起来，这种发自内心的改变会让你更有耐心，更有信心，更有气质，更能包容……否则，看看镜子里的你，你满意么？</p><p>　　有人会说，你说得容易，我每天加班，不加班老板就会把我炒掉，每天累得要死，哪有时间娱乐、社交、锻炼？那是人们把目标设定太高的缘故，如果你还在动不动就会被老板炒掉的边缘，那么你当然不能设立太高的目标，难道你还想每天去打高尔夫？你没时间去健身房锻炼身体，但是上下班的时候多走几步可以吧，有楼梯的时候走走楼梯不走电梯可以吧？办公的间隙扭扭脖子拉拉肩膀做做俯卧撑可以吧？谁规定锻炼就一定要拿出每天2个小时去健身房？你没时间社交，每月参加郊游一次可以吧，周末去参加个什么音乐班，绘画班之类的可以吧，去尝试认识一些同行，和他们找机会交流交流可以吧？开始的时候总是有些难的，但迈出这一步就会向良性循环的方向发展。而每天工作得很苦闷，剩下的时间用来咀嚼苦闷，只会陷入恶性循环，让生活更加糟糕。</p><p>　　<em>孙振耀撰文谈退休并畅谈人生</em></p><p>　　虽然离开惠普仅有十五天，但感觉上惠普已经离我很远。我的心思更多放在规划自己第二阶段的人生，这并非代表我对惠普没有任何眷恋，主要还是想以此驱动自己往前走。</p><p>　　万科王石登珠穆朗玛峰的体验给我很多启发，虽然在出发时携带大量的物资，但是登顶的过程中，必须不断减轻负荷，最终只有一个氧气瓶和他登上峰顶。登山如此，漫长的人生又何尝不是。</p><p>　　我宣布退休后，接到同事朋友同学的祝贺。大部分人都认为我能够在这样的职位上及年龄选择退休，是一种勇气，也是一种福气。</p><p>　　还有一部分人怀疑我只是借此机会换个工作，当然还有一些人说我在HP做不下去了，趁此机会离开。</p><p>　　我多年来已经习惯别人对我的说三道四，但对于好友，我还是挺关心大家是否真正理解我的想法，这也是写这篇文章的目的。</p><p>　　由于受我父亲早逝的影响，我很早就下定决心，要在有生之年实现自己的愿望，我不要像我父亲一样，为家庭生活忙碌一辈子，临终前感伤，懊恼自己有很多没有实现的理想。</p><p>　　一本杂志的文章提到我们在生前就应该思考自己的墓志铭，因为那代表你自己对完美人生的定义，我们应该尽可能在有生之年去实现它。</p><p>　　我希望我的墓志铭上除了与家人及好友有关的内容外，是这样写着：</p><p>　　1.这个人曾经服务于一家全球最大的IT公司(HP)25年，和她一起经历过数次重大的变革，看着她从以电子仪表为主要的业务变革成全球最大的IT公司。</p><p>　　2.这个人曾经在全球发展最快的国家(中国)工作16年，并担任HP中国区总裁7年，见证及经历过中国改革开放的关键 最新突破阶段，与中国一起成长。</p><p>　　3.这个人热爱飞行，曾经是一个有执照的飞行员，累积飞行时数超过X小时，曾经在X个机场起降过。</p><p>　　4. 这个人曾经获得管理硕士学位，在领导管理上特别关注中国企业的组织行为及绩效，并且在这个领域上获得中国企业界的认可。</p><p>　　我费时25年才总结1和2两项成果，我不知还要费时多久才能达成3和4的愿望，特别是第4个愿望需要经历学术的训练，才能将我的经验总结成知识。</p><p>　　否则我的经验将无法有效影响及传授他人。因此重新进入学校学习，拿一个管理学位是有必要的，更何况这是我一个非常重要的愿望。</p><p>　　另一方面，我25年的时间都花在运营(operation) 的领域，兢兢业业的做好职业人士的工作，它是一份好工作，特别是在HP，这份工作也帮助我建立财务的基础，支持家庭的发展。</p><p>　　但是我不想终其一生，都陷入在运营的领域，我想象企业家一样，有机会靠一些点子 (ideas)赚钱，虽然风险很高，但是值得一试，即使失败，也不枉走一回，这也是第4个愿望其中的一部份。</p><p>　　Carly Fiorina 曾经对我说过“这个世界上有好想法的人很多，但有能力去实现的人很少”，2007 年5月21日在北大演讲时，有人问起那些书对我影响较大，我想对我人生观有影响的其中一本书叫“Trigger Point”，它的主要观点是：人生最需要的不是规划，而是在适当的时机掌握机会，采取行动。</p><p>　　我这些愿望在我心中已经酝酿一段很长的时间，开始的时候，也许一年想个一两次，过了也就忘掉，但逐渐的，这个心中的声音，愈来愈大，出现的频率也愈来愈高，当它几乎每一个星期都会来与我对话时，我知道时机已经成熟。</p><p>　　但和任何人一样，要丢掉自己现在所拥有的，所熟悉的环境及稳定的收入，转到一条自己未曾经历过，存在未知风险的道路，需要绝大的勇气，家人的支持和好友的鼓励。有舍才有得，真是知易行难，我很高兴自己终于跨出了第一步。</p><p>　　我要感谢HP的EER提前退休优惠政策，它是其中一个关键的Trigger Points,另一个关键因素是在去年五六月发生的事。</p><p>　　当时我家老大从大学毕业，老二从高中毕业，在他们继续工作及求学前，这是一个黄金时段，让我们全家可以相聚一段较长的时间，我为此很早就计划休一个长假，带着他们到各地游玩。</p><p>　　但这个计划因为工作上一件重要的事情(Mark Hurd 访华)不得不取消。这个事件刺激了我必须严肃的去对待那心中的声音，我会不会继续不断的错失很多关键的机会?</p><p>　　我已经年过50，我会不会走向和我父亲一样的道路？人事部老总Charles跟我说，很多人在所有对他有利的星星都排成一列时，还是错失时机。</p><p>　　我知道原因，因为割舍及改变对人是多么的困难，我相信大部分的人都有自己人生的理想，但我也相信很多人最终只是把这些理想当成是 幻想，然后不断的为自己寻找不能实现的藉口，南非前总统曼德拉曾经说过，“与改变世界相比，改变自己更困难”，真是一针见血。</p><p>　　什么是快乐及有意义的人生？我相信每一个人的定义都不一样，对我来说，能实现我墓志铭上的内容就是我的定义。</p><p>　　在中国惠普总裁的位置上固然可以吸引很多的关注及眼球，但是我太太及较亲近的好友，都知道那不是我追求的，那只是为扮演好这个角色必须尽力做好的地方。</p><p>　　做一个没有名片的人士，虽然只有十多天的时间，但我发现我的脑袋里已经空出很多空间及能量，让我可以静心的为我Chapter II的新生活做细致的调研及规划。</p><p>　　我预订以两年的时间来完成转轨的准备工作，并且花多点时间与家人共处。这两年的时间我希望拿到飞行执照，拿到管理有关的硕士学位，提升英文的水平，建立新的网络，多认识不同行业的人，保持与大陆的联系。希望两年后，我可以顺利回到大陆去实现我第四个愿望。</p><p>　　毫不意外，在生活上，我发现很多需要调整的地方。</p><p>　　二十多年来，我生活的步调及节奏，几乎完全被公司及工作所左右，不断涌出的deadline及任务驱动我每天的安排，一旦离开这样的环境，第一个需要调整的就是要依靠自己的自律及意志力来驱动每天的活动，睡觉睡到自然醒的态度绝对不正确，放松自己，不给事情设定目标及时间表，或者对错失时间目标无所谓，也不正确，没有年度，季度，月及周计划也不正确。</p><p>　　担任高层经理多年，已经养成交待事情的习惯，自己的时间主要花在思考，决策及追踪项目的进展情况，更多是依靠一个庞大的团队来执行具体的事项及秘书来处理很多协调及繁琐的事情。</p><p>　　到美国后，很多事情需要打800号电话联系，但这些电话很忙，常让你在waiting line上等待很长的时间，当我在等待时，我可以体会以前秘书工作辛苦的地方，但同时也提醒我自己，在这个阶段要改变态度，培养更大的耐性及自己动手做的能力。</p><p>　　生活的内容也要做出很大的调整，多出时间锻炼身体，多出时间关注家人，多出时间关注朋友，多出时间体验不同的休闲活动及飞行，一步步的，希望生活逐步调整到我所期望的轨道上，期待这两年的生活既充实又充满乐趣及意义。</p><p>　　第一个快乐的体验就是准备及参加大儿子的订婚礼，那种全心投入，不需担忧工作数字的感觉真好。同时我也租好了公寓，买好了家具及车子，陪家人在周末的时候到Reno 及Lake Tahoe玩了一趟，Lake Tahoe我去了多次，但这次的体验有所不同，我从心里欣赏到它的美丽。</p><p>　　但同时我也在加紧调研的工作，为申请大学及飞行学校做准备，这段时间也和在硅谷的朋友及一些风险投资公司见面，了解不同的产业。</p><p>　　我的人生观是“完美的演出来自充分的准备”，“勇于改变自己，适应不断变化的环境，机会将不断出现”，“快乐及有意义的人生来自于实现自己心中的愿望，而非外在的掌声”。</p><p>　　我离开时，有两位好朋友送给我两个不同的祝语，Baron的是“多年功过化烟尘”，杨华的是“莫春者，风乎舞雩，咏而归”，它们分别代表了我离开惠普及走向未来的心情。</p><p>　　我总结人生有三个阶段，一个阶段是为现实找一份工作，一个阶段是为现实，但可以选择一份自己愿意投入的工作，一个阶段是为理想去做一些事情。</p><p>　　我珍惜我的福气，感激HP及同事、好朋友给我的支持，鼓励及协助，这篇文字化我心声的文章与好友分享。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;偶然拜读孙振耀先生的退休感言，字字真切，多有同感，深受启发，然知易行难，故收藏在此，以便时常翻阅以激励自己。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;文/中国惠普前总裁 孙振耀&lt;/p&gt;
&lt;p&gt;　　我有个有趣的观察，外企公司多的是25-35岁的白领，40岁以上的员工很少，二三十岁的外
      
    
    </summary>
    
      <category term="好书好文" scheme="http://yoursite.com/categories/%E5%A5%BD%E4%B9%A6%E5%A5%BD%E6%96%87/"/>
    
    
      <category term="孙振耀" scheme="http://yoursite.com/tags/%E5%AD%99%E6%8C%AF%E8%80%80/"/>
    
      <category term="工作与生活" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>大型网站中常用的缓存类型</title>
    <link href="http://yoursite.com/2018/12/17/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/12/17/大型网站中常用的缓存类型/</id>
    <published>2018-12-17T15:53:13.312Z</published>
    <updated>2018-12-18T15:06:08.218Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>网站性能优化第一定律：首选使用缓存优化性能。</strong></p></blockquote><h2 id="1-为什么要用缓存？"><a href="#1-为什么要用缓存？" class="headerlink" title="1. 为什么要用缓存？"></a>1. 为什么要用缓存？</h2><p>　　使用缓存的目的有两种：提高响应速度和降低后端压力。缓存可有效缩短数据传输，降低带宽要求，显著提高响应速度。对于后端服务和存储层而言，可以有效隔离热点流量，防止流量并发造成的冲击。<br>　　鉴于缓存的两个目的，缓存层通常置于离需求方最近的位置，当终端用户是需求方时，缓存要尽量接近终端用户；当应用程序是需求方时，缓存要接近应用程序。</p><h2 id="2-什么样的内容可以缓存？"><a href="#2-什么样的内容可以缓存？" class="headerlink" title="2. 什么样的内容可以缓存？"></a>2. 什么样的内容可以缓存？</h2><p>　　既然是缓存，那一定是不能每次都获取实时计算的结果，即变动不频繁的资源。Web网站中通常使用缓存的有静态文件（图片、css、js、HTML、文档）、接口计算结果、数据库中的热点数据。<br>　　这些缓存数据的共同特点是更新不频繁，访问频繁。</p><h2 id="3-缓存有哪几类？适用于什么场景？"><a href="#3-缓存有哪几类？适用于什么场景？" class="headerlink" title="3. 缓存有哪几类？适用于什么场景？"></a>3. 缓存有哪几类？适用于什么场景？</h2><p><img src="https://i.imgur.com/BJHoyd1.png" alt="网络简图"></p><p>　　上图是一个请求从浏览器到服务端的访问简图。图上的每个环节都可能设置缓存。按照请求的访问顺序，缓存可以分为：</p><ul><li>浏览器缓存</li><li>CDN缓存</li><li>反向代理缓存</li><li>应用缓存<ul><li>本地缓存</li><li>分布式缓存</li></ul></li><li>数据库缓存<ul><li>数据库中间件缓存</li><li>数据库缓存</li></ul></li></ul><h3 id="3-1-浏览器缓存"><a href="#3-1-浏览器缓存" class="headerlink" title="3.1 浏览器缓存"></a>3.1 浏览器缓存</h3><p>　　<strong>应用场景：图片、css、文档、js等更新较少、体积较大、访问频繁的静态资源文件。</strong><br>　　这些资源每次页面访问都需要获取，如果每次都从服务器获取，势必会占用大量带宽且响应缓慢。可以将这些资源存放到用户浏览器缓存中，通过在HTTP头中设置Cache-Control和Expires来开启缓存和缓存有效期。<br>　　需要更新某些资源时，通过修改资源名称的方法。建议不要一次性更新所有资源，而是逐步更新，避免造成拥堵，影响体验。</p><h3 id="3-2-CDN"><a href="#3-2-CDN" class="headerlink" title="3.2 CDN"></a>3.2 CDN</h3><p>　　<strong>应用场景：图片、css、文档、js、html等更新较少、体积较大、访问频繁的静态资源文件。</strong><br>　　CDN通常部署在各运营商的机房，在请求路由中是距离用户最近的服务，而且由于它部署在各地运营商的机房，用户可以直接从距离自己最近的运营商机房中获取资源，因此访问速度非常快。它由专门的网络服务提供商运营。</p><h3 id="3-3-反向代理"><a href="#3-3-反向代理" class="headerlink" title="3.3 反向代理"></a>3.3 反向代理</h3><p>　　<strong>应用场景：体积较小的静态资源，比如css、js、图片、html。还有变动不频繁的接口返回的数据类响应消息，比如某些词条、帖子内容等。</strong><br>　　反向代理属于服务端设备，通常位于应用服务的机房内，属于应用的第一层服务。它可以将内部服务与外部进行隔离，保护服务安全，同时可以提供一部分缓存服务。<br>　　反向代理中的缓存资源可以通过消息通知机制进行更新，也可以与redis等缓存数据库配合通过缓存数据库的数据过期机制进行清理。<br>　　常用的反向代理软件有：Nginx、Varnish、Squid</p><h3 id="3-4-应用缓存"><a href="#3-4-应用缓存" class="headerlink" title="3.4 应用缓存"></a>3.4 应用缓存</h3><p>　　应用缓存分为本地缓存和分布式缓存。</p><ul><li><p>　　本地缓存<br>　　<strong>应用场景：占用空间小的少量数据，比如系统运行参数、全局统一配置等。</strong><br>　　本地缓存就是在应用进行的内存中存放的数据，比如使用MAP、List等java容器存放数据或者使用开源中间件。特点是数据量小，占空间不大，不需要共享。<br>　　本地缓存可以直接通过编码实现或者采用中间件。常用的中间件有：Guava Cache、Ehcache。</p></li><li><p>　　分布式缓存<br>　　<strong>应用场景：数据量大、占用空间大、变动不频繁、访问频繁，需要共享的资源，比如电商系统中的购物车数据、库存数据。</strong><br>　　分布式缓存主要针对读写频繁，并发量大的资源，一般采用KV的方式存储。业界的使用方式基本遵循二八定律，也多是用于存放20%的热点数据。分布式缓存涉及到数据的共享、同步、并发、持久化等问题，因此基本采用成熟专业的中间件。常用的中间件有：redis、Memcached及企业级的Jboss cache、OSCache等。</p></li></ul><h3 id="3-5-数据库缓存"><a href="#3-5-数据库缓存" class="headerlink" title="3.5 数据库缓存"></a>3.5 数据库缓存</h3><p>　　数据库缓存包括数据库自身缓存和数据库中间件缓存。</p><ul><li><p>　　数据库自身缓存<br>　　<strong>应用场景：数据库自带技能，用于高速查询，默认开启。</strong><br>　　业界常用的mysql、oracle等数据库的存储引擎自身都带有缓存特性，对查询条件固定、查询频繁的检索结果进行缓存。如mysql的一二级缓存机制和Oracle的高速缓存机制。</p></li><li><p>　　数据库中间件缓存<br>　　<strong>应用场景：数据库中间件自带技能，缓存查询结果。</strong><br>　　业界常用的mybatis、ibatis等数据库中间件自身也带有缓存功能，可以将数据库的查询结果保存到内存中，当相同条件的查询时，不需要再访问数据库。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网站性能优化第一定律：首选使用缓存优化性能。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-为什么要用缓存？&quot;&gt;&lt;a href=&quot;#1-为什么要用缓存？&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="大型网站" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99/"/>
    
      <category term="高性能" scheme="http://yoursite.com/tags/%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Web安全之ReDOS攻击</title>
    <link href="http://yoursite.com/2018/12/16/Web%E5%AE%89%E5%85%A8%E4%B9%8BReDOS%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/12/16/Web安全之ReDOS攻击/</id>
    <published>2018-12-16T10:31:55.491Z</published>
    <updated>2018-12-22T14:51:20.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>　　正则表达式（regular expression）又称为规则表达式，就是用一个“字符串”来描述一个特征，然后去检索、替换另一个符合这个特征“字符串”。</p><h2 id="正则表达式引擎分类"><a href="#正则表达式引擎分类" class="headerlink" title="正则表达式引擎分类"></a>正则表达式引擎分类</h2><p>　　正则表达式引擎分为两类：NFA和DFA。</p><ul><li>　　NFA：匹配过程面临很多的岔路，需要做出选择，一旦某条岔路失败，就需要回朔。类似于回溯法。执行复杂度最大为O（2^n)。</li><li>　　DFA：匹配过程是确定的，每个字母需要匹配一次。长度为n的正则表达式执行复杂度为O（2^n),长度为n的字符串，执行复杂度为O（n）</li></ul><p>　　构造DFA的代价远大于NFA，假设NFA的状态数为K，那么等价DFA的状态数目理论上可达2的k次方，不过实际上几乎不会出现这么极端的情况，可以肯定的是构造DFA会消耗更多的时间和内存。<br>　　但是DFA一旦构造好了之后，执行效率就非常理想，如果一个串的长度是n，那么匹配算法的执行复杂度是O(n);而NFA在匹配过程中，存在大量的分支和回朔，假设NFA的状态数为s，因为每输入一个字符可能达到的状态数做多为s，那么匹配算法的复杂度及时输入串的长度乘以状态数O(ns)。NFA所支持的高级特性比DFA要多，所以NFA常被使用。</p><h2 id="Redos攻击"><a href="#Redos攻击" class="headerlink" title="Redos攻击"></a>Redos攻击</h2><p>　　ReDoS(Regular expression Denial of Service) 正则表达式拒绝服务攻击。应用程序使用正则表达式对用户输入的数据进行有效性校验, 当正则表达式存在缺陷或者不严谨时, 攻击者可以通过构造特殊的字符串大量消耗服务器的系统资源，造成服务器的服务中断或停止。<br>　　不论是DFA还是NFA引擎，极端情况下执行复杂度可能达到O(2^n),这就会导致执行正则教研的线程执行缓慢并占用大量CPU资源，有时可能会将CPU耗尽。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>　　正则表达式<code>^(a+)+$</code>的回溯匹配算法：</p><p>　　<img src="https://i.imgur.com/qmd38sU.png" alt=""><br>　　对于aaaab，存在16种可能的路径（2^4），但是对于aaaaaaaaaaaaaaaab，则存在65536种可能的路径（2^16）。<br>　　通过<a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a> 网站进行测试：<br>　　1) 测试字符串aaaab<br>　　<img src="https://i.imgur.com/ohEtHJg.png" alt=""><br>　　<img src="https://i.imgur.com/OxYLQOE.png" alt=""><br>　　经过54步，耗时1ms。<br>　　2) 测试字符串aaaaab<br>　　<img src="https://i.imgur.com/BNvXae0.png" alt=""><br>　　经过103步，耗时1ms<br>　　3) 测试字符串aaaaaaaaaaaaaab<br>　　<img src="https://i.imgur.com/1GELwiZ.png" alt=""><br>　　经过49168步，耗时114ms。</p><h2 id="什么样的正则表达式易受攻击"><a href="#什么样的正则表达式易受攻击" class="headerlink" title="什么样的正则表达式易受攻击"></a>什么样的正则表达式易受攻击</h2><ol><li>重复分组</li><li>重复分组内存在:<ul><li>重复</li><li>交叉重叠</li></ul></li></ol><p>样例：</p><ul><li>(a+)+</li><li>([a-zA-Z]+)*</li><li>(a|aa)+</li><li>(a|a?)+</li><li>(.*a){x} | for x &gt; 10</li></ul><h2 id="哪些环节易受攻击"><a href="#哪些环节易受攻击" class="headerlink" title="哪些环节易受攻击"></a>哪些环节易受攻击</h2><p><img src="https://i.imgur.com/yoemEiG.png" alt=""><br>　　理论上网络系统的每一个环节都有正则表达式的存在，因此都有可能受到ReDos攻击。但实际上，黑客攻击自己的浏览器是没有意义的，因此除浏览器外使用正则表达式验证用户输入的其他设备上都应该经过准确的验证。</p><h2 id="如何测试"><a href="#如何测试" class="headerlink" title="如何测试"></a>如何测试</h2><p>　　使用微软测试工具<a href="https://pcwin.com/Utilities/Misc__Utilities/SDL_Regex_Fuzzer/download.htm" title="Downloading SDL Regex Fuzzer 1.1" target="_blank" rel="noopener">Microsoft SDL Regex Fuzzer</a>，测试<code>^(a+)+$</code>，测试结果是Failed。<a href="https://github.com/mudaoren/-/raw/master/RegexFuzzerSetup.zip" target="_blank" rel="noopener">点击下载。</a><br>　　<img src="https://i.imgur.com/cjuUvZH.png" alt=""></p><h2 id="如何防范"><a href="#如何防范" class="headerlink" title="如何防范"></a>如何防范</h2><p>　　Redos攻击很难完全消除，只能尽可能降低这种风险。常用的措施有：</p><ul><li>尽量明确不可信输入的字符串长度。</li><li>避免使用分组、重复等。</li><li>充分的测试。</li><li>完善的性能监控工具。</li></ul><p>参考资料：</p><blockquote><p>《精通正则表达式》<br>《编译原理龙书第二版》<br><a href="https://xz.aliyun.com/t/2723#toc-9" target="_blank" rel="noopener">https://xz.aliyun.com/t/2723#toc-9</a><br><a href="https://www.regular-expressions.info/catastrophic.html" target="_blank" rel="noopener">https://www.regular-expressions.info/catastrophic.html</a><br><a href="https://www.andseclab.com/2018/04/19/owasp%E6%B1%89%E5%8C%96%E6%94%BB%E5%87%BB%E7%B3%BB%E5%88%97%E5%A4%A7%E5%85%A8%E4%BA%94%E5%8D%81%E4%B8%80%EF%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">https://www.andseclab.com/2018/04/19/owasp%E6%B1%89%E5%8C%96%E6%94%BB%E5%87%BB%E7%B3%BB%E5%88%97%E5%A4%A7%E5%85%A8%E4%BA%94%E5%8D%81%E4%B8%80%EF%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/</a><br><a href="https://www.freebuf.com/articles/network/124422.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/124422.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;　　正则表达式（regular expression）又称为规则表达式，就是用一个“字符串”来描述一个特征，然后去检
      
    
    </summary>
    
      <category term="安全隐私" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E9%9A%90%E7%A7%81/"/>
    
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="ReDOS" scheme="http://yoursite.com/tags/ReDOS/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>教育培养</title>
    <link href="http://yoursite.com/2018/12/11/%E6%95%99%E8%82%B2%E5%9F%B9%E5%85%BB/"/>
    <id>http://yoursite.com/2018/12/11/教育培养/</id>
    <published>2018-12-10T23:32:19.848Z</published>
    <updated>2018-12-14T15:47:59.333Z</updated>
    
    <content type="html"><![CDATA[<p>　　最近思考孩子的教育培养，俗话讲“3岁看大，10岁看老”，孩子从小2-3岁开始就需要投入精力培养。<br>　　父母是对孩子一生影响最大的人，也是孩子教育的首要责任人。“子不教，父之过”，作为父母，首先要从自身做起，讲十遍不如做一遍，孩子的行为习惯大部分是从父母身上学来的。据我观察，孩子的言行、举止、姿态、表情、性格等与自己的父母神似，这是家庭行为的遗传，当然这个遗传是后天形成的。<br>　　对孩子的培养应该从哪几方面入手呢？通过阅读大量的教育、心理、管理学书籍和培训机构的课程内容，总结了最总要的四个方面。</p><h2 id="1-树立正确的三观"><a href="#1-树立正确的三观" class="headerlink" title="1.树立正确的三观"></a>1.树立正确的三观</h2><p>　　<strong>社会观、人生观、价值观，这三观是人一生的行为指导，会由内而外对人的一生产生影响</strong>。具有正确的三观，就有了做人做事的原则，有了自主性，不会随波逐流，遇到挫折和困难时不容易气馁，遇到人生辉煌时，不会骄傲。<br>　　什么才是正确的三观？<br>　　首先肯定不是钱和权。不可否认当前社会风气受部分舆论和事件的影响，拜金主义横行，动辄就3个亿的小目标，网红、贪官层出不穷，其实这恰是写反例，出现这些问题的原因就是没有正确的三观。曾遇到一个7岁的小女孩，别人夸她学习成绩好，结果她回了一句“学习成绩好有什么用，不如长得漂亮，以后嫁个好老公”，真的让人瞠目结舌。<br>　　中国传统上的正确三观在《论语》、《大学》等著作中都有涉及。《论语》一书中书提到“弟子入则孝，出则悌”、“敏于事而慎于言”、“人而无信，不知其可也。大车无輗，小车无軏，其何以行之哉？”、“礼之用，和为贵”。《大学》强调修身治国平家平天下，“生财有大道。生之者众，食之者寡，为之者疾，用之者舒，则财恒足矣。仁者以财发身，不仁者以身发财。未有上好仁而下不好义者也，未有好义其事不终者也，未有府库财非其财者也。”。这些都是古人对人生价值观的总结，也是中国传统上的价值观，总结一下就是<strong>做人要正直诚信、胸怀家国、济世助人</strong>。<br>　　西方的教育学、心理学著作中对于三观的认识往往最终都归于《圣经》中关于基督信仰的教义，<strong>以基督为中心的“爱人如己”、“感恩”、“宽容”、“忍耐”、“万事尽心”等</strong>。</p><h2 id="2-设定正确的人生目标和理想"><a href="#2-设定正确的人生目标和理想" class="headerlink" title="2.设定正确的人生目标和理想"></a>2.设定正确的人生目标和理想</h2><p>　　具有正确的人生目标和理想，就容易做决断、不会受短期得失的影响。《追梦赤子心》中有句经典台词“有梦想的人才会忍受现实的生活”，有梦想的人会积极向上、受挫力强。马云曾讲过“人是要有理想的，万一实现了呢”，其实有理想的人，即使失败了，在追逐理想的路上所收获的也比旁人要多。当前社会不少大学生，包括名牌大学的学生痴迷游戏、荒废学业或者整日无所事事，这样的学生基本是没有人生理想和目标的孩子，或者只是以考上大学为理想的孩子，进入大学后迷失了方向。<br>　　什么是正确的人生目标和理想呢？<br>　　这当然是因人而异，投身教育事业成为一名优秀的老师、研究基础数学成为有贡献的数学家、成为一名画家、投身一个产业做一名对社会有帮助的企业家等等都是正确的理想和目标。<br>　　孩子在3-6岁间兴趣爱好往往会不断的变化，父母要随着孩子的兴趣点做好引导，一般在7-12岁就会确立自己的人生目标。<br>　　人生目标一旦确立就要向着目标持续不断的努力。目标是可以调整的，但是如果频繁调整目标，那很难在一个领域持续积累取得成就。</p><h2 id="3-为人生目标制定实施计划"><a href="#3-为人生目标制定实施计划" class="headerlink" title="3.为人生目标制定实施计划"></a>3.为人生目标制定实施计划</h2><p>　　生于七八十年代的人，在孩童时代绝大部分都有被问到，你长大以后想做什么？那时的回答不外乎科学家、警察、医生、飞行员等等，但是长大后发现，很少有人实现自己的目标。原因有二，一是当时的目标定的很随意，自己对这个目标根本没有概念和正确的认知；二是缺乏实现目标的计划和路标。<br>　　有了目标以后需要制定实施的计划，有了计划才能落实。比如最近意外去世的著名华裔物理科学家张首晟，他在初中阶段就对物理特别痴迷，对探究物理世界充满着渴望，内心的目标是希望以后能进入物理研究的最高机构去探究未知的物理世界。所以在后期的学习上，他对物理学知识特别用心，通过进入大学，出国深造等方式最终师从杨振宁，进入物理学研究的最高机构，距自己的目标越来越近。<br>　　一个12岁的孩子很难独立制定出自己的计划和路标，这时候就需要父母的帮助。大部分父母可能并没有对应领域的经验，这时候如果有相关领域的朋友，可以向他们寻求帮助，父母先对这个领域有一定的认知。如果没有相关领域的朋友，那可以通过阅读该领域的名人传记，参加该领域的社会活动，参加相关讲座培训等方式。假如孩子喜欢画画，父母可以通过多带孩子参观一些画展、参观博物馆里的名人画作让孩子认识到真正的画作，通过阅读达芬奇等画家传记了解画家的成长经历，通过参加相应级别的书画大赛结识具有相同爱好的群体等方式逐渐使目标清晰。然后针对个人能力和年龄段制定对应的阶段性计划，比如考入知名艺术学院进修、师从当代的著名画家学习等。<br>　　计划是需要调整的，不同的人不同的阶段都会遇到不同的情况，需要根据情况及时调整。</p><h2 id="4-基于正确的三观，提供常规训练（情商、思维、技能）"><a href="#4-基于正确的三观，提供常规训练（情商、思维、技能）" class="headerlink" title="4.基于正确的三观，提供常规训练（情商、思维、技能）"></a>4.基于正确的三观，提供常规训练（情商、思维、技能）</h2><p>　　正确的三观是基础，人生目标是灯塔，还需要具备一定的常规技能才能逐步接近并实现目标。这当中最重要的当属情商、思维方式，其次才是技能知识。<br>　　<strong>情商。</strong>好的情商一定是建立在正确的三观之上的，一个人是钱本位的，很难有高的情商，短期内可能表现很好，但是当他的目的一旦达成或者长期相处，必定会暴露出本性，因为他的表现是利益驱动。可以说一个具有正确三观的人，情商也不会差。情商的培养和形成同样来源于父母，孩子从小到大一直受父母的言传身教，父母的一言一行就是孩子日后的行为模板。所以父母首先要清楚什么是高情商，高情商的人的行为反应是什么样子的，然后在孩子面前表演出来，甚至刻意设置一些场景去不断地训练孩子。所谓的遗传，不过就是家庭行为的遗传。<br>　　<strong>思维方式。</strong>思维方式是一个人遇到问题时的应对思路，人做事的能力差距就体现在思维方式。思维方式形成从3-6岁开始，中学阶段逐步成型，如果能进入大学，在大学阶段往往会有一次飞跃。但是优秀的思维并不是自己形成的，也需要学习和训练。优秀思维方式的来源于周边的人和自我学习。社会中有一个现象，一个企业或者政府部门的接班人基本来自负责人身边，比如秘书、顾问、助理等群体，因为这些人往往与领导者相处更多，学到了领导者的思维方式，可以站的高看得更远。想做什么样的事，就要用什么样的思维。如果没有这样的机会，就需要多都一些有关思维的经典著作。另外一个很有效的方面是数学，很多企业的高管在总结自己的人生经历时，不约而同的会提到数据对个人思维能力的重要作用，这里的数学指的是高等数学，这也是为什么大学阶段会是思维方式的一个飞跃阶段。这里给小学初中的孩子们推荐几本书《名人集》、《少年大学生的足迹》可以激发孩子们对科学的热情和奋斗的激情，数学家和教育家波利亚的《怎样解题》可以极大提升逻辑思维能力。孩子们多读一些理论性的书籍可以及早的提高思维层次。<br>　　<strong>技能。</strong>技能就是以后用来在社会上立足的工具。这个工具当然是跟人生的目标相关，也应该是跟兴趣相关。接着前面的例子，爱好是画画，人生的目标是成为一名优秀的画家，那么画功和对艺术的认知就是技能了。这里不得不提一个跨时代的名人——史蒂夫·乔布斯，乔布斯因为贫苦和兴趣问题大学并没有毕业，但是他爱好书法，常常去大学旁听这门课程，也正是这么课程激发了他的艺术细胞，在最初的Apple公司的微机上，他设计出漂亮的界面风格，再后来，Apple公司的所有产品都具有强烈的时尚感和艺术感，也因此受到高端消费者的青睐。<br>　　除了专业上的技能，再次不得不强调数学的重要性，对数学的学习能使人形成更高层次的逻辑思维能力。其次是语言文字能力，语言文字能力体现在写作和表达上，如果想成为一个有影响力的人，必须能用语言和文字正确的表达自己的思想。<br>　　性格决定命运，有人觉得很空洞，性格实际上是做事风格和习惯，决定命运的是习惯。勤奋、努力、吃苦耐劳、永不气馁是品格，也是一个人长期形成的行为习惯，好习惯能支撑人的一生，同样坏习惯也会影响人的一生。孩子在成长过程中，父母一定要对孩子的好习惯加以肯定和引导，避免坏习惯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　最近思考孩子的教育培养，俗话讲“3岁看大，10岁看老”，孩子从小2-3岁开始就需要投入精力培养。&lt;br&gt;　　父母是对孩子一生影响最大的人，也是孩子教育的首要责任人。“子不教，父之过”，作为父母，首先要从自身做起，讲十遍不如做一遍，孩子的行为习惯大部分是从父母身上学来的。
      
    
    </summary>
    
      <category term="教育" scheme="http://yoursite.com/categories/%E6%95%99%E8%82%B2/"/>
    
    
      <category term="教育" scheme="http://yoursite.com/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>分布式缓存策略</title>
    <link href="http://yoursite.com/2018/12/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/12/09/分布式缓存策略/</id>
    <published>2018-12-09T15:52:23.740Z</published>
    <updated>2018-12-16T12:43:18.074Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>互联网技术的发展遵循的一个基本原则：时间换空间或者空间换时间。</em></strong></p><p>　　缓存就是将数据存放在距离计算最快的地方，以加快处理速度。缓存也能有效隔离前端请求压力的传递，降低后端负载。然而事物都具有两面性，缓存层的加入往往会增加系统复杂性，增大系统维护的难度。因此是否设置缓存层往往需要权衡利弊，考虑缓存层会带来问题，如：</p><ul><li>更新策略</li><li>缓存粒度控制</li><li>缓存击穿</li><li>缓存雪崩</li><li>无底洞问题</li><li>热点数据优化</li></ul><h2 id="1-缓存的利与弊"><a href="#1-缓存的利与弊" class="headerlink" title="1. 缓存的利与弊"></a>1. 缓存的利与弊</h2><h3 id="1-1-利："><a href="#1-1-利：" class="headerlink" title="1.1 利："></a>1.1 利：</h3><ul><li>提高响应速度。缓存通常会更靠近需求端（CDN、反向代理）或者完全基于内存（redis、memcache）以加速读写性能，优化用户体验。</li><li>降低后端负载。比如在数据库Mysql、Oracle前设置一层本地缓存或者redis缓存，可以有效减少对数据库的压力。</li></ul><h3 id="1-2-弊"><a href="#1-2-弊" class="headerlink" title="1.2 弊"></a>1.2 弊</h3><ul><li>提高代码维护成本。增加缓存后，需要同时维护缓存与持久层的业务逻辑。</li><li>数据一致性弱化。仅能保证最终一致性，无法实现强一致性。</li><li>增加运维成本。增加了CDN、Memcache、redis等缓存中间件后不可避免的会增加系统复杂度。</li></ul><h2 id="2-缓存使用的前提与场景"><a href="#2-缓存使用的前提与场景" class="headerlink" title="2. 缓存使用的前提与场景"></a>2. 缓存使用的前提与场景</h2><h3 id="2-1-使用前提"><a href="#2-1-使用前提" class="headerlink" title="2.1 使用前提"></a>2.1 使用前提</h3><ul><li>数据访问不均衡，存在热点数据，热点数据可以存放在缓存中。</li><li>数据具有一定的有效时长，不会很快失效。</li></ul><h3 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a>2.2 使用场景</h3><ul><li>需要快速响应的场景：比如涉及到大量图片的访问时，因为图片占用带宽，往往会选用CDN。对数据访问速度有要求的场景可以选用redis等缓存中间件或者本地缓存。</li><li>并发高的场景。抢购、促销等活动时，往往瞬间请求量很大，为了降低后端压力，可以将库存等热点数据放到缓存中，降低流量对后端数据库的冲击。</li></ul><h2 id="3-更新策略"><a href="#3-更新策略" class="headerlink" title="3. 更新策略"></a>3. 更新策略</h2><p>　　缓存中的数据一般是由生效时间的，除非把具有持久化功能的缓存当做数据库使用。常用的缓存更新策略主要有几种，具体选用哪种策略，需要根据业务场景对一致性的要求进行选择。</p><h3 id="3-1-LRU-LFU-FIFO算法剔除。"><a href="#3-1-LRU-LFU-FIFO算法剔除。" class="headerlink" title="3.1 LRU/LFU/FIFO算法剔除。"></a>3.1 LRU/LFU/FIFO算法剔除。</h3><p>　　这些剔除算法执行自动更新策略，认为干预少，数据一致性差。</p><h3 id="3-2-超时剔除。"><a href="#3-2-超时剔除。" class="headerlink" title="3.2 超时剔除。"></a>3.2 超时剔除。</h3><p>　　缓存中的数据都设置一个过期时间，使用缓存中的数据时，每次都判断数据是否过期，如果过期，重新从数据源获取。如果数据源数据被更改而缓存数据未过期，此时会存在不一致的问题。</p><h3 id="3-3-主动更新。"><a href="#3-3-主动更新。" class="headerlink" title="3.3 主动更新。"></a>3.3 主动更新。</h3><p>　　数据源的数据被改动时，主动推送到缓存来更新数据。这种方式数据一致性会非常好。为了保证可靠性，这种方式往往也会设置过期时间，如果过期后未被更新，则需要主动从数据源获取。</p><h2 id="4-缓存粒度控制"><a href="#4-缓存粒度控制" class="headerlink" title="4.缓存粒度控制"></a>4.缓存粒度控制</h2><p>　　缓存粒度就是在做缓存层时，需要考虑缓存的数据范围。缓存全部数据？缓存部分数据的部分字段？一般缓存层是用来缓存热点数据。<br>　　为何要考虑缓存粒度？因为做缓存的过程是会占用空间和时间的，缓存数据量大时，会占用大量内存，缓存更新的过程也会更频繁，缓存过程更耗时。而如果仅仅缓存部分数据的部分字段，如果数据字段有变动，代码就需要及时更新。因此要根据具体使用情况来确定粒度。<br>　　在实践中商城的购物车往往对数据的准确性并不敏感，此时可选用具有持久化功能的全缓存数据库替代mysql等数据源。</p><h2 id="5-缓存穿透"><a href="#5-缓存穿透" class="headerlink" title="5.缓存穿透"></a>5.缓存穿透</h2><p>　　缓存穿透是指查询一个根本不存在的数据（一般为非热点数据），在缓存层和数据持久层都不会被命中。这种请求的特点是每次都会经过缓存层再到数据源，这会导致流量直接冲击到后端数据源。<br>　　如果出现大量的缓存穿透也会造成很大的问题，比如数据源并发量过大响应超时、宕机等。<br>　　如何避免？</p><h3 id="5-1-将空对象缓存。"><a href="#5-1-将空对象缓存。" class="headerlink" title="5.1 将空对象缓存。"></a>5.1 将空对象缓存。</h3><p>　　将空对象做缓存会将请求隔离到缓存层，避免对后端的冲击，但是如果缓存失效前，存储层数据被添加，此时会存在数据不一致的问题。建议超时时间设置短一点。</p><h3 id="5-2-布隆过滤器"><a href="#5-2-布隆过滤器" class="headerlink" title="5.2 布隆过滤器"></a>5.2 布隆过滤器</h3><p>　　将持久层拥有的数据的逐渐集合存设置到缓存中，如果在缓存中获取数据失败，则先查询缓存中的主键集合，如果集合中不存在该数据主键，则不需要再到持久层查询数据。这种方式代码会比较复杂。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Bloom_filter" title="布隆过滤器相关知识" target="_blank" rel="noopener">布隆过滤器相关知识</a><br><a href="https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter" target="_blank" rel="noopener">布隆过滤器开源代码</a></p></blockquote><h2 id="6-无底洞问题"><a href="#6-无底洞问题" class="headerlink" title="6. 无底洞问题"></a>6. 无底洞问题</h2><p>　　分布式缓存架构中，当缓存数据过多时，被划分成多个缓存节点。当缓存节点达到一定的数量时，如果继续增加节点可能会导致一次业务需要请求多个节点的缓存数据（典型的如批量数据操作），反而导致性能降低。也就是节点多，不一定性能好。<br>　　出现这个现象的原因是键值数据一般会采用哈希函数将key置于不同的节点上，这种哈希分配与业务无关，当一个业务需要批量操作数据时，可能要跨多个节点，这就涉及到多个网络操作，造成耗时增多。<br>　　如何避免无底洞问题？当数据量庞大时，必然会造成节点数增多，这种情况无法避免，但是可以采取措施，降低无底洞问题造成的影响。</p><ul><li>并行操作。在批量处理数据时采用多线程并行，虽然网络访问次数未改变，但总耗时降低。</li><li>分业务存放数据。使用缓存中间件的现有功能，比如redis的hashtag功能，将业务相关的数据放到一个节点下。但是这种方法会造成业务数据分布不均，另外数据分布与业务强相关会造成维护成本提高。</li></ul><h2 id="7-缓存雪崩"><a href="#7-缓存雪崩" class="headerlink" title="7. 缓存雪崩"></a>7. 缓存雪崩</h2><p>　　缓存层宕掉后，流量会集中涌向后端存储层，导致存储层调用量暴增。如何避免出现缓存雪崩？</p><ul><li>提高缓存层可用性。比如主从缓存架构，灾备部署等，redis的Sentinel和Cluster功能等。</li><li>缓存降级或者隔离。当缓存层出现故障时，做降级处理或者对不同的重要数据做好依赖隔离，避免一种数据出现问题影响到整个存储层。常用的降级和依赖隔离工具Hystrix。</li></ul><h2 id="8-热点数据更新策略"><a href="#8-热点数据更新策略" class="headerlink" title="8. 热点数据更新策略"></a>8. 热点数据更新策略</h2><p>　　一般缓存都会设置过期时间，当某一条热点数据失效瞬间，可能会有大量请求来访问，造成否段瞬间负载过大。比如微博系统，宝强事件、小璐事件、丽颖结婚官宣等都造成了微博的瞬间不可用，除此之外还有电商网站的抢购活动，比如淘宝双十一、小米抢购等都可能出现这种问题。<br>　　系统该如何避免这种情况的出现呢？</p><ul><li>重建线程互斥。当热点数据失效时，只允许一个请求线程去后端存储层获取数据，其他线程等待（设定等待超时时间）或直接返回（一般会采用后者），避免所有请求都到后端</li><li>过期前主动更新。这种方式可以完全避免数据失效对后端带来的冲击，实现简单，但处理不好可能会出现线程间的调度问题。</li><li>永不过期的缓存数据。设立单独的线程，主动检查过期数据，在数据过期前主动进行刷新。这种方式并不能完全避免热点数据失效，因为在刷新线程执行前恰好一条数据出现失效且恰好属于热点数据，这就会出现问题，并且这种方法也会增加维护工作量。</li></ul><p>　　除此之外，缓存数据还有一些优秀实践，比如数据预热、不用数据过期时间不同。</p><ul><li>数据预热。为防止数据失效，电商抢购等活动开始前可以提前对缓存系统进行预热，通过自动化手段提前发起可控的大量业务请求，刷新缓存中的数据。</li><li>设置不同的过期时间。将缓存数据的过期时间打散，避免集中失效时大量请求同时访问后端存储层。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;互联网技术的发展遵循的一个基本原则：时间换空间或者空间换时间。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　缓存就是将数据存放在距离计算最快的地方，以加快处理速度。缓存也能有效隔离前端请求压力的传递，降低后端负载。然而事物都具有两面性，缓存层的加入
      
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="缓存，分布式，高性能" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98%EF%BC%8C%E5%88%86%E5%B8%83%E5%BC%8F%EF%BC%8C%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Spring的profile实现多国、多环境打包</title>
    <link href="http://yoursite.com/2018/12/08/Spring%E7%9A%84profile%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%9B%BD%E3%80%81%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2018/12/08/Spring的profile实现多国、多环境打包/</id>
    <published>2018-12-08T10:28:41.275Z</published>
    <updated>2018-12-08T10:28:32.341Z</updated>
    
    <content type="html"><![CDATA[<p>全球电商平台因为涉及到用户数据，因此需要在不同地区的机房或者不同区域的公有云上部署。另外还有开发环境、测试环境的区别。都存在不同的配置问题。</p><p>解决方法有两种：<br>1）不同的环境打不同的安装包。<br>2）不同的环境打相同的安装包，但不同的环境所加载的配置不同。</p><p>这两种方式我们都有使用过，因为需要支撑全球，如果按照第一种方式，同一个版本需要打十几个包，造成安装包泛滥，后期容器化后又要出不同的镜像。后来改用第二种方式，所有国家和环境使用同一个安装包，不同的国家激活不同的profile，激活方式使用系统环境变量的方法，同时将配置文件提取出来使用配置中心管理，安装包归一化。</p><p>Spring profile的配置方式可参考<br><a href="https://www.baeldung.com/spring-profiles" target="_blank" rel="noopener">https://www.baeldung.com/spring-profiles</a><br><a href="https://www.cnblogs.com/strugglion/p/7091021.html" target="_blank" rel="noopener">https://www.cnblogs.com/strugglion/p/7091021.html</a><br><a href="http://websystique.com/spring/spring-profile-example/" target="_blank" rel="noopener">http://websystique.com/spring/spring-profile-example/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全球电商平台因为涉及到用户数据，因此需要在不同地区的机房或者不同区域的公有云上部署。另外还有开发环境、测试环境的区别。都存在不同的配置问题。&lt;/p&gt;
&lt;p&gt;解决方法有两种：&lt;br&gt;1）不同的环境打不同的安装包。&lt;br&gt;2）不同的环境打相同的安装包，但不同的环境所加载的配置不
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="profile" scheme="http://yoursite.com/tags/profile/"/>
    
  </entry>
  
  <entry>
    <title>Web.xml中配置spring配置文件</title>
    <link href="http://yoursite.com/2018/12/08/web.xml%E4%B8%AD%E9%85%8D%E7%BD%AEspring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/12/08/web.xml中配置spring配置文件/</id>
    <published>2018-12-08T08:33:33.170Z</published>
    <updated>2018-12-08T09:41:50.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-web-xml的上下文参数配置方法"><a href="#1-web-xml的上下文参数配置方法" class="headerlink" title="1. web.xml的上下文参数配置方法"></a>1. web.xml的上下文参数配置方法</h2><p>web.xml介绍请参见<a href="https://mudaoren.github.io/2018/10/30/Tomcat%E7%9A%84web%E9%85%8D%E7%BD%AE/" title="Tomcat的web.xml配置" target="_blank" rel="noopener">Tomcat的web.xml配置</a>。</p><pre><code>&lt;context-param&gt;  &lt;param-name&gt;webmaster&lt;/param-name&gt;  &lt;param-value&gt;myaddress@mycompany.com&lt;/param-value&gt;  &lt;description&gt;    The EMAIL address of the administrator to whom questions    and comments about this application should be addressed.  &lt;/description&gt;&lt;/context-param&gt;</code></pre><p>web.xml中直接配置的上下文变量，可以被本webapp中的所有jsp和servlet调用。代码中可以通过如下代码获取</p><pre><code>String value = getServletContext().getInitParameter(&quot;webmaster&quot;);</code></pre><h2 id="2-Spring上下文配置文件在web-xml中的配置方法"><a href="#2-Spring上下文配置文件在web-xml中的配置方法" class="headerlink" title="2. Spring上下文配置文件在web.xml中的配置方法"></a>2. Spring上下文配置文件在web.xml中的配置方法</h2><p>Tomcat中集成Spring服务，也可以通过web.xml配置完成spring配置文件的加载，即Spring上下文的加载。</p><p>首先，需要在web.xml中配置Spring的上下文监听器。当webapp被加载时，将启动Spring的监听器。</p><pre><code>&lt;listener&gt;   &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  &lt;/listener&gt;</code></pre><p>Spring上下文加载监听器启动时会读取contextConfigLocation来获取配置文件。<br>1）当web.xml中没有配置contextConfigLocation时，将默认加载<code>/WEB-INF/applicationContext.xml</code>。<br>2）如果web.xml中配置了上下文参数contextConfigLocation，则会加载这个参数指定路径下的文件。在web.xml中可以通过如下配置：</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath*:**/spring-*.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><h2 id="3-Spring的contextConfigLocation参数不同配置方式说明"><a href="#3-Spring的contextConfigLocation参数不同配置方式说明" class="headerlink" title="3. Spring的contextConfigLocation参数不同配置方式说明"></a>3. Spring的contextConfigLocation参数不同配置方式说明</h2><p>contextConfigLocation在web.xml中可以通过指定具体的路径或者class目录下的路径如<code>classpath:</code>和<code>classpath*:</code>两种配置方式，这两种配置方式是指定配置文件的位置信息。配置文件的名称可以使用功能通配符。</p><ul><li>classpath：到webapp的class路径中查找找文件。</li><li>classpath*：到webapp的class路径及jar文件中(class路径)进行查找。</li></ul><h3 id="3-1-指定具体的文件名"><a href="#3-1-指定具体的文件名" class="headerlink" title="3.1 指定具体的文件名"></a>3.1 指定具体的文件名</h3><p>1) 指定目录下的具体文件。</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;WEB-INF/applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><p>2）class路径下的具体文件</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:spring-base.xml,classpath:spring-datasource.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><p>3）指定目录下文件及jar中的配置文件，在哪里找到都可以。</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath*:spring-base.xml,classpath:spring-datasource.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><h3 id="3-2-使用通配符"><a href="#3-2-使用通配符" class="headerlink" title="3.2 使用通配符"></a>3.2 使用通配符</h3><p>1）class路径下以spring-或者spring-datasource-开头的xml类型的配置文件<br>    <context-param><br>        <param-name>contextConfigLocation</param-name><br>        <param-value>classpath:spring-<em>.xml,classpath:spring-datasource-</em>.xml</param-value><br>    </context-param></p><p>2）class路径及所有子路径下以spring-或者spring-datasource-开头的xml类型的配置文件<br>    <context-param><br>        <param-name>contextConfigLocation</param-name><br>        <param-value>classpath:*<em>spring-</em>.xml,classpath:spring-datasource-*.xml</param-value><br>    </context-param></p><p>3）class路径下以spring-或者spring-datasource-开头的xml类型的配置文件。<strong>注意，使用通配符时，无法匹配jar中的配置文件了</strong>，如果需要匹配，只能指定具体的文件名。</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath*:spring-*.xml,classpath:spring-datasource-*.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><p><strong>最佳实践：</strong></p><ul><li>如果配置内容比较多，建议分不同的配置文件存放。</li><li>配置文件较多时，建议统一目录存放。</li><li>如果多个配置文件分属不同的功能模块，可以划分配置子目录存放。</li><li>如果需要加载的配置文件较多时，建议在web.xml中统一加载为spring-context.xml，将需要加载的配置文件使用Spring配置文件的import方法集中到spring-context.xml中加载。</li></ul><p>spring监听器ContextLoaderListener初始化过程可参见<a href="https://blog.csdn.net/datoubangzhu/article/details/78856235。" target="_blank" rel="noopener">https://blog.csdn.net/datoubangzhu/article/details/78856235。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-web-xml的上下文参数配置方法&quot;&gt;&lt;a href=&quot;#1-web-xml的上下文参数配置方法&quot; class=&quot;headerlink&quot; title=&quot;1. web.xml的上下文参数配置方法&quot;&gt;&lt;/a&gt;1. web.xml的上下文参数配置方法&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="http://yoursite.com/tags/tomcat/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Linux挂载命令mount用法</title>
    <link href="http://yoursite.com/2018/12/06/Linux%E6%8C%82%E8%BD%BD%E5%91%BD%E4%BB%A4mount%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/06/Linux挂载命令mount用法/</id>
    <published>2018-12-06T14:28:57.009Z</published>
    <updated>2018-12-06T14:28:46.424Z</updated>
    
    <content type="html"><![CDATA[<p>　　mount命令用于挂载文件系统到指定的加载点，他可以挂在ext3/vfat/nfs等文件系统。此命令的最常用于挂载cdrom，使我们可以访问cdrom中的数据，因为你将光盘插入cdrom中，Linux并不会自动挂载，必须使用Linux mount命令来手动完成挂载。此外可以挂载其他设备上的共享目录到指定的加载点。本文后者的使用。</p><h2 id="1-挂接命令-mount"><a href="#1-挂接命令-mount" class="headerlink" title="1.挂接命令(mount)"></a>1.挂接命令(mount)</h2><ul><li><strong>语法</strong></li></ul><pre><code>mount [-t vfstype] [-o options] device dir</code></pre><ol><li><p>-t vfstype 指定文件系统的类型，一般不需要指定，mount 会自动选择正确的类型。</p><blockquote><p>可挂载的文件类型包括：<br>光盘或光盘镜像：iso9660<br>DOS fat16文件系统：msdos<br>Windows 9x fat32文件系统：vfat<br>Windows NT ntfs文件系统：ntfs<br>Mount Windows文件网络共享：smbfs<br>UNIX(LINUX) 文件网络共享：nfs</p></blockquote></li><li><p>-o options 用来描述设备或档案的挂接方式。</p><blockquote><p>loop：用来把一个文件当成硬盘分区挂接上系统<br>ro：采用只读方式挂接设备<br>rw：采用读写方式挂接设备<br>iocharset：指定访问文件系统所用字符集</p></blockquote></li><li><p>device 要挂接(mount)的设备，共享目录的服务端。</p></li><li>dir 设备在本系统上的挂接点(mount point)。</li></ol><h2 id="2-挂载Windows共享目录"><a href="#2-挂载Windows共享目录" class="headerlink" title="2.挂载Windows共享目录"></a>2.挂载Windows共享目录</h2><p>Linux挂载Windows的共享目录，必须安装samba软件。Windows网络共享核心必须是SMB/CIFS。<br>先将Windows的目录设置为共享（假设ip为10.192.168.32，共享目录为F:/），再在Linux上挂载该Windows共享目录。</p><h3 id="2-1-建立本地挂载点-mount-point"><a href="#2-1-建立本地挂载点-mount-point" class="headerlink" title="2.1 建立本地挂载点(mount point)"></a>2.1 建立本地挂载点(mount point)</h3><pre><code># mkdir –p /mnt/share</code></pre><h3 id="2-2-执行挂载操作，将Windows的共享目录F，挂载到Linux的-mnt-share目录-如此就可以在linux系统上通过-mnt-share来访问windows系统磁盘上的文件了。"><a href="#2-2-执行挂载操作，将Windows的共享目录F，挂载到Linux的-mnt-share目录-如此就可以在linux系统上通过-mnt-share来访问windows系统磁盘上的文件了。" class="headerlink" title="2.2 执行挂载操作，将Windows的共享目录F，挂载到Linux的/mnt/share目录,如此就可以在linux系统上通过/mnt/share来访问windows系统磁盘上的文件了。"></a>2.2 执行挂载操作，将Windows的共享目录F，挂载到Linux的/mnt/share目录,如此就可以在linux系统上通过/mnt/share来访问windows系统磁盘上的文件了。</h3><pre><code># mount -t smbfs -o username=admin,password=123 //10.192.168.32/F$ /mnt/share</code></pre><blockquote><p>说明：<br>admin 和 123 是ip地址为10.192.168.32的windows计算机的一个用户名和密码，F$是这台计算机的一个磁盘共享。</p></blockquote><h2 id="3-挂载UNIX系统NFS文件共享"><a href="#3-挂载UNIX系统NFS文件共享" class="headerlink" title="3.挂载UNIX系统NFS文件共享"></a>3.挂载UNIX系统NFS文件共享</h2><p>Linux(UNIX)系统也有自己的网络共享，那就是NFS(网络文件系统)，下面我们就以SUN Solaris2.8和REDHAT as server 3 为例介绍在linux下如何mount nfs网络共享。<br>在linux客户端挂接(mount)NFS磁盘共享之前，必须先配置好NFS服务端。</p><h3 id="3-1-服务端配置（被挂载者）"><a href="#3-1-服务端配置（被挂载者）" class="headerlink" title="3.1 服务端配置（被挂载者）"></a>3.1 服务端配置（被挂载者）</h3><ul><li><strong>Solaris系统NFS服务端配置方法</strong></li></ul><p>1.修改/etc/dfs/dfstab, 增加共享目录</p><pre><code># share -F nfs -o rw /export/home/sunky</code></pre><p>2.启动nfs服务</p><pre><code># /etc/init.d/nfs.server start</code></pre><p>3.NFS服务启动以后，也可以使用下面的命令增加新的共享</p><pre><code># share /export/home/sunky1 # share /export/home/sunky2</code></pre><blockquote><p>说明：<br>注：/export/home/sunky和/export/home/sunky1是准备共享的目录</p></blockquote><ul><li><strong>linux系统NFS服务端配置方法</strong></li></ul><p>1.修改/etc/exports,增加共享目录</p><pre><code>/export/home/sharedir1 192.168.0.12(rw) /export/home/sharedir2 *(rw) /export/home/sharedir3 linux-client(rw)</code></pre><blockquote><p>说明：</p><ul><li>/export/home/sharedir1、sharedir2、sharedir3是准备共享的目录，而有权限挂载这些目录的客户端可以用IP、主机名、正则表达式等方式指定。如192.168.0.12、*、</li><li>linux-client是被允许挂接此共享linux客户机的IP地址或主机名。<br>如果使用主机名指定挂载的客户端，需要在/etc/hosts中配置客户端的Ip映射：192.168.0.12 linux-client</li><li>(rw)是挂载者对本共享目录所拥有的权限。</li></ul></blockquote><p>2.启动与停止NFS服务</p><pre><code>/etc/rc.d/init.d/portmap start (在REDHAT中PORTMAP是默认启动的) /etc/rc.d/init.d/nfs start 启动NFS服务 /etc/rc.d/init.d/nfs stop 停止NFS服务</code></pre><blockquote><p>说明：<br>修改/etc/export文件增加新的共享目录时，需要先停止NFS服务，再启动NFS服务才能使新增加的共享起作用。也可以使用命令exportfs -rv达到同样的效果。</p></blockquote><h3 id="3-2-客户端（挂载者）"><a href="#3-2-客户端（挂载者）" class="headerlink" title="3.2 客户端（挂载者）"></a>3.2 客户端（挂载者）</h3><h3 id="3-2-1-建立本地挂载点-mount-point"><a href="#3-2-1-建立本地挂载点-mount-point" class="headerlink" title="3.2.1 建立本地挂载点(mount point)"></a>3.2.1 建立本地挂载点(mount point)</h3><pre><code># mkdir –p /mnt/share</code></pre><h3 id="3-2-2执行挂载操作-将主机IP为192-168-5-88的NFS服务端共享目录-export-home-sharedir1挂载到客户端的-mnt-share目录。"><a href="#3-2-2执行挂载操作-将主机IP为192-168-5-88的NFS服务端共享目录-export-home-sharedir1挂载到客户端的-mnt-share目录。" class="headerlink" title="3.2.2执行挂载操作,将主机IP为192.168.5.88的NFS服务端共享目录/export/home/sharedir1挂载到客户端的/mnt/share目录。"></a>3.2.2执行挂载操作,将主机IP为192.168.5.88的NFS服务端共享目录/export/home/sharedir1挂载到客户端的/mnt/share目录。</h3><pre><code>#mount -t nfs -o rw 192.168.5.88:/export/home/sharedir1 /mnt/share</code></pre><p>现在你可以在客户端的/mnt/share目录下操作文件和目录了，而这些文件和目录实际上是在192.168.5.88上的/export/home/sharedir1这个目录中。</p><h2 id="4-解除挂载"><a href="#4-解除挂载" class="headerlink" title="4.解除挂载"></a>4.解除挂载</h2><p>不再使用挂载目录时不能直接删除，因为那样删除的是被挂载的服务端的目录内容。首先应该先解除挂载。</p><pre><code>umount /mnt/share</code></pre><blockquote><p>说明：<br>/mnt/share是挂载点（mount point）</p></blockquote><p>参考</p><blockquote><p>《鸟哥的Linux私房菜》<br><a href="http://man.linuxde.net/mount" target="_blank" rel="noopener">http://man.linuxde.net/mount</a><br><a href="https://www.linuxprobe.com/mount-detail-parameters.html" target="_blank" rel="noopener">https://www.linuxprobe.com/mount-detail-parameters.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　mount命令用于挂载文件系统到指定的加载点，他可以挂在ext3/vfat/nfs等文件系统。此命令的最常用于挂载cdrom，使我们可以访问cdrom中的数据，因为你将光盘插入cdrom中，Linux并不会自动挂载，必须使用Linux mount命令来手动完成挂载。此外
      
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="mount" scheme="http://yoursite.com/tags/mount/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境变量设置</title>
    <link href="http://yoursite.com/2018/12/06/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/12/06/Linux环境变量设置/</id>
    <published>2018-12-05T16:00:06.077Z</published>
    <updated>2018-12-05T15:59:49.194Z</updated>
    
    <content type="html"><![CDATA[<p>　　操作系统一般都是支持多用户多任务，在操作系统中可以为不同的用户设置不同的环境变量（用户环境变量），也可以为所有用户设置统一的环境变量（系统环境变量）。Linux和windows系统均是如此。</p><h2 id="1-Linux下的环境变量"><a href="#1-Linux下的环境变量" class="headerlink" title="1.Linux下的环境变量"></a>1.Linux下的环境变量</h2><p>Linux的环境变量存在于多个文件中，主要有以下几个文件：</p><ul><li>系统环境变量文件/etc/profile和/etc/environment。</li><li>用户环境变量文件~/.bash_profile、~/.bash_login和~/.profile。bash的login shell设定只会读取上面三个文件的其中一个， 而读取得顺序则是依照上面的顺序。</li></ul><h3 id="1-1-etc-profile-login-shell时读取）"><a href="#1-1-etc-profile-login-shell时读取）" class="headerlink" title="1.1 /etc/profile(login shell时读取）"></a>1.1 /etc/profile(login shell时读取）</h3><p>用户登录时才会读取的文件，是操作系统获取环境变量时第一个读取的文件。<br>这个文件会主动引用其他的文件/etc/profile.d 、/etc/profile.d/*.sh和/etc/bash.bashrc。因此虽然login时读取文件/etc/profile，实际上获取到的环境变量不止在/etc/profile中。</p><h3 id="1-2-etc-environment"><a href="#1-2-etc-environment" class="headerlink" title="1.2 /etc/environment"></a>1.2 /etc/environment</h3><p>用户在登录操作系统之后，操作系统配置环境时所使用的第二个文件。<br>顾名思义，该文件中保存了一系列环境变量，这些变量将对所有的用户和终端起效。</p><p>到这一级为止，文件定义的都是系统环境变量，之后的文件都是在定义用户变量。</p><h3 id="1-3-bash-profile-login-shell-才会读"><a href="#1-3-bash-profile-login-shell-才会读" class="headerlink" title="1.3 ~/.bash_profile (login shell 才会读)"></a>1.3 ~/.bash_profile (login shell 才会读)</h3><p>~/.bash_profile、~/.bash_login和~/.profile。bash的login shell设定只会读取上面三个文件的其中一个， 而读取得顺序则是依照上面的顺序。<br>在我使用的Ubuntu操作系统中，实际存在的是~/.profile。我们看一下文件的内容：</p><p><img src="https://i.imgur.com/f85RcMn.png" alt=""></p><p>if…then中又判断了第二个文件~/.bashrc是否存在，如果存在就会引用。<br>最后一行，以累加的方式对/etc/profile中设置过的path增加了~/bin等目录作为额外的执行文件存放目录。用户可以将自己建立的执行文件放到这个目录下（不需要再使用绝对路径或者相对路径执行了）。</p><h3 id="1-4-bashrc"><a href="#1-4-bashrc" class="headerlink" title="1.4 ~/.bashrc"></a>1.4 ~/.bashrc</h3><p>该文件包含了专用于一个用户的bash的环境信息，每次登录或者新开shell的时候（包括在图形界面下打开新的终端），该文件被读取。<br>该文件只会在新开的终端中起效。原有终端不会受到影响。</p><h3 id="1-5-bash-logout"><a href="#1-5-bash-logout" class="headerlink" title="1.5 ~/.bash_logout"></a>1.5 ~/.bash_logout</h3><p>每次退出bash的时候会执行。</p><h3 id="1-6-小结"><a href="#1-6-小结" class="headerlink" title="1.6 小结"></a>1.6 小结</h3><p><strong>login shell的读取顺序：</strong></p><p><img src="https://i.imgur.com/KiUjqJQ.png" alt=""></p><p>实线是主流程，虚线是被动应用的配置文件。</p><h2 id="2-环境变量的查看方法及相关命令"><a href="#2-环境变量的查看方法及相关命令" class="headerlink" title="2.环境变量的查看方法及相关命令"></a>2.环境变量的查看方法及相关命令</h2><ul><li>env查看当前用户的环境变量与常用变量</li><li>set查看shell所有变量（环境变量和用户自定义变量）</li><li>export若不带参数则显示用户变量的shell变量，若带参数，则将该shell参数添加至用户变量。如果在命令行直接使用这个参数设置变量（如export HELLO=”hello”），则变量只对当前shell（BASH）有效（临时的），重新登录后会失效。</li><li>source读入环境配置文件的指令。因为/etc/profile和~/.bash_profile在login是才会被读取，因此如果用户修改了这两个文件中的变量后，只能在重新登录后才会生效。此时可以使用source或者小数点加空格将新设置的环境变量读取到shell中。</li><li>echo $变量名，查看具体的变量设置。</li></ul><h2 id="3-常见的环境变量"><a href="#3-常见的环境变量" class="headerlink" title="3.常见的环境变量"></a>3.常见的环境变量</h2><ul><li>PATH：决定了shell将在哪些目录中寻找命令和程序</li><li>HOME：当前用户的主目录</li><li>MAIL：当前用户的邮件存放目录</li><li>SHELL：当前用户用的是那种Shell</li><li>HISTSIZE：保存历史命令记录的条数</li><li>LOGNAME：当前用户的登录名</li><li>HOSTNAME：主机的名称。</li><li>LANG/LANGUGE：和语言相关的环境变量，使用多种语言的用户可以修改此环境变量</li><li>PS1：基本提示符，对于root是#，对于普通用户为$，在我手中的ubuntu10.10中则是一个字符串，显示了用户名、系统名和当前目录名在内的信息。</li><li>PS2：是附属提示符，默认是”&gt;”。可以修改此环境变量来修改当前的命令符。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　操作系统一般都是支持多用户多任务，在操作系统中可以为不同的用户设置不同的环境变量（用户环境变量），也可以为所有用户设置统一的环境变量（系统环境变量）。Linux和windows系统均是如此。&lt;/p&gt;
&lt;h2 id=&quot;1-Linux下的环境变量&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="环境变量" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>开源License</title>
    <link href="http://yoursite.com/2018/11/24/%E5%BC%80%E6%BA%90License/"/>
    <id>http://yoursite.com/2018/11/24/开源License/</id>
    <published>2018-11-24T15:40:01.089Z</published>
    <updated>2018-11-24T15:24:32.921Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/vFspvAv.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vFspvAv.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="License" scheme="http://yoursite.com/categories/License/"/>
    
    
      <category term="开源" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="License" scheme="http://yoursite.com/tags/License/"/>
    
  </entry>
  
  <entry>
    <title>江南白衣的java后端书架【转】</title>
    <link href="http://yoursite.com/2018/11/18/%E6%B1%9F%E5%8D%97%E7%99%BD%E8%A1%A3%E7%9A%84java%E5%90%8E%E7%AB%AF%E4%B9%A6%E6%9E%B6%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>http://yoursite.com/2018/11/18/江南白衣的java后端书架【转】/</id>
    <published>2018-11-18T11:57:26.290Z</published>
    <updated>2018-11-16T14:13:09.420Z</updated>
    
    <content type="html"><![CDATA[<p><span style="line-height: 1.6;font-size: 15px;">见书单如面。&nbsp;</span></p><p><span style="line-height: 1.6;font-size: 15px;"><br></span></p><p><span style="font-size: 15px;line-height: 1.6;">在这份书单里，我是这么一个同学：关心Java，关心架构，对文字有一定的洁癖；基础知识懂一些，但忙，不会花太多时间来研究算法和OS；需要掌握一个软件时会买一本XX in Action，但不买那种各式安装指南、使用手册的。<br></span></p><p><br></p><p><span style="font-size: 15px;">如果你和我差不多的趣味，那这份书单会适合你。</span></p><p><br></p><p><span style="font-size: 15px;">为了避免混淆，书名的颜色分类，红色是种草， 黑色是拔草（至少不适合本文的预设读者）</span></p><p><br></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;font-size: 1.4em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">1. 国内一线的书</h3><p><span style="font-size: 15px;">说到大型互联网站的建设，我们在世界上也是一流的，比国外那些咨询师写的更深味其中艰辛。</span></p><p><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);">《高可用架构(第一卷)》</span></p><p><span style="font-size: 15px;">厚厚的一本，新浪微博TimYang牵头的高可用架构社区，几十个一线实战案例的结集分享，从头看起的话只恨自己时间不够多。</span></p><p><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">《大型网站： 架构演进与性能优化》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;font-size: 15px;">薄薄的一本</span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">，<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">今年新书，</span></span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;font-size: 15px;">淘宝的分布式、无线化、中台化、单元化的历程与优化，同样是满满的一线经验。</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;color: rgb(172, 30, 6);font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">《大型网站技术架构：核心原理与案例分析》</span></p><p><span style="font-size: 15px;">同是淘宝系薄书，如果一个新人进入到大型互联网站，这是最好的入门科书普。</span></p><p><br></p><p></p><p><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">《亿级流量网站架构核心技术》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">京东开涛作品，很多技术掰细了讲，所以也蛮厚的。</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">《京东基础架构建设之路》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="line-height: 25.6px;">从早前的.Net，到如今大量自研组件的体系，可以给兄弟单位的基础架构部做参考。</span></p><p style="line-height: 25.6px;white-space: normal;"><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">《进化 - 运维技术变革与实践探索》<br></span></p><p style="line-height: 25.6px;white-space: normal;margin-top: 10px;"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 1.6;">赵成的极客时间，印成书了。<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">运维书里难得讲想法而不是工具使用的书：&nbsp;</span>“运维能力是整体技术架构能力的体现，运维层面爆发的故障一定是整体技术架构中存在问题，割裂两者，单纯的看技术架构或运维都是毫无意义的。”&nbsp;</span></p><p style="line-height: 25.6px;white-space: normal;margin-top: 10px;"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 1.6;"></span></p><p><br></p><p><span style="font-size: 15px;"><strong>极客时间：</strong></span></p><p><span style="font-size: 15px;">极客时间是一种新的知识交付模式。为了保持书单的利益无关中立性，就不放二维码了，大家自个上&nbsp;<span style="color: rgb(61, 170, 214);"><a href="https://time.geekbang.org/" target="_blank" rel="noopener">https://time.geekbang.org/</a>&nbsp;</span></span></p><p><br></p><p><span style="font-size: 15px;"><span style="font-size: 15px;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;background-color: rgb(255, 255, 255);">《左耳听风》</span>，左耳朵耗子把自己脑子里的东西一股脑地倒了出来，唯一缺点是贵。</span></p><p><span style="font-size: 15px;"><span style="font-size: 15px;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;background-color: rgb(255, 255, 255);">《从零开始学架构》</span><span style="font-size: 15px;">，互联网架构的基础知识，用来培养新人或者自己查漏补缺。</span></span></p><p><span style="font-size: 15px;"><br></span></p>p&gt;<span style="font-size: 15px;"><strong>拔草：</strong>有些书名字蛮吸引，但翻开目录都是各种软件的安装和使用指南。</span><p></p><p><br></p><p><br></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;font-size: 1.4em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">2. 国外互联网架构的书</h3><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;margin-top: 5px;"><span style="color: rgb(172, 30, 6);">《SRE：Google运维解密》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;margin-top: 5px;"><span style="font-size: 15.73px;background-color: rgb(255, 255, 255);">自编广告词：“地球上有这么一个团队，将运维推向极限高度”。SRE的事情，很多是基础架构部的事情。今年的续篇，</span><span style="font-size: 15.73px;color: rgb(171, 25, 66);background-color: rgb(255, 255, 255);">《The Site Reliablity Workbook》</span><span style="font-size: 15.73px;background-color: rgb(255, 255, 255);">。</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;margin-top: 5px;"><span style="font-size: 15.73px;background-color: rgb(255, 255, 255);"></span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;margin-top: 5px;"><span style="font-size: 15.73px;background-color: rgb(255, 255, 255);"><br></span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;margin-top: 10px;"><span style="color: rgb(172, 30, 6);">《发布！软件的设计与部署 》</span><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;margin-top: 10px;">Nygard作品，关于高可靠性的软件，学校里不会教，出来社会却要面对的那部分。 英文原标题里，“软件”的完整表达是“Production-Ready Software<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">”</span></p><p style="line-height: 25.6px;white-space: normal;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;color: rgb(172, 30, 6);font-size: 15.73px;line-height: 25.168px;">《DevOps 软件架构师行动指南》</span></p><p style="margin-top: 5px;line-height: 25.6px;white-space: normal;"><span style="font-size: 15px;">DevOps的书里难得地讲基本原则，而不是讲具体用什么监控软件。</span></p><p style="margin-top: 5px;line-height: 25.6px;white-space: normal;"><span style="font-size: 15px;"><br></span></p><p style="margin-top: 5px;line-height: 25.6px;white-space: normal;"></p><p style="margin-top: 5px;line-height: 25.6px;white-space: normal;"><br></p><p style="line-height: 25.6px;white-space: normal;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);">《微服务设计》</span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">&nbsp;</span><br></p><p style="margin-top: 5px;line-height: 25.6px;white-space: normal;"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">微服务开山之作，那么多微服务的书，这本只谈原则而不会写一堆具体框架的使用。</span></p><p style="margin-top: 5px;line-height: 25.6px;white-space: normal;"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;"><br></span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">《生产微服务》</span></p><p style="margin-top: 5px;"><span style="font-size: 15px;">再次被中文编辑的书名打败，其实是《Production-Ready Microservices》，作者以在Uber的经验，讲一个满足基本业务逻辑之外，生产可用的微服务的检查表。</span><br><br></p><p></p><p><br></p><p><br></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15px;background-color: rgb(255, 255, 255);"><strong style="line-height: 25.6px;white-space: normal;">附加</strong></span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><strong style="line-height: 25.6px;white-space: normal;"> ：</strong><span style="line-height: 25.6px;">有两本英文标题明明是</span></span>Scalability<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.6px;background-color: rgb(255, 255, 255);">的书，中文编辑硬是改为《架构即未来》，《架构真经》，前者有我们前CTO推荐不敢乱说，后者虽然是第二版还是觉得有点过时，大家自己看目录判断了。</span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><br></span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><br></span></p><p><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 22.4px;line-height: 35.84px;background-color: rgb(255, 255, 255);">3. 架构师基础的书</span></p><p style="margin-top: 5px;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);background-color: rgb(255, 255, 255);">《恰如其分的软件架构 - 风险驱动的设计方法》</span></p><p style="margin-top: 5px;"><span style="font-size: 15px;">由于人类与生俱来的惰性，计算机原本科学的、精准的设计方式，有了敏捷的借口之后就很难再维持了。本书就是在这种背景下，提出由风险来决定设计的度。除了开始的风险驱动部分，其余部分就是规规矩矩标标准准的架构师教科书。</span></p><p><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 22.4px;line-height: 35.84px;background-color: rgb(255, 255, 255);"><br></span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);">《软件系统架构：使用视点和视角与利益相关者合作 第2版》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">也是教科书，最难得的是，这本老书在十年后的2011年年升级了第二版，所以感觉鲜活了好多，也许是最鲜活的一本架构书。</p><p><br></p><p><strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">附</span></strong><span style="font-size: 15px;"><strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;background-color: rgb(255, 255, 255);">加</span></strong></span><strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">：<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;"></span></span></strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">说起更新，《</span><span style="color: rgb(68, 68, 68);font-family: 'Amazon Ember', Arial, sans-serif;font-size: 17px;line-height: 1.255;background-color: rgb(255, 255, 255);">Software Architecture in Practice&nbsp;3rd</span><span style="color: rgb(68, 68, 68);font-size: 15.73px;line-height: 1.6;">》也在2012年更新，《</span></span><span style="font-size: 17px;line-height: 1.255;">Documenting Software Architectures 2nd</span><span style="line-height: 1.6;">》在2010年更新，不过中规中矩，没那么大吸引力让人去啃英文了。</span></p><p><br></p><p><span style="font-size: 15px;"><strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;background-color: rgb(255, 255, 255);">拔草</span></strong></span><strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">：</span></strong><span style="font-size: 15px;">关于设计模式，我以前曾经有过很多本，GOF23啦，企业应用架构模式啦，EIP啦， POSA 5卷本啦，反模式啦，JavaEE/SOA/Restful的模式啦。但现在觉得对新人来说，一本Java写的《Head First 设计模式》，知道什么叫设计模式就够了。</span></p><p><span style="font-size: 15px;"><br></span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;font-size: 15px;background-color: rgb(255, 255, 255);">UML相关的书，其实UML只在那个重度文档的年代会体现统一的作用，现在大家都是怎么表达清楚怎么来，最多简单用下类图和时序图了。</span></p><p><br></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;font-size: 1.4em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">4. Java语言的书</h3><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);font-size: 15.73px;line-height: 1.6;">《Java8 实战》</span><br></p><p><span style="font-size: 15.73px;background-color: rgb(255, 255, 255);">Java8的新特性讲得最全最仔细的，Java8是一道坎，很多程序员现在还没迈过去。英文版有重写了，面向<span style="font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">JDK9的</span></span><span style="color: rgb(171, 25, 66);">《<span style="font-size: 16px;line-height: 1.6;">Modern Java in Action</span><span style="line-height: 1.6;">》</span></span><span style="line-height: 1.6;">。</span></p><p><span style="color: rgb(171, 25, 66);line-height: 1.6;"><br></span></p><p><span style="line-height: 1.6;"></span></p><p><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);">《Java性能权威指南》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">紫色的这本，比起多年前那部调优圣经，讲得更加深入，也更加贴近现在的JDK。英文版还有一本<span style="color: rgb(171, 25, 66);">《Optimizing Java》</span>。</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);">《深入理解 Java 虚拟机 第2版》</span><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">理解虚拟机并不是那么难，Java程序员来说，很多知识其实是必须的。</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);">《Java并发编程实战》</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">Java并发经典，人手一本不用多说了。</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="color: rgb(172, 30, 6);">《实战Java高并发程序设计》</span>&nbsp;</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">国人之作，流畅易读，内容也比上面一本新一些。</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;"><span style="color:#ac1e06;font-family:微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="font-size: 15.73px;">《Effective Java 2nd》</span><span style="font-size: 15.73px;line-height: 25.168px;"><br></span></span><span style="color: rgb(68, 68, 68);font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size: 15px;">Java编码规范与指南， 英文版有覆盖JDK9的第三版。</span></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;"><span style="color: rgb(68, 68, 68);font-size: 15px;">私家推荐，结合了它和</span><span style="color: rgb(172, 30, 6);font-size: 15.73px;line-height: 25.168px;">《Java编码指南：</span><span style="color: rgb(172, 30, 6);line-height: 25.168px;font-size: 14px;">编写安全可靠程序的75条建议</span><span style="font-size: 15px;"><span style="color: rgb(172, 30, 6);font-size: 15.73px;line-height: 25.168px;">》</span><span style="font-size: 15.73px;line-height: 25.168px;">、</span></span><span style="font-size: 15.73px;line-height: 1.6;color: rgb(171, 25, 66);">《阿里巴巴Java开发手册》</span><span style="color: rgb(68, 68, 68);font-size: 15px;">的</span><span style="color: rgb(172, 30, 6);font-size: 15.73px;line-height: 1.6;">《唯品会Java开发手册》</span><span style="color: rgb(61, 170, 214);font-size: 15px;">(<a href="https://vipshop.github.io/vjtools/" target="_blank" rel="noopener">https://vipshop.github.io/vjtools/</a>)</span></p><p>&nbsp;&nbsp;</p><p><strong>极客时间：</strong>&nbsp;</p><p><span style="font-size: 15px;"><span style="font-size: 15px;color: rgb(172, 30, 6);">《Java核心技术36讲》</span>是Oracle 做Java平台部门的杨晓峰的专栏，Java里很多关键点都讲到了。<br><br></span></p><p><span style="font-size: 15px;color: rgb(172, 30, 6);">《深入拆解Java虚拟机》</span><span style="font-size: 15px;">是Oracle里做新一代Graal编译器的高级研究员郑雨迪对JVM的深入讲解，能坚持看完的同学平时都可以装一副很懂的样子了。</span></p><p><span style="font-size: 15px;"><br></span></p><p><span style="font-size: 15px;"><br></span></p><p><strong><span style="font-size: 15px;">补充：</span></strong><span style="font-size: 15px;">&nbsp;<span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">培训新人最好找</span><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;font-size: 15px;color: rgb(171, 25, 66);">《Java核心技术》</span><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">。最新是第10版，但按JDK近来的升级速度，这书都快追不上了。&nbsp;</span></span></p><p><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;"><br></span></p><p><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">要一口吃成个胖子，推荐飒然的</span><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;font-size: 15px;color: rgb(171, 25, 66);">《Java工程师修炼之道》</span><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">，可以作为老鸟培养新人，整个Java后端开发的提纲式材料。</span></p><p><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;"><br></span></p><p><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;font-size: 15px;color: rgb(171, 25, 66);">《Java 9模块化开发》</span><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">，跳票无数回之后，Java9终于支持模块化了，对这方面关心对可以看看。</span></p><p><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;"><br></span></p><p><span style="font-size: 15px;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;color: rgb(171, 25, 66);">《响应式编程 — RxJava 高阶指南》</span>，掘金小册，连介绍里的几篇基础文章，是响应式编程不错的入门。&nbsp;</span><span style="font-size: 15px;color: rgb(0, 122, 170);"><a href="https://juejin.im/book/5a09997cf265da432002bf6a" target="_blank" rel="noopener">https://juejin.im/book/5a09997cf265da432002bf6a</a></span></p><p><br></p><p><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;background-color: rgb(255, 255, 255);"><strong><br></strong></span></p><p><span style="font-size: 15px;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;"><span style="background-color: rgb(255, 255, 255);"><strong>拔草</strong></span>：《Thinking in Java》有点太旧了，而且作者思路随意，译者语言晦涩</span><span style="font-size: 15px;"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">。</span><span style="line-height: 1.6;">《Java性能优化权威指南&nbsp;》多年前的调优圣经已经旧的没谱。</span></span></p><p><br></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"></span></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 1.4em;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">5. 操作系统与网络的书</h3><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《Linux内核设计与实现 第3版》</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">业内缩写LKD。Robert Love用最薄的篇幅，顺畅的文字将Linux内核主要的算法讲清楚了，《深入理解Linux内核》之类厚厚的全是代码，不是专门的内核程序员看这本足够了。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《性能之巅》</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">Brendan Gregg的书，火焰图的推广者，在Netflix专攻性能。<span style="color: rgb(17, 17, 17);font-family: Helvetica, Arial, sans-serif;font-size: 13px;line-height: 21.06px;background-color: rgb(255, 255, 255);">&nbsp;</span>操作系统的性能调优、监控、工具和方法论，看这本就够了，已经足够厚，可能是书单里最厚的一本，但值得作为一本枕头书。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《WireShark网络分析就这么简单》</span>和&nbsp;<span style="color: rgb(172, 30, 6);">《WireShark网络分析的艺术》</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">多少人，是看了这两本轻松又实战的书，才真正理解TCP的细节。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);">《深入理解计算机系统 第3版》</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">如果实在觉得家里没本书镇楼心里不踏实，就买这一本，也是<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">左耳朵耗子</span>力荐的一本。</p><p><br></p><p><strong><span style="font-size: 15px;">极客时间：</span></strong></p><p><span style="font-size: 15px;">很有现代感，互联网站涉及的内容，那些经典教科书里都没有的。</span>&lt;/p</p><p><br></p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="font-size: 15px;"><strong><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;line-height: 25.168px;">附加：</span></strong></span><span style="color: rgb(172, 30, 6);"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;"></span>《现代操作系统 第3版》</span>如果看LKD未尽兴，可以回头看看这本基础概念，感觉没《操作系统概念》(恐龙书)那么<span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">枯燥</span>。</p><p style="margin-bottom: 1em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;"><span style="font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);">《TCP/IP详解 卷1:协议 第2版》&nbsp;</span><span style="font-size: 15.73px;line-height: 25.168px;">这么多年过去了，TCP的书好像还是只有英年早逝的作者的这一本。后人写的第二版也出来，厚了很多。</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="font-size: 15px;"><strong>拔草：</strong></span>《UNIX环境高级编程》和《UNIX网络编程》，缩写为APUE和UNP，不写C的同学其实没啥用。<span style="font-size: 15.73px;line-height: 1.6;">《Unix 编程艺术》，扯的都是闲篇，厚厚的一本略读一下就行。&nbsp;</span></p><p><span style="font-size: 15px;">另外，那些日本韩国人写的《图解XXX》都不喜欢。</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><br></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 1.4em;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">6. 算法的书</h3><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《数据结构与算法分析-Java语言描述 第3版》</span><br>够薄，数据结构与算法分析的点基本都涵盖了，而且示例代码是Java写的，新出了第3版。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《算法 第4版》</span><br>可与上一本对比着读，厚一些，也多些图，但知识点没上面的全，也是Java的。</p><p><span style="border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;"></span></p><p><br></p><p><span style="font-size: 15px;"><strong>附加：</strong>&nbsp;<span style="color: rgb(172, 30, 6);">《数学之美》</span>、<span style="color: rgb(172, 30, 6);">《编程珠玑》</span>，都是专栏文章，讲得并不系统，可以当兴趣读物来看。</span></p><p style="margin-top: 5px;"><span style="font-size: 15px;line-height: 1.6;"><strong style="line-height: 25.6px;">拔草：</strong>无比枯燥很多公式的《算法导论》，《计算机程序设计艺术》就留给特别厉害的同学去读了。</span><br></p><p><br></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"></span></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 1.4em;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">7. 程序员的自我修养</h3><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《程序员修炼之道-从小工到专家》</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">Pragmatic Programmer–注重实效的程序员系列的开山之作。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="color: rgb(172, 30, 6);">《代码整洁之道》</span>和&nbsp;<span style="color: rgb(172, 30, 6);">《程序员的职业素养》</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">Robert.C Martin作品，英文名是很相近的《Clean Code》和 《Clean Coder》，应该接替《代码大全2》成为必看系列，因为后者太厚了，而且也有不少过时的东西。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;">还有一本英文版的《Clean Architecture》，不过讲的是单体应用自身的架构。</p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"></p><p style="line-height: 25.6px;white-space: normal;"><span style="color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">《有效的单元测试》</span></p><p style="line-height: 25.6px;white-space: normal;margin-top: 10px;"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15px;line-height: 24px;">讲代码可读性的书很多，专门教测试代码怎么写得可读的少，而事实上我们很多时间都在维护测试代码，所以推荐下。</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><strong></strong></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="font-size: 15px;"><strong><br></strong></span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="font-size: 15px;"><strong>拔草：</strong></span><span style="font-size: 15.73px;line-height: 25.168px;">《重构》很厚，但最有价值就是前面几章的洗脑篇。</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><span style="font-size: 15px;">温伯格的书网上很推崇，<span style="text-decoration: none;">《成为技术领导者》</span>之类的，但我觉得年代太远，读起来其实没多大意思，一两个鸡汤观点还要自己从书里慢慢淘，有那功夫不如看点别的。</span></p><p style="margin-bottom: 1em;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;font-size: 15.73px;vertical-align: baseline;color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;white-space: normal;"><br></p><h3 style="margin-top: 0.5em;margin-bottom: 0.5em;font-size: 1.4em;white-space: normal;border-width: 0px;border-style: initial;border-color: initial;outline: 0px;vertical-align: baseline;color: rgb(172, 30, 6);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;">8. 团队的书</h3><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">敏捷的书高度重复，看哪本都差不多，比如最开始那本</span><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);">《解析极限编程–拥抱变化》</span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">就行，但没得卖了。</span></span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);"><br></span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);">其他如</span><span style="line-height: 25.168px;font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;color: rgb(171, 25, 66);background-color: rgb(255, 255, 255);">《硝烟中的Scrum 和 XP》</span><span style="line-height: 25.168px;font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);">，</span><span style="line-height: 25.168px;font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;color: rgb(171, 25, 66);background-color: rgb(255, 255, 255);">《学习敏捷》</span><span style="line-height: 25.168px;font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);">，</span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;color: rgb(172, 30, 6);">《敏捷开发的艺术》</span><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;">都不错。</span></span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;line-height: 25.168px;background-color: rgb(255, 255, 255);"><br></span></p><p><br></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><br></span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);">阻止大家买书的原因，一是没有地方放，二是没有时间看。好在Kindle上的书渐渐多了，解决了第一个问题。但第二个问题更难，所以我也没看完所有，但起码翻到了可以下判断的时候。</span></p><p><span style="color: rgb(68, 68, 68);font-family: 微软雅黑, Ubuntu, Arial, Helvetica, sans-serif;font-size: 15.73px;background-color: rgb(255, 255, 255);"><br></span></p><p>江南白衣的java后端书架<br><a href="https://mp.weixin.qq.com/s/-TJ8SW8gs5PIqUwKLCUfSg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-TJ8SW8gs5PIqUwKLCUfSg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;span style=&quot;line-height: 1.6;font-size: 15px;&quot;&gt;见书单如面。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 1.6;font-size: 15px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="书单" scheme="http://yoursite.com/categories/%E4%B9%A6%E5%8D%95/"/>
    
    
      <category term="书单" scheme="http://yoursite.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>存款准备金</title>
    <link href="http://yoursite.com/2018/11/18/%E5%AD%98%E6%AC%BE%E5%87%86%E5%A4%87%E9%87%91/"/>
    <id>http://yoursite.com/2018/11/18/存款准备金/</id>
    <published>2018-11-18T11:50:02.311Z</published>
    <updated>2018-11-18T11:49:45.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="存款准备金"><a href="#存款准备金" class="headerlink" title="存款准备金"></a>存款准备金</h2></blockquote><p>金融机构为保证客户提取存款和资金清算需要而准备的，在中央银行的存款。初始意义在于保证商业银行的支付和清算。</p><blockquote><h2 id="存款准备金率"><a href="#存款准备金率" class="headerlink" title="存款准备金率"></a>存款准备金率</h2></blockquote><p>中央银行要求的存款准备金占其存款总额的比例就是存款准备金率。</p><blockquote><h2 id="货币乘数"><a href="#货币乘数" class="headerlink" title="货币乘数"></a>货币乘数</h2></blockquote><p>一单位准备金所产生的货币量。</p><blockquote><h2 id="乘数效应"><a href="#乘数效应" class="headerlink" title="乘数效应"></a>乘数效应</h2></blockquote><p>中央银行的初始货币提供量与社会货币最终形成量之间存在着数倍扩张（或收缩）的效果。</p><p><strong>举例</strong><br>　　先假设最低准备金率是20%，也就是说当银行得到100元的存款时它必须留存20元，只能贷出80元。其次假设银行会放足80元。<br>　　现在有某君A往银行里存了100元，银行再将其中的80元放贷给B，如果B把贷来的80元又全部存入银行，银行再将其中的64原贷给了C，C又把64元存入银行，银行再向D贷出51.2元…依此类推，央行最先向市场投放了100元，市场上最后多的货币会是100+80+64+51.2+…</p><p>　　解这个数列的值是500，其实就是100*（1/0.2）=500</p><p>　　也就是实际的货币投放量。这里的1/0.2就是货币乘数也就是1除以法定准备金率。</p><p><strong>完整的货币（政策）乘数的计算公式是</strong>：m =（Rc+1）/(Rd+Re+Rc)。其中Rd、Re、Rc分别代表法定准备率、超额准备率和现金在存款中的比率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;存款准备金&quot;&gt;&lt;a href=&quot;#存款准备金&quot; class=&quot;headerlink&quot; title=&quot;存款准备金&quot;&gt;&lt;/a&gt;存款准备金&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;金融机构为保证客户提取存款和资金清算需要而准备的，在中央银行的
      
    
    </summary>
    
      <category term="互联网金融" scheme="http://yoursite.com/categories/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D/"/>
    
    
      <category term="金融" scheme="http://yoursite.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="存款准备金" scheme="http://yoursite.com/tags/%E5%AD%98%E6%AC%BE%E5%87%86%E5%A4%87%E9%87%91/"/>
    
      <category term="乘数效应" scheme="http://yoursite.com/tags/%E4%B9%98%E6%95%B0%E6%95%88%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>其实它懂得比你想象的多</title>
    <link href="http://yoursite.com/2018/11/17/%E5%85%B6%E5%AE%9E%E5%AE%83%E6%87%82%E5%BE%97%E6%AF%94%E4%BD%A0%E6%83%B3%E8%B1%A1%E7%9A%84%E5%A4%9A/"/>
    <id>http://yoursite.com/2018/11/17/其实它懂得比你想象的多/</id>
    <published>2018-11-17T11:58:15.536Z</published>
    <updated>2018-11-17T11:57:48.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2></blockquote><p>　　一天，儿子在玩扭扭车。</p><p>　　妹妹兴冲冲的走过来，儿子老远就看到了，眼神中充满敌意。<br>　　妹妹还没走到跟前，儿子就迎上推了一把，把妹妹推到了。<br>　　可能是还小的缘故，妹妹并没有哭，很快爬起来了。</p><p>　　过了一会，儿子拿起妹妹的杯子准备喝水。<br>　　舅妈一把夺过了杯子，严肃的说“不要用我们的杯子喝水”。<br>　　儿子怔怔得站在那里，可怜巴巴的说“舅妈，我不打妹妹了”。</p><blockquote><h2 id="重新认识"><a href="#重新认识" class="headerlink" title="重新认识"></a>重新认识</h2></blockquote><p>　　这个时候儿子只有28个月。他讲的话，没人教过他。也没人给他暗示，舅妈不让他用妹妹的杯子是因为他推了妹妹。<br>　　一个28个月的孩子能通过舅妈的行为和表情中判断并联想出这件事情发生的原因，并主动做出和解的反应，这很让我惊讶。</p><blockquote><h2 id="改变教育方式"><a href="#改变教育方式" class="headerlink" title="改变教育方式"></a>改变教育方式</h2></blockquote><p>　　以上的情景，让我意识到，孩子的思维发育远远超出我原本的预期。所以，在教育孩子时，可以试着用成人的思考方式来处理。</p><blockquote><h2 id="发生上面的情景该如何处理？"><a href="#发生上面的情景该如何处理？" class="headerlink" title="发生上面的情景该如何处理？"></a>发生上面的情景该如何处理？</h2></blockquote><p>　　首先需要同理心，思考下孩子为何会做出这样的反应？ 重要的一点，不只需要自己思考，还需要直接从孩子那里得到答案。（不要直接告诉孩子如何做，让他自己去思考）</p><p>　　问孩子：为什么打妹妹呢？<br>　　答：妹妹会打我，抢我的玩具，我不喜欢妹妹。（妹妹只有15个月，处于感官发育期，经常用手拍人或者物）<br>　　问：哦，是因为妹妹经常拍你，抢你玩具你才会推她是吗？<br>　　答：是的。<br>　　问：妹妹是怎么打你得呢：<br>　　答：她这样打我。（做出手拍的样子）<br>　　问：妹妹这样拍你很疼吧？<br>　　答：是的。<br>　　告诉孩子：我知道了，妹妹经常这样拍你，拍得你很疼。其实啊，妹妹这是喜欢你，想跟你玩，她还不会控制摸你得力量，所以啊，她摸你得时候用的力气太大。（仅这样还不够，即使他知道了原因，他也不想挨打啊。因为孩子太小了，他怕被打怕玩具被抢，只会提前预防，除此之外他不知道该怎么应对。只能直接告诉他如何应对。）以后妹妹要拍你得时候，你就告诉妹妹，轻轻的啊，不能打我，不然我就打你喽。（因为妹妹太小，其实这样还是很难阻止事情的发生的，父母得好好盯着）<br>　　答：恩。<br>　　告诉孩子第二件事：妹妹一定是觉得你得玩具很好玩，她也想玩玩，我们跟她一起玩，她的玩具我们也一起玩，这样怎么样？<br>　　<strong>（上面的这两件事在平时要不断的重复告诉他）</strong><br>　　答：好的，我跟她一起玩。<br>　　<br>除此之外，平时需要必不可少的训练。在家里模拟妹妹拍他、抢玩具的情景，教他如何应变，不断的训练。（孩子的任何经历都可以在家里训练它的应变能力）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;情景&quot;&gt;&lt;a href=&quot;#情景&quot; class=&quot;headerlink&quot; title=&quot;情景&quot;&gt;&lt;/a&gt;情景&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;　　一天，儿子在玩扭扭车。&lt;/p&gt;
&lt;p&gt;　　妹妹兴冲冲的走过来，儿子老远就看到了，眼
      
    
    </summary>
    
      <category term="教育" scheme="http://yoursite.com/categories/%E6%95%99%E8%82%B2/"/>
    
    
      <category term="教育" scheme="http://yoursite.com/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>上海证交所云计算解决方案</title>
    <link href="http://yoursite.com/2018/11/17/%E4%B8%8A%E6%B5%B7%E8%AF%81%E4%BA%A4%E6%89%80%E4%BA%91%E8%AE%A1%E7%AE%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/11/17/上海证交所云计算解决方案/</id>
    <published>2018-11-17T07:30:07.254Z</published>
    <updated>2018-11-17T07:27:53.986Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PdkURUS.png" alt=""></p><p><img src="https://i.imgur.com/Eutdqgc.png" alt=""></p><p><img src="https://i.imgur.com/XhDO5lk.png" alt=""></p><p><img src="https://i.imgur.com/vo6so0f.png" alt=""></p><p><img src="https://i.imgur.com/zunKjNl.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PdkURUS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Eutdqgc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.i
      
    
    </summary>
    
      <category term="互联网金融" scheme="http://yoursite.com/categories/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D/"/>
    
    
      <category term="金融" scheme="http://yoursite.com/tags/%E9%87%91%E8%9E%8D/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="合规体系" scheme="http://yoursite.com/tags/%E5%90%88%E8%A7%84%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>精益看板</title>
    <link href="http://yoursite.com/2018/11/17/%E7%B2%BE%E7%9B%8A%E7%9C%8B%E6%9D%BF/"/>
    <id>http://yoursite.com/2018/11/17/精益看板/</id>
    <published>2018-11-17T01:05:52.502Z</published>
    <updated>2018-11-17T15:09:54.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="精益看板在软件方面的八大实践"><a href="#精益看板在软件方面的八大实践" class="headerlink" title="精益看板在软件方面的八大实践"></a>精益看板在软件方面的八大实践</h2><blockquote><h3 id="建立看板"><a href="#建立看板" class="headerlink" title="建立看板"></a>建立看板</h3></blockquote><ol><li>价值流映射：对研发整体流程进行价值流映射，分析典型业务流效率。</li><li>分析请求分配产能：对不同工作项类型，分析价值流请求量并分配产能（划分泳道）。</li><li>显式化流转规则：显式化每个活动上下游流转规则及时发现问题，质量可控。</li><li>限制在制品：限制并行任务数，让任务流动更快，缩短开发周期。</li></ol><blockquote><h3 id="运作看板"><a href="#运作看板" class="headerlink" title="运作看板"></a>运作看板</h3></blockquote><ol><li>消除瓶颈：通过提升瓶颈处的处理能力，从而提升项目的吞吐量。</li><li>加速流动：通过监控流动中的异常状态，及时处理等待和阻塞，加速流动提升吞吐量。</li><li>改进价值流：通过数据驱动的回顾消除浪费，持续不断的改进价值流，提升吞吐量。</li><li>拉动式开发：通过拉动机制平衡开发资源和请求，保证价值持续稳定的流动。</li></ol><hr><h2 id="精益看板开源及收费软件"><a href="#精益看板开源及收费软件" class="headerlink" title="精益看板开源及收费软件"></a>精益看板开源及收费软件</h2><blockquote><p><a href="https://business901.com/blog1/lean-kanban-lessons-from-a-software-developer/" target="_blank" rel="noopener">https://business901.com/blog1/lean-kanban-lessons-from-a-software-developer/</a><br><a href="https://www.leangoo.com/" target="_blank" rel="noopener">https://www.leangoo.com/</a><br><a href="https://www.agilealliance.org/what-is-scrumban/" target="_blank" rel="noopener">https://www.agilealliance.org/what-is-scrumban/</a><br><a href="https://www.teambition.com/agile?utm_source=sitesolution&amp;utm_term=agile+development&amp;utm_campaign=template" target="_blank" rel="noopener">https://www.teambition.com/agile?utm_source=sitesolution&amp;utm_term=agile+development&amp;utm_campaign=template</a><br><a href="https://kanbantool.com/product" target="_blank" rel="noopener">https://kanbantool.com/product</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;精益看板在软件方面的八大实践&quot;&gt;&lt;a href=&quot;#精益看板在软件方面的八大实践&quot; class=&quot;headerlink&quot; title=&quot;精益看板在软件方面的八大实践&quot;&gt;&lt;/a&gt;精益看板在软件方面的八大实践&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;建立看板
      
    
    </summary>
    
      <category term="敏捷" scheme="http://yoursite.com/categories/%E6%95%8F%E6%8D%B7/"/>
    
    
      <category term="精益看板" scheme="http://yoursite.com/tags/%E7%B2%BE%E7%9B%8A%E7%9C%8B%E6%9D%BF/"/>
    
      <category term="敏捷" scheme="http://yoursite.com/tags/%E6%95%8F%E6%8D%B7/"/>
    
      <category term="scrum" scheme="http://yoursite.com/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title>六顶思考帽</title>
    <link href="http://yoursite.com/2018/11/16/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD/"/>
    <id>http://yoursite.com/2018/11/16/六顶思考帽/</id>
    <published>2018-11-16T15:51:24.174Z</published>
    <updated>2018-11-18T11:56:28.172Z</updated>
    
    <content type="html"><![CDATA[<p><strong>部分内容</strong></p><p><img src="https://i.imgur.com/lvjbOm0.png" alt=""></p><p><img src="https://i.imgur.com/eDi0uJo.png" alt=""></p><p><img src="https://i.imgur.com/s5gpOc5.png" alt=""></p><p><img src="https://i.imgur.com/7BxQzhj.png" alt=""></p><div class="row">    <embed src="/images/六顶思考帽.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;部分内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lvjbOm0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eDi0uJo.png&quot; alt=&quot;&quot;&gt;
      
    
    </summary>
    
      <category term="思维方法" scheme="http://yoursite.com/categories/%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="思考方法" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
