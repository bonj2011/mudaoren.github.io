<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木道人</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-16T16:13:14.028Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>木道人</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>六顶思考帽</title>
    <link href="http://yoursite.com/2018/11/16/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD/"/>
    <id>http://yoursite.com/2018/11/16/六顶思考帽/</id>
    <published>2018-11-16T15:51:24.174Z</published>
    <updated>2018-11-16T16:13:14.028Z</updated>
    
    <content type="html"><![CDATA[<p><strong>部分内容</strong></p><p><img src="https://i.imgur.com/lvjbOm0.png" alt=""></p><p><img src="https://i.imgur.com/eDi0uJo.png" alt=""></p><p><img src="https://i.imgur.com/s5gpOc5.png" alt=""></p><p><img src="https://i.imgur.com/7BxQzhj.png" alt=""></p><div class="row">    <embed src="/images/六顶思考帽.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;部分内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lvjbOm0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eDi0uJo.png&quot; alt=&quot;&quot;&gt;
      
    
    </summary>
    
      <category term="思维方法" scheme="http://yoursite.com/categories/%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="思维，思考方法" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%EF%BC%8C%E6%80%9D%E8%80%83%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何修改用户的SHELL参数</title>
    <link href="http://yoursite.com/2018/11/11/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E7%9A%84SHELL%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2018/11/11/如何修改用户的SHELL参数/</id>
    <published>2018-11-11T09:30:22.106Z</published>
    <updated>2018-11-11T09:29:57.816Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.查看可用shell</strong><br>cat /etc/shells</p><p><strong>2.假设指定test用户的shell为可用的/bin/sh</strong><br>chsh -s /bin/sh test</p><p><strong>3.在用户下查看 env即可查看到当前shell</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1.查看可用shell&lt;/strong&gt;&lt;br&gt;cat /etc/shells&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.假设指定test用户的shell为可用的/bin/sh&lt;/strong&gt;&lt;br&gt;chsh -s /bin/sh test&lt;/p&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>取模与取余的区别</title>
    <link href="http://yoursite.com/2018/11/11/%E5%8F%96%E6%A8%A1%E4%B8%8E%E5%8F%96%E4%BD%99%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/11/11/取模与取余的区别/</id>
    <published>2018-11-11T09:30:22.105Z</published>
    <updated>2018-11-11T09:28:20.339Z</updated>
    
    <content type="html"><![CDATA[<p>对于整型数a，b来说，取模运算或者求余运算的方法都是：</p><p>1.求 整数商： c = a/b;</p><p>2.计算模或者余数： r = a - c*b.</p><p>求模运算和求余运算在第一步不同: 取余运算在取c的值时，向0 方向舍入(fix()函数)；而取模运算在计算c的值时，向负无穷方向舍入(floor()函数)。</p><p>例如：计算-7 Mod 4</p><p>那么：a = -7；b = 4；</p><p>第一步：求整数商c，如进行求模运算c = -2（向负无穷方向舍入），求余c = -1（向0方向舍入）；</p><p>第二步：计算模和余数的公式相同，但因c的值不同，求模时r = 1，求余时r = -3。</p><p>归纳：当a和b符号一致时，求模运算和求余运算所得的c的值一致，因此结果一致。</p><p>当符号不一致时，结果不一样。求模运算结果的符号和b一致，求余运算结果的符号和a一致。</p><p>另外各个环境下%运算符的含义不同，比如c/c++，java 为取余，而python则为取模。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于整型数a，b来说，取模运算或者求余运算的方法都是：&lt;/p&gt;
&lt;p&gt;1.求 整数商： c = a/b;&lt;/p&gt;
&lt;p&gt;2.计算模或者余数： r = a - c*b.&lt;/p&gt;
&lt;p&gt;求模运算和求余运算在第一步不同: 取余运算在取c的值时，向0 方向舍入(fix()函数)；而
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux查看端口被哪个程序占用</title>
    <link href="http://yoursite.com/2018/11/11/linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%93%AA%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%8D%A0%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/11/linux查看端口被哪个程序占用/</id>
    <published>2018-11-11T09:27:26.151Z</published>
    <updated>2018-11-11T09:27:18.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-查看端口被哪个程序占用"><a href="#1-查看端口被哪个程序占用" class="headerlink" title="1.查看端口被哪个程序占用"></a>1.查看端口被哪个程序占用</h1><p>1.&gt;netstat -apn|grep [port]</p><p>2.&gt;  ll /proc/[pid]/   或者用 ps -aux | grep [pid]</p><h1 id="2-查看某个应用程序的进程详情"><a href="#2-查看某个应用程序的进程详情" class="headerlink" title="2. 查看某个应用程序的进程详情"></a>2. 查看某个应用程序的进程详情</h1><p>ps -aux | grep /home/tomcat/cartV1/vmall/</p><h1 id="3-查看某个进程占用了哪个端口"><a href="#3-查看某个进程占用了哪个端口" class="headerlink" title="3.查看某个进程占用了哪个端口"></a>3.查看某个进程占用了哪个端口</h1><p>netstat -nltp|grep pid</p><p>﻿﻿</p><p>﻿﻿</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-查看端口被哪个程序占用&quot;&gt;&lt;a href=&quot;#1-查看端口被哪个程序占用&quot; class=&quot;headerlink&quot; title=&quot;1.查看端口被哪个程序占用&quot;&gt;&lt;/a&gt;1.查看端口被哪个程序占用&lt;/h1&gt;&lt;p&gt;1.&amp;gt;netstat -apn|grep [p
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux命令" scheme="http://yoursite.com/tags/linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引和约束</title>
    <link href="http://yoursite.com/2018/11/11/MySQL%E7%B4%A2%E5%BC%95%E5%92%8C%E7%BA%A6%E6%9D%9F/"/>
    <id>http://yoursite.com/2018/11/11/MySQL索引和约束/</id>
    <published>2018-11-11T09:24:32.795Z</published>
    <updated>2018-11-11T09:20:09.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-索引分类"><a href="#1-索引分类" class="headerlink" title="1 索引分类"></a>1 索引分类</h1><p>按照字段个数分：单列索引、组合索引<br>按照唯一性划分：普通索引、唯一索引<br>MyISAM特殊索引：全文索引和空间索引</p><h1 id="2-唯一性约束"><a href="#2-唯一性约束" class="headerlink" title="2 唯一性约束"></a>2 唯一性约束</h1><p>主键：一个表只能存在一个，且不允许空值  PRIMARY KEY&lt;字段名1,字段名2,…&gt;<br>唯一性约束：允许列上存在一个空值   UNIQUE&lt;字段名1,字段名2,…&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-索引分类&quot;&gt;&lt;a href=&quot;#1-索引分类&quot; class=&quot;headerlink&quot; title=&quot;1 索引分类&quot;&gt;&lt;/a&gt;1 索引分类&lt;/h1&gt;&lt;p&gt;按照字段个数分：单列索引、组合索引&lt;br&gt;按照唯一性划分：普通索引、唯一索引&lt;br&gt;MyISAM特殊索引：全
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>能力提升知识体系</title>
    <link href="http://yoursite.com/2018/11/05/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/11/05/能力提升知识体系/</id>
    <published>2018-11-04T23:45:13.439Z</published>
    <updated>2018-11-04T23:44:58.525Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/N5qIu9D.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/N5qIu9D.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="能力提升，书单" scheme="http://yoursite.com/tags/%E8%83%BD%E5%8A%9B%E6%8F%90%E5%8D%87%EF%BC%8C%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>子女教育问题</title>
    <link href="http://yoursite.com/2018/11/04/%E5%AD%A9%E5%AD%90%E6%95%99%E8%82%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/04/孩子教育问题/</id>
    <published>2018-11-04T15:58:58.731Z</published>
    <updated>2018-11-04T16:09:24.855Z</updated>
    
    <content type="html"><![CDATA[<p>　　现在社会充斥着无处不在的压力与竞争，知识层次越高，往往面临的压力也越大。曾参加过一个培训机构的压力测试，测试的对象一个是汽车制造厂的蓝领工人群体，另一个国内某世界500强的民营高科技公司的白领群体，测试的结果令人意外，蓝领工人的压力普遍更小，而知识层次和收入较高的白领群体的压力普遍高很多。面对巨大的职场压力，白领群体往往在工作上付出的时间相对更多，加班成为工作的常态。即使在下班时间也会消耗大量的时间在工作上，还要持续加强自身的学习。然而，我们都面临着一个无法回避的问题：子女教育。</p><p>　　总结一下，孩子的教育归为两类：1）人格修养教育；2）思维、技能培养。</p><p>　　<strong>人格修养教育</strong>是父母必须要做到的部分，孩子的人格养成和修养的提升往往来源于父母的言传身教，在孩子形成是非判断能力前，身教往往更有效。孩子身上往往会反映出父母的一些行为习惯，这就是问题的家族性遗传。如果孩子性格暴躁，那么一方面是天生的性格特点，而最有可能的是因为父母一方性格比较暴躁，孩子很快就会学会。不信你可以观察下，大部分孩子的言行举止都会与父母神似。作为父母，我们必须先做好榜样，才能教会孩子。</p><p>　　<strong>思维、技能培养</strong>可以由父母以外的更专业的角色来承担，比如培训机构、学校，并不需要父母的言传身教。但是现在培训机构或者学校为了保证效果会给父母留各种的作业和任务，要求家长帮助孩子完成，这无形中增加了父母的负担。我的观点是如果你的精力不足，那么重点培养孩子的思维能力，适当挖掘孩子的兴趣，技能的教育不可缺少但是优先级最低。</p><p>　　这两类，无论哪一类，都需要父母花费大量时间。孩子的教育其实拼的是父母。孩子往往是在父母的基础上成长起来的，你的水平决定了你孩子的起始水平。你是否想过你的业余时间有多少？每天花费在孩子身上的时间有多少？每周有多少？跟孩子一起时都做些什么？你是如何教育孩子的？</p><p>　　如果父母双方都在职场，时间紧张，那么合理规划自己的业余时间以保证在孩子教育上的投入是很有必要的。</p><p>　　<strong>我的建议</strong>是家务的事情，能外包的就不要自己做。洗衣、做饭、清洁这些工作完全可以交给他人去做，把时间省下来，用在孩子身上。<br>　　父母需要多读一些教育方面的书籍，提升自我修养，学会帮助孩子树立正确的人生观和价值观。<br>　　与孩子在一起时，要保证质量和效果，多与孩子做深层次的交流与互动，培养孩子高尚的品格，挖掘孩子的兴趣。<br>　　技能的培养交给专业的机构，花费少量的时间做孩子的辅导。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　现在社会充斥着无处不在的压力与竞争，知识层次越高，往往面临的压力也越大。曾参加过一个培训机构的压力测试，测试的对象一个是汽车制造厂的蓝领工人群体，另一个国内某世界500强的民营高科技公司的白领群体，测试的结果令人意外，蓝领工人的压力普遍更小，而知识层次和收入较高的白领群
      
    
    </summary>
    
      <category term="教育" scheme="http://yoursite.com/categories/%E6%95%99%E8%82%B2/"/>
    
    
      <category term="教育，时间管理" scheme="http://yoursite.com/tags/%E6%95%99%E8%82%B2%EF%BC%8C%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一个离职华为员工的十年感悟（转）</title>
    <link href="http://yoursite.com/2018/11/03/%E4%B8%80%E4%B8%AA%E7%A6%BB%E8%81%8C%E5%8D%8E%E4%B8%BA%E5%91%98%E5%B7%A5%E7%9A%84%E5%8D%81%E5%B9%B4%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2018/11/03/一个离职华为员工的十年感悟/</id>
    <published>2018-11-03T11:22:13.447Z</published>
    <updated>2018-11-04T16:10:17.309Z</updated>
    
    <content type="html"><![CDATA[<p>一毕业就加入公司，做过研发、一线，到今年已经是第十年（九年两个月）了；做人得感恩，首先必须要感谢公司，在公司遇到LP，有了娃，帝都买了房（有贷款）。</p><p>结合心声大家经常讨论的问题，以下有一点小收获，非经历贴非炫耀贴，分享给后来人，希望对困惑的人有所帮助；对或不对、听或不听，自行判断；觉得错的不用喷了，本周五就截止了，有问题可以留言，我尽量答复。</p><p><strong>第一点，人和人区别就是思维，不断更新的思维体系；人可以累，但不能停止思考。</strong></p><p>很多人最大的恐慌估计就是明知自己在打杂，又不敢或不能出去，担心出去没有竞争力。其实，这部分同学，大多数只停留在想一想的阶段，还没有到思考的阶段，没有到体系的阶段；竞争力，我的总结是工作经历+不断进步的思维体系，还有你的圈子；你会发现，每层领导都比下级领导牛，区别就是经验和思维逻辑。平时不要只抱怨，也要多思考，多学习，不断的更新自己；挑战别人容易，自己积累很难；如果一段时间，感觉自己一直很牛或者自己没有提升的输入/输出，那真的好好反思自己了，思维体系是顶层，是所有的基础，人可以累，不能停止思考，这就是哲学的本质。</p><p><strong>第二，身体是革命的本钱。</strong></p><p>公司导向是艰苦奋斗，身边一些兄弟真可以说是糟蹋自己的身体，来表现奋斗；如果能拼上去（至少19以上）还值得，不然病了没人管你；身边一个哥们得了很严重的病，后来公司也没管，离职了。</p><p>男人身体有两个关键时间点一定要注意：第一个是35岁，男人体质下降转折点；第二个是45岁，心血管疾病发生率高发期，经常喝酒熬夜的需要注意。</p><p>你没了，你这一辈子可能是在给你的司机打工（那天看到的一个新闻）。</p><p>建议平时多跑步（注意保暖，保护膝盖）、游泳，做些无氧增加肌肉，家里也行，哑铃、跳绳、卷腹、平板支撑等等，不要说自己累没有时间等，没有人不累，不是非要跑10公里才叫运动，只要你想明白了，你就会知道怎么做。</p><p><strong>第三，家庭是根基，家都是温暖的港湾和动力源泉</strong></p><p>人的爆发来自于安全感，家是安全感的重要来源，要懂得经营，家庭会给你很多的动力；不要动不动就吵架、离婚，离婚对家庭、孩子没有赢家，人品底线出了问题除外。</p><p>心声有同事说她老公天天打游戏，一个大人怎么能这样呢？？这种情况属于你老公不知道如何处理自己困境，迷茫，他也不是故意的。</p><p>很多人“不思进取”其根因，他的父母只停留在“好好学习”的层次，父母没有教给他正确的教育，他不知所措；那么，你就要思考了，你提升了吗？作为你的人生另一半，你该如何帮忙他提升呢？如何让你的孩子不走老路呢？</p><p>分享一个经验，人天生就不爱听别人否定自己，请要不整天JJYY只会增加他的反感，人本能容易接受第三方的经验。</p><p>可以偶尔游戏、电影、运动、喝酒释放自己，但要养成看书/听书，多与人交流，每个人都有比自己强的地方，看书和与人交流是一种很好的方式，把这个习惯带给你的家人和孩子。如果你的圈子就只有喝酒，只能说明你的圈子很低。</p><p><strong>第四，没有不懂事的孩子，只有不学习的家长；教育拼的是家长不是孩子，本质就是你和他一起提升；不要说等我挣完钱了抽时间在管他。</strong></p><p>最近天涯曝光很多渣男，一个男人身体偶尔偏航，精神可以偶尔出轨，但人品一定不能；而，身边很多人对孩子可以说没有教育可言，你有没有想过，二十年后你的娃可能也会上天涯？想想这是多么可怕的事情；说实话，一方面公司太商业没有道德和精神，另一方面，是自己的父母从小没有给予我们正确的教育体系；那么，要么是我们自己努力改变自己形成教育传递给下一代，要么把碰壁的机会留给你的娃，选择后者，可以说是自私，等你老了你的娃内心里一定会责怪你的。</p><p>教育不是数理化，不是学习成绩；内核是心理学，孩子未来与人合作，自我更新处理能力；中间，品味、仪表姿态、财商；最后才是技能。内核和中间层出了问题，技能能好吗？或者光有学习成绩就够了吗？</p><p>心声有说，我孩子天天打游戏求破？破什么，你平时在家看手机不？打游戏不？你都做不到，怎么要求一个孩子呢？为了孩子的学习，你有没有学习教育方面的书籍和交流？</p><p><strong>第五，要不要在公司干下去？每天你都要思考，公司不是家，你学到了什么，你未来如何规划。</strong></p><p>多出去看看，你会发展现在的公司是个非常好的平台，但对于个人是不是最好的，你要分析；如果你的能力很强、逻辑思维和口才好、懂得和领导拉关系，机会得当，能拼到20以上，建议你好好拼搏一把。高管的待遇和境界是值得你付出的。</p><p>现在公司已经过了爆发期，到了和平发展期，个人迸发机会真的越来越少；如果你不是最牛X的那波人，必须面对现实，多思考，公司毕竟还是逃不开通信设备的圈子，这个圈子很小，都被公司给打的差不多了，没有了磨盘的市场，杀了驴，你又能如何？</p><p>在公司各个岗位的待遇，在其他小公司都是小主管的待遇，你出去之后很容易形成落差；公司是个庞大的组织，虚职一堆，有竞争力的岗位有多少，对于公司你只是一个螺丝钉，胶片可以写一年两年，写到45岁你还剩什么？</p><p>千万别想着到45岁财务自由，再降低工资找个公司，一样工资，谁不喜欢年轻力壮的，那个时候想创业，想想你的身体和思维还活跃吗？</p><p>社会变化这么快，那个时候你的几套房子能够抗风险的吗？？</p><p>其实，搞个兼职或创业，也是个不错的选择；不要偏激的以为创业就是互联网，传统行业也是个不错的选择，很多传统行业利润都很好，只是你不在圈子里，可以现在不做，但一定要想，万一机会来了呢？</p><p><strong>第六，在公司干多久对自己有利？</strong></p><p>即使工作中有很多不爽，你要相信华为走到今天一定有他过人的地方，一定是比外面简单一些的，不要太过批评；公司的管理和流程是公司发展的根本，技术本身就是为了管理服务的，这也是外面很多公司都想学习，那么这个也可能是你的资本，请静下心来多思考，你能带走哪些？</p><p>在一个公司，时间不要太短，建议3年左右；还是要有些积累，出去好和下一家谈；平时有有时间网上发简历，看看自己到底值多少钱，想好惯例前，至少3个月认真找下一家；5年也是一个比较好的时间点；35岁，是男人职业关键期，也是很多大厂商很多岗位招聘的限制年龄；过了这个工龄，出来竞争力同比下降了。</p><p><strong>第七，研发要不要转一线？</strong></p><p>你无非想问这几个问题：</p><p>关于一线岗位的选择，有情商可做客户经理，待遇最好，可以积累圈子，这是完全不同的路线，这相当于脱离了技术，想好，不是谁都适合；产品经理，事情多而杂；想轻松调养身体，选渠道经理；服务经理相对压力小，竞争力也少一些；</p><p>累不累？首先，在公司主力部门（非平台），就没有几个轻松的岗位；研发是持续的累，一线是有节奏的累，忙的时候经常通宵，没有周末，不忙的时候可以有周末，平时工作时有走路和抬头的时间，可以接触一些人；</p><p>然后，哪个更挣钱？正常情况是要向一线倾斜的，但目前公司业绩不好，没有了403项目奖金，都差不多；</p><p>最后，岗位区别；大部分研发出来选择产品经理的居多；两个岗位相同点打杂事情都不少；研发偏封闭，一线较开放；研发有团队的概念，领导就坐你屁股后面，一线你和领导天天各种跑；研发偏执行，一线需要独立思考，需要一些情商；有些人在研发干的特别好的，到市场都熄火了；反而有一些在研发混不下去的，到一线如鱼得水，他们头脑更灵活，更懂得投“机”，懂得如何找到领导为核心，而不是公司的利益。一线可能涉及到换地方，充分沟通，后方要稳。</p><p>一线没有回头路，大部分都出去了，可以回到研发和市场的中间，很难回到纯研发岗。出来后，从公司出来，大部分只能做你现在的这个岗位了。想好了再出来。所有的路，没有对错，必须是你自己拍板，不能把决策权留给别人。</p><p><strong>第八，工作多长时间从研发转一线合适？</strong></p><p>个人建议2-3年，不要超过5年；研发和市场是两种工作方式，或者从某种意义上说是相反的方式；人的惯性思维、岗位经验一旦形成，时间越长，越难适应新岗位；而且，工龄长了，对新岗位不是好事。要想升职，多轮换几个办事处；</p><p>关于海外，现在真的过了当年暴发户的年代了，现在没有太好的地方，出去很难回来，除非你有人，所以你一定要多培养领导资源。现在很多海外开始裁员了，有的裁员50%，公司日子越来越难。</p><p><strong>第九，公司有一种累，叫虐心</strong></p><p>“白天吵架、晚上加班干活”，这是一个离职师姐的总结，很形象；</p><p>原因就是公司给了每个部门和岗位的压力，平衡制约，而各个岗位为了体现自己的价值，拼命的找事，产生了内耗，现在公司内耗很严重，很多事情，从我看对公司价值不大，但对个人来讲非常虐心，这是最催人老的地方，公司经常看到一头白发的小伙子，脾气暴躁、脸色很差的女汉子，这种老，不是花几千做个美容买个豪华化妆品能弥补的；有些部位老了，再也回不去了；虐心容易激发癌症，推荐大家看看近藤诚的书，我正在看。</p><p><strong>第十，家庭生活如何和谐？</strong></p><p>看很多员工经常发离婚、吵架，挺着急；作为过来人，我也经历过吵架到现在的和睦；分享几点经验；</p><p>1、一定要多思考，多学习，多进步！你夫妻关系紧张一定是你不够进步，一定是，不要把责任仍给对方。</p><p>2、夫妻吵架也是正常的，夫妻都要经过互相爱慕，然后幻灭，最后内省的过程；这是有心理学依据的，要多看书，推荐《亲密关系》等书籍；</p><p>3、不要害怕吵架，生活需要掐架，需要波澜；任何的谈判都是基于竞争的，历史上很多谈判都是一边打仗一边谈，最终打服了才有了谈的资本，然后适当让一下；这就是谈判。</p><p>4、吵架要有底线，借用《正面管教》的一句话，温柔而坚定；不要动手，不要骂人，简单说要有人品；越近的人，感情伤了，很难恢复；个人的修为要提升。</p><p>5、最好的方法，你先进步了，同时让你的另一半也进步，这才是真谛。</p><p>6、只要ta不出原则性问题，你要相信还是原配好。即使是渣男，也有你的过错，人性都有灰暗的一念，肯定有你的小错，你压制了别人，别人就会反弹你；你太迁就了别人，就激发了他的阴暗面；你有没有关注过他的心里真正在想什么？他的儿时有什么经历？平时的你提高了没有？你如何帮忙他成长呢？还是只有掐。</p><p>7、家里矛盾包括社会矛盾，说通俗一点，人有时候都是嘴贱，不占便宜死不休；每天都需要别人说点好的，抬高自己，错都是别人的；老婆觉得我嫁到你们家，你们应该供着；老公觉得，我们老家老婆就应该天天被骂，这是传统；两个内心反差，加上儿时缺乏良好的沟通教育，这生活能好吗？如果确实水火不容，就让老人回去，自己体会到了辛苦，在让他们过来；人不能觉得别人天生都是欠自己的。</p><p><strong>最后，写给我心中的公司，伟大但仍然风险重重。</strong></p><p>公司领导也看不到，就算写给自己的第一个十年吧；三个方面：</p><p><strong>1、战略惰性</strong>：首先要说，LB确实很牛X，一直保持高度的自我革新，膜拜的偶像，我在公司学到了很多，感激；但我想说，LB年龄大了，缺少接班人这是最让人痛心地方；LB的理解力和专制，在公司刚起步阶段和腾飞阶段，快速聚集主航道，以客户为中心艰苦奋斗，打跑了很多不能干脏活累活的外国人，获得成功；但从近十年发展看，公司一直在吃运营商的老底子，战略上惰性了，丢掉了很多机会（比如云的趋势、视频的趋势，造就了多少个百亿的企业），在很多的机会面前畏首畏尾（短期看不到钱的），又成了别人眼中当年的外国人，真是轮回；</p><p>现在的手机有核心竞争力吗（CPU算是国产的情怀吧）？我们用运营商的人力和薪资体系，套上消费者BG上，和国内OV打，没有优势可言，又没有苹果的高度；同样，除了品质，企业网有什么竞争力吗？运营商是块状大蛋糕，企业网是小远散点，客户需要培育，不可能快速形成规模，人均效益和运营商没法比，自给自足很困难，很难更新，大的方向上失去了视频的大趋势，卡在云的趋势中，关键部件都不是自己的，在给三星和intel打工，未来在哪里；搞了个2012探索新领域，现在还没看到冰山；企鹅厂兼并小公司，虽然口碑不好，但确实发挥了大公司耍流氓的最高境界，保持非常敏感的嗅觉，不断的更新自己，不被别人革命掉；现在公司的情况真的不乐观，未来的路很长，在外面遥祝公司百年长青。</p><p><strong>2、缺少精神文明建设</strong>：目前的公司，就是改革开放的中国，一只手发展经济，丢了精神建设；在经济红利区，只要给钱随便骂，当你和平发展时期怎么办？部门独立核算，强考评，让很多员工养成了非常“势利”的习惯，和自己考评相关的，领导在场的，所有功劳都往自己身上晒，今天踢这个一脚踢那个一脚，晒存在感；领导不在场，和自己考评不强相关的，你以为你是谁啊？一个国家没有国家荣誉感、集体主义精神，人民没有信仰很可怕，一个企业同样也需要。但不是说大家每天空谈精神，不要物质。</p><p><strong>3、人力资源的懈怠</strong>：人力资源对公司很重要，公司成长过程中人力逼研发和市场前行，但忽视对人力资源的变革，没人管；现在人力资源的薪资已经是研发市场最羡慕的岗位，而且从不招聘，没有点关系进不去，已经成了温柔乡了；人力属于上游部门，这是非常可怕的；新形势下，人力和组织如何布局？今年突然说离职率低裁员，不应该是今天LB说离职率低，才被动反应；公司的懈怠、管理层的错综关系，责任首先是领导和上游部门，首先应该动金字塔尖，而不是下面的根基，裁几个基层员工能解决公司前进的问题吗？这些都是没有对人力资源产生很好的牵引和抑制的体现；内部关系也很复杂，主管一言堂，看一个17B多么大的势力。大家经常诟病的问题，内耗、胶片文化、无效加班、组织臃肿、一言堂等，根深蒂固，很难改变，慢慢来吧；</p><p>昨天看了一本书《爸爸军团》推荐给大家，假如你被宣布得了癌症，躺在床上，闭上眼睛，想想你会有什么遗憾？孩子的教育？自己的身体？家庭关系？照顾父母？等等，那么现在还等什么呢，不要让自己老的时候才去后悔。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一毕业就加入公司，做过研发、一线，到今年已经是第十年（九年两个月）了；做人得感恩，首先必须要感谢公司，在公司遇到LP，有了娃，帝都买了房（有贷款）。&lt;/p&gt;
&lt;p&gt;结合心声大家经常讨论的问题，以下有一点小收获，非经历贴非炫耀贴，分享给后来人，希望对困惑的人有所帮助；对或不对
      
    
    </summary>
    
      <category term="人生经验" scheme="http://yoursite.com/categories/%E4%BA%BA%E7%94%9F%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="人生，感悟" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F%EF%BC%8C%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的web.xml配置</title>
    <link href="http://yoursite.com/2018/10/30/Tomcat%E7%9A%84web%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/10/30/Tomcat的web配置/</id>
    <published>2018-10-30T00:01:36.687Z</published>
    <updated>2018-11-15T15:33:55.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-xml出现的位置"><a href="#web-xml出现的位置" class="headerlink" title="web.xml出现的位置"></a>web.xml出现的位置</h2><p>　　tomcat中有两处使用到web.xml配置，一个是$HOME/conf/web.xml，另一个是$HOME/webapps/myapps/WEB-INF/web.xml。tomcat启动时，首先读取全局的$HOME/conf/web.xml，再读取/WEB-INF/web.xml。前者是全局性的，会在所有webapps中生效，后者只在本webapps中有效。</p><h2 id="web-xml中元素配置的顺序要求"><a href="#web-xml中元素配置的顺序要求" class="headerlink" title="web.xml中元素配置的顺序要求"></a>web.xml中元素配置的顺序要求</h2><p>　　web.xml的root元素是web-app，除此之外，其他的内部元素都是非必须的。web-app下的子元素没有严格的顺序要求。但是，同一类型的配置是有顺序要求的，比如filter-mapping必须要跟在对应的filter之后，并且对隶属于同一个filter的filter-mapping，servlet在匹配时会先匹配前面的mapping的doFilter()方法。同样的道理servlet和servlet-mapping也是一样的处理。</p><h2 id="web-xml中元素的加载顺序"><a href="#web-xml中元素的加载顺序" class="headerlink" title="web.xml中元素的加载顺序"></a>web.xml中元素的加载顺序</h2><p>　　不论web-app中的子元素配置的顺序如何，servlet加载时会按照context-param -&gt; listener -&gt; filter -&gt; servlet的顺序进行加载。</p><h2 id="web-xml的配置说明"><a href="#web-xml的配置说明" class="headerlink" title="web.xml的配置说明"></a>web.xml的配置说明</h2><pre><code>下面这些配置仅仅包括常用配置&lt;web-app&gt;    &lt;icon&gt;&lt;/icon&gt;  应用图标，在GUI管理工具中使用    &lt;display-name&gt;&lt;/display-name&gt; Web应用名称    &lt;description&gt;&lt;/description&gt;  Web应用描述    &lt;context-param&gt;&lt;/context-param&gt;  声明应用范围内的初始化参数    &lt;filter&gt;&lt;/filter&gt;  过滤器配置：将一个名字与一个实现javaxs.servlet.Filter接口的类相关联    &lt;filter-mapping&gt;&lt;/filter-mapping&gt; 一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联    &lt;servlet&gt;&lt;/servlet&gt;  在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的。    &lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;  为servlet指定非缺省的URL    &lt;session-config&gt;&lt;/session-config&gt; 指定session配置。如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。     &lt;listener&gt;&lt;/listener&gt; Context或会话监听器配置。事件监听程序在建立、修改和删除会话或servlet环境时得到通知    &lt;welcome-file-list&gt;&lt;/welcome-file-list&gt; 指示服务器在收到引用一个目录名而不是文件名的URL时，使用哪个文件。      &lt;taglib&gt;&lt;/taglib&gt;  用来设定JSP网页所用到的Tag Library路径    &lt;resource-ref&gt;&lt;/resource-ref&gt; 定义利用JNDI取得站台可利用的外部资源，比如JDBC    &lt;security-constraint&gt;&lt;/security-constraint&gt; 认证配置，与login-config元素联合使用    &lt;login-config&gt;&lt;/login-config&gt;  指定sercurity-constraint下使用怎样的登陆机制    &lt;security-role&gt;&lt;/security-role&gt;  安全角色的一个列表，与security-constraint配套使用    &lt;error-page&gt;&lt;/error-page&gt;  在返回特定HTTP状态代码时，或者特定类型的异常被抛出时，映射到对应页面    &lt;env-entry&gt;&lt;/env-entry&gt;  声明Web应用的环境项    &lt;ejb-ref&gt;&lt;/ejb-ref&gt;  声明servlet使用的EJB    &lt;ejb-local-ref&gt;&lt;/ejb-local-ref&gt;  声明servlet使用的EJB的本地接口&lt;/web-app&gt;</code></pre><h3 id="display-name和description"><a href="#display-name和description" class="headerlink" title="display-name和description"></a>display-name和description</h3><p>这两个一般会配套使用，比如：</p><pre><code>&lt;display-name&gt;Tomcat Manager Application&lt;/display-name&gt;&lt;description&gt;A scriptable management web application for the Tomcat Web Server;    Manager lets you view, load/unload/etc particular web applications.&lt;/description&gt;</code></pre><h3 id="context-param"><a href="#context-param" class="headerlink" title="context-param"></a>context-param</h3><p>定义传递给servlet或JSP的参数。比如数据库连接参数、文件名或网站信息等。</p><pre><code>&lt;context-param&gt;        &lt;param-name&gt;ContextParameter&lt;/para-name&gt;        &lt;param-value&gt;test&lt;/param-value&gt;        &lt;description&gt;It is a test parameter.&lt;/description&gt;    &lt;/context-param&gt;</code></pre><p>上面的配置对webapp的所有servlet生效。也可以设置仅仅对某个servlet生效，但是此时context-param元素必须在servlet元素中，如下：</p><pre><code>&lt;servlet&gt;    &lt;servlet-name&gt;SampleServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;mypack.SampleServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;initParam1&lt;/param-name&gt;        &lt;param-value&gt;2&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/servlet&gt;</code></pre><h3 id="filter和filter-mapping"><a href="#filter和filter-mapping" class="headerlink" title="filter和filter-mapping"></a>filter和filter-mapping</h3><p>过滤器在指定的URL传递给servlet之前，或执行servlet之后执行。<br>filter的子元素包括：</p><pre><code>&lt;filter&gt;    &lt;filter-name&gt;CharacterEncoding&lt;/filter-name&gt;  定义过滤器的名字。当有多个过滤器时，不能同名    &lt;filter-class&gt;org.apache.catalina.filters.SetCharacterEncodingFilter&lt;/filter-class&gt;  指定实现这一过滤的类，这个类负责具体的过滤事务    &lt;init-param&gt;  配置过滤器的初始化参数        &lt;param-name&gt;encoding&lt;/param-name&gt;  参数名        &lt;param-value&gt;UTF-8&lt;/param-value&gt;  参数值    &lt;/init-param&gt;&lt;/filter&gt;</code></pre><p>过滤器配置完成后，需要通过filter-mapping来配置过滤器生效的对象，生效对象可以是URL或servlet。</p><ul><li>对URL生效，使用url-pattern进行配置，所有符合模式的入向URL都会被过滤器处理。如：</li></ul><pre><code>&lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncoding&lt;/filter-name&gt;  在filter中定义的过滤器名字    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  指定filter所对应的URL&lt;/filter-mapping&gt;</code></pre><p>在servlet 2.5之后，filter-mapping中可以使用多个url-pattern，进而把多个pattern映射为该过滤器。</p><ul><li>对servlet生效，使用servlet-name配置，会将过滤器的输出传给指定的servlet。如：</li></ul><pre><code>&lt;filter-mapping&gt;    &lt;filter-name&gt;CharacterEncoding&lt;/filter-name&gt; 过滤器名称    &lt;servlet-name&gt;HTMLManager&lt;/servlet-name&gt;  servlet名称。这个servlet必须在前面定义过。&lt;/filter-mapping&gt;</code></pre><h3 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h3><p>用来指定事件监听器。事件监听程序在建立、修改和删除会话或servlet环境时得到通知。</p><pre><code>&lt;listener&gt;    &lt;listener-class&gt;listeners.ContextListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;listener&gt;    &lt;listener-class&gt;listeners.SessionListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre><h3 id="servlet和servlet-mapping"><a href="#servlet和servlet-mapping" class="headerlink" title="servlet和servlet-mapping"></a>servlet和servlet-mapping</h3><p>定义servlet，以用于servlet-mapping或者filter-mapping中。</p><pre><code>&lt;!-- 基本配置 --&gt;&lt;servlet&gt;    &lt;servlet-name&gt;snoopImpl&lt;/servlet-name&gt;  servlet名字    &lt;servlet-class&gt;com.SnoopImplServlet&lt;/servlet-class&gt;  servlet代表的类&lt;/servlet&gt;&lt;!-- 高级配置 --&gt;&lt;servlet&gt;    &lt;servlet-name&gt;snoop&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.SnoopServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;foo&lt;/param-name&gt;  servlet类的参数名        &lt;param-value&gt;bar&lt;/param-value&gt;  servlet类的参数值    &lt;/init-param&gt;    &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;  指定当Web应用启动时，装载Servlet的次序。当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet。当值为负或未定义：Servlet容器将在Web客户首次访问这个servlet时加载它。    &lt;run-as&gt;        &lt;description&gt;Security role for anonymous access&lt;/description&gt;        &lt;role-name&gt;tomcat&lt;/role-name&gt;  执行此servlet的角色名称。    &lt;/run-as&gt;&lt;/servlet&gt;</code></pre><p>上述元素并不是servlet的全部子元素，除此之外还有jsp-file和security-role-ref。</p><p>默认情况下，web对servlet的请求必须包含servlet的完整类名。但这样使用起来极不方便，可读性不好，因此，常用servlet的别名代替，而servlet-mapping就是用来做servlet与别名映射的元素。</p><pre><code>&lt;servlet-mapping&gt;    &lt;servlet-name&gt;snoop&lt;/servlet-name&gt;  前面定义的servlet名称    &lt;url-pattern&gt;/snoop&lt;/url-pattern&gt;  指定servlet所对应的别名URL或别名&lt;/servlet-mapping&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;snoop&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><p>这样配置的servlet，web可以通过应用的Context路径拼接url-pattern来访问对应的servlet。上述配置中所有的以“.jsp”结尾的文件名都会由snoop来处理。</p><p>另外一种用法, 会将所有的请求都映射成指定的JSP文件，如下例中的redirector.jsp，这里与重定向不完全相同，因为它动态的计算用于新Context的精确链接。</p><pre><code>&lt;servlet-mapping&gt;    &lt;servlet-name&gt;snoop&lt;/servlet-name&gt;  前面定义的servlet名称    &lt;jsp-file&gt;/redirector.jsp&lt;/jsp-file&gt;  指定web站台中的某个JSP网页的完整路径&lt;/servlet-mapping&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;snoop&lt;/servlet-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><h3 id="session-config"><a href="#session-config" class="headerlink" title="session-config"></a>session-config</h3><p>用于设置会话闲置时间。当用户访问的会话超过这个时间时，Tomcat将会丢弃该会话，并回收内存。</p><pre><code>&lt;session-config&gt;       &lt;session-timeout&gt;120&lt;/session-timeout&gt;  会话闲置120分钟后超时   &lt;/session-config&gt;</code></pre><h3 id="welcome-file-list"><a href="#welcome-file-list" class="headerlink" title="welcome-file-list"></a>welcome-file-list</h3><p>配置欢迎页面。假如用户输入了一个<a href="http://host/webAppPrefix/directoryName/这样的包含一个目录名但没有包含文件名的URL时，会发生什么呢？用户能得到一个目录表？一个错误？还是标准文件的内容？如果得到标准文件内容，是index.html、index.jsp、default.html、default.htm或别的什么东西呢？" target="_blank" rel="noopener">http://host/webAppPrefix/directoryName/这样的包含一个目录名但没有包含文件名的URL时，会发生什么呢？用户能得到一个目录表？一个错误？还是标准文件的内容？如果得到标准文件内容，是index.html、index.jsp、default.html、default.htm或别的什么东西呢？</a><br>Welcome-file-list 元素及其辅助的welcome-file元素解决了这个模糊的问题。例如，下面的web.xml项指出，如果一个URL给出一个目录名但未给出文件名，服务器应该首先试用index.jsp，然后再试用index.html。如果两者都没有找到，则结果有赖于所用的服务器（如一个目录列表）。</p><pre><code>&lt;welcome-file-list&gt;      &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;      &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;      &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;    &lt;/welcome-file-list&gt;  </code></pre><p>可以通过将DefaultServlet参数设置为false,来关闭Tomcat全部的打印目录清单功能：</p><pre><code>&lt;servlet&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.apache.catalina.servlet.DefaultServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;debug&lt;/param-name&gt;        &lt;param-value&gt;0&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;param-name&gt;listings&lt;/param-name&gt;        &lt;param-value&gt;true&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/servlet&gt;</code></pre><h3 id="jsp-config"><a href="#jsp-config" class="headerlink" title="jsp-config"></a>jsp-config</h3><p>jsp-config包括taglib和jsp-property-group两个子元素。</p><ul><li><p>JSP taglib元素具有一个必要的uri属性，它给出一个TLD（Tag Library Descriptor）文件相对于Web应用的根的位置。TLD文件的实际名称在发布新的标签库版本时可能会改变，但我们希望避免更改所有现有JSP页面。此外，可能还希望使用保持taglib元素的简练性的一个简短的uri。这就是部署描述符文件的taglib元素派用场的所在了。Taglib包含两个子元素：taglib-uri和taglib-location。 taglib-uri元素应该与用于JSP taglib元素的uri属性的东西相匹配。Taglib-location元素给出TLD文件的实际位置。例如，假如你将文件chart-tags-1.3beta.tld放在WebApp/WEB-INF/tlds中。现在，假如web.xml在webapp元素内包含下列内容。</p></li><li><p>jsp-property-group的作用是允许将Web应用程序的一组资源配置为不同于全局设置的JSP行为。<br>Scriptlet是个不乐意被见到的东西，因为它会使得HTML与Java程式码交相混杂，对于程式的维护来说相当的麻烦，必要的时候，可以在web.xml 中加上<script-invalid> 标签，设定所有的JSP 网页都不可以使用Scriptlet。 </script-invalid></p><p>  <jsp-config></jsp-config></p><pre><code>&lt;taglib&gt;     &lt;taglib-uri&gt;/charts.tld&lt;/taglib-uri&gt;     &lt;taglib-location&gt;/WEB-INF/tlds/chart-tags-1.3beta.tld&lt;/taglib-location&gt; &lt;/taglib&gt;&lt;taglib&gt;    &lt;taglib-uri&gt;http://tomcat.apache.org/example-taglib&lt;/taglib-uri&gt;    &lt;taglib-location&gt;/WEB-INF/jsp/example-taglib.tld&lt;/taglib-location&gt;&lt;/taglib&gt;&lt;jsp-property-group&gt;    &lt;description&gt;Special property group for JSP Configuration JSP example.&lt;/description&gt;    &lt;display-name&gt;JSPConfiguration&lt;/display-name&gt;  设定名称    &lt;url-pattern&gt;/jsp/jsp2/misc/config.jsp&lt;/url-pattern&gt;  设定值所影响的范围，如： /CH2 或 /*.jsp    &lt;el-ignored&gt;true&lt;/el-ignored&gt;  若为 true，表示不支持 EL 语法    &lt;page-encoding&gt;ISO-8859-1&lt;/page-encoding&gt;  设定 JSP 网页的编码    &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;  若为 true，表示不支持 &lt;% scripting %&gt;语法    &lt;include-prelude&gt;/jsp/jsp2/misc/prelude.jspf&lt;/include-prelude&gt; 设置 JSP 网页的抬头，扩展名为 .jspf    &lt;include-coda&gt;/jsp/jsp2/misc/coda.jspf&lt;/include-coda&gt; 设置 JSP 网页的结尾，扩展名为 .jspf&lt;/jsp-property-group&gt;</code></pre><p>   </p></li></ul><p>给出这个说明后，JSP页面可通过下面的简化形式使用标签库。</p><pre><code>&lt;%@ taglib uri=&quot;/charts.tld&quot; prefix=&quot;somePrefix&quot; %&gt; </code></pre><h3 id="security-constraint"><a href="#security-constraint" class="headerlink" title="security-constraint"></a>security-constraint</h3><p>用来指定访问设定的资源（目录/url）时所需要的身份验证。一般情况下，用来保护Web应用中的特殊目录。</p><pre><code>&lt;security-constraint&gt;  &lt;display-name&gt;Example Security Constraint - part 1&lt;/display-name&gt;  &lt;web-resource-collection&gt;  描述Web应用程序中的哪些web资源受到指定安全限制的保护     &lt;web-resource-name&gt;Protected Area - Allow methods&lt;/web-resource-name&gt;     &lt;url-pattern&gt;/jsp/security/protected/*&lt;/url-pattern&gt;     &lt;http-method&gt;DELETE&lt;/http-method&gt; 指定安全限制覆盖的HTTP方法     &lt;http-method&gt;GET&lt;/http-method&gt;     &lt;http-method&gt;POST&lt;/http-method&gt;     &lt;http-method&gt;PUT&lt;/http-method&gt;  &lt;/web-resource-collection&gt;  &lt;auth-constraint&gt;  描述允许访问Web组件的安全角色     &lt;role-name&gt;tomcat&lt;/role-name&gt;     &lt;role-name&gt;role1&lt;/role-name&gt;  &lt;/auth-constraint&gt;&lt;/security-constraint&gt;</code></pre><h3 id="login-config"><a href="#login-config" class="headerlink" title="login-config"></a>login-config</h3><p>登录验证设置。Web应用程序通过login-config元素来认证用户，并确认该用户是否为正确的角色。<br>longin-config包含的auth-method子元素用来指定认证方法，BASIC是一种常见的Web认证方式，浏览器给用户提示一个对话框，要求输入用户名和密码，随后Tomcat将给出的用户名和密码与tomcat-users.xml中的用户名和密码进行比较，然后使用前面的security-constraint配置来确定用户是否可访问受保护的servlet。</p><p><strong>这种认证方法实际上有两个步骤：</strong><br>1、检查提供的用户名和密码是否正确。<br>2、判断用户是否映射到特定的安全角色。例如，用户可能提供了正确的用户名和密码，但没有映射到特定的安全角色，也将被禁止访问特定的Web资源。</p><pre><code>&lt;login-config&gt;  &lt;auth-method&gt;FORM&lt;/auth-method&gt;  指定验证方法，它有四个可选值：BASIC(基本验证)、DIGEST(摘要验证)、FORM(表单验证)、CLIENT-CERT  &lt;realm-name&gt;Example Form-Based Authentication Area&lt;/realm-name&gt; 设定当客户端访问受保护区域时，浏览器在其登录对话窗中显示的名称  &lt;form-login-config&gt; 当验证方法为FORM时，配置验证网页和出错网页    &lt;form-login-page&gt;/jsp/security/protected/login.jsp&lt;/form-login-page&gt; 当验证方法为FORM时，设定验证网页    &lt;form-error-page&gt;/jsp/security/protected/error.jsp&lt;/form-error-page&gt; 当验证方法为FORM时，设定出错网页  &lt;/form-login-config&gt;&lt;/login-config&gt;</code></pre><p>login-conf通常会紧跟在security-constraint元素之后，表示要使用哪种安全防护方法来访问受保护的区域。</p><h3 id="security-role"><a href="#security-role" class="headerlink" title="security-role"></a>security-role</h3><p>安全角色：security-role元素给出安全角色的一个列表，这些角色将出现在servlet元素内的security-role-ref元素的role-name子元素中。<br>分别地声明角色可使高级IDE处理安全信息更为容易。</p><pre><code>&lt;security-role&gt;        &lt;role-name&gt;tomcat&lt;/role-name&gt;    &lt;/security-role&gt; </code></pre><h3 id="error-page"><a href="#error-page" class="headerlink" title="error-page"></a>error-page</h3><p>用来配置HTTP状态代码或Java的异常类型来指定自定义的错误提示页面。错误提示页面必须是Context内的绝对路径。</p><pre><code>&lt;error-page&gt;  通过错误码来配置error-page。当系统发生404错误时，跳转到错误处理页面。    &lt;error-code&gt;404&lt;/error-code&gt;    &lt;location&gt;/NotFound.jsp&lt;/location&gt;&lt;/error-page&gt;&lt;error-page&gt;  通过异常的类型配置error-page。当系统发生java.lang.NullException（即空指针异常）时，跳转到错误处理页面。    &lt;exception-type&gt;java.lang.NullException&lt;/exception-type&gt;    &lt;location&gt;/error.jsp&lt;/location&gt;&lt;/error-page&gt;</code></pre><h3 id="env-entry"><a href="#env-entry" class="headerlink" title="env-entry"></a>env-entry</h3><p>Web环境参数：env-entry元素声明Web应用的环境变量。是将参数传递给Web应用程序的Java代码的集中方式之一，应用程序代码会使用JNDI来查询这些参数。</p><pre><code>&lt;env-entry&gt;  &lt;env-entry-name&gt;minExemptions&lt;/env-entry-name&gt;  &lt;env-entry-type&gt;java.lang.Integer&lt;/env-entry-type&gt; 参数类型，就是java的参数类型，必须用全限定类名  &lt;env-entry-value&gt;1&lt;/env-entry-value&gt;  参数值&lt;/env-entry&gt;&lt;env-entry&gt;  &lt;env-entry-name&gt;foo/name1&lt;/env-entry-name&gt;  &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;  &lt;env-entry-value&gt;value1&lt;/env-entry-value&gt;&lt;/env-entry&gt;&lt;env-entry&gt;  &lt;env-entry-name&gt;foo/bar/name2&lt;/env-entry-name&gt;  &lt;env-entry-type&gt;java.lang.Boolean&lt;/env-entry-type&gt;  &lt;env-entry-value&gt;true&lt;/env-entry-value&gt;&lt;/env-entry&gt;&lt;env-entry&gt;  &lt;env-entry-name&gt;name3&lt;/env-entry-name&gt;  &lt;env-entry-type&gt;java.lang.Integer&lt;/env-entry-type&gt;  &lt;env-entry-value&gt;1&lt;/env-entry-value&gt;&lt;/env-entry&gt;</code></pre><h3 id="Spring如何配置"><a href="#Spring如何配置" class="headerlink" title="Spring如何配置"></a>Spring如何配置</h3><pre><code>&lt;!-- 指定spring配置文件位置 --&gt;    &lt;context-param&gt;       &lt;display-name&gt;myApp&lt;/display-name&gt;     &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;        &lt;!--加载多个spring配置文件 --&gt;        /WEB-INF/applicationContext.xml, /WEB-INF/action-servlet.xml，classpath*:/spring/spring_dependence.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;!-- 定义SPRING监听器，加载spring --&gt;    &lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;    &lt;listener&gt;        &lt;listener-class&gt; org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;    &lt;/listener&gt;&lt;!--单点登出监听器--&gt;&lt;listener&gt;        &lt;listener-class&gt; org.jasig.cas.client.session.SingleSignOutHttpSessionListener&lt;/listener-class&gt;    &lt;/listener&gt;&lt;!--登陆认证, 使用CAS server认证--&gt;&lt;filter&gt;    &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;    &lt;filter-class&gt;org.jasig.cas.client.authentication.AuthenticationFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;CAS Authentication Filter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!--自定义应用servlet启动配置--&gt;&lt;servlet&gt;    &lt;servlet-name&gt;myAppServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.mudaoren.test.web.StartServlet&lt;/servlet-class&gt;    &lt;load-on-startup&gt;100&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet&gt;    &lt;servlet-name&gt;Spring MVC DispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath*:/spring/spring_mvc.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;Spring MVC DispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><h3 id="Mapping规则"><a href="#Mapping规则" class="headerlink" title="Mapping规则"></a>Mapping规则</h3><p>当一个请求发送到servlet容器的时候，容器先会将请求的url减去当前应用上下文的路径作为servlet的映射url，比如我访问的是<a href="http://localhost/test/aaa.html" target="_blank" rel="noopener">http://localhost/test/aaa.html</a> ，我的应用上下文是test，容器会将<a href="http://localhost/test" target="_blank" rel="noopener">http://localhost/test</a> 去掉，剩下的/aaa.html部分拿来做servlet的映射匹配。这个映射匹配过程是有顺序的，而且当有一个servlet匹配成功以后，就不会去理会剩下的servlet了。</p><p><strong>　　其匹配规则和顺序如下：</strong></p><ul><li><p>精确路径匹配。例子：比如servletA 的url-pattern为 /test，servletB的url-pattern为 /*，这个时候，如果我访问的url为<a href="http://localhost/test" target="_blank" rel="noopener">http://localhost/test</a> ，这个时候容器就会先 进行精确路径匹配，发现/test正好被servletA精确匹配，那么就去调用servletA，也不会去理会其他的servlet了。</p></li><li><p>最长路径匹配。例子：servletA的url-pattern为/test/*，而servletB的url-pattern为/test/a/*，此时访问<a href="http://localhost/test/a" target="_blank" rel="noopener">http://localhost/test/a</a> 时，容器会选择路径最长的servlet来匹配，也就是这里的servletB。</p></li><li><p>扩展匹配。如果url最后一段包含扩展，容器将会根据扩展选择合适的servlet。例子：servletA的url-pattern：*.action 以”/’开头和以”/*”结尾的是用来做路径映射的。以前缀”*.”开头的是用来做扩展映射的。所以，为什么定义”/*.action”这样一个看起来很正常的匹配会错？因为这个匹配即属于路径映射，也属于扩展映射，导致容器无法识别。</p></li></ul><h3 id="web-xm中的安全配置"><a href="#web-xm中的安全配置" class="headerlink" title="web.xm中的安全配置"></a>web.xm中的安全配置</h3><p>这个博文中有详细的说明：<a href="https://blog.csdn.net/z59d8m6e40/article/details/72861248" target="_blank" rel="noopener">https://blog.csdn.net/z59d8m6e40/article/details/72861248</a></p><p>参考：</p><blockquote><p>《Tomcat权威指南》<br>《深入剖析Tomcat》<br><a href="http://www.cnblogs.com/cljdream/archive/2013/11/29/3449308.html" target="_blank" rel="noopener">http://www.cnblogs.com/cljdream/archive/2013/11/29/3449308.html</a><br><a href="https://www.cnblogs.com/hellojava/archive/2012/12/28/2835730.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellojava/archive/2012/12/28/2835730.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;web-xml出现的位置&quot;&gt;&lt;a href=&quot;#web-xml出现的位置&quot; class=&quot;headerlink&quot; title=&quot;web.xml出现的位置&quot;&gt;&lt;/a&gt;web.xml出现的位置&lt;/h2&gt;&lt;p&gt;　　tomcat中有两处使用到web.xml配置，一个是$H
      
    
    </summary>
    
      <category term="tomcat" scheme="http://yoursite.com/categories/tomcat/"/>
    
    
      <category term="tomcat，web.xml" scheme="http://yoursite.com/tags/tomcat%EF%BC%8Cweb-xml/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC请求处理流程</title>
    <link href="http://yoursite.com/2018/10/29/Spring%20MVC%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/29/Spring MVC请求处理流程/</id>
    <published>2018-10-28T23:47:55.305Z</published>
    <updated>2018-10-29T00:03:44.100Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/LnG9M8k.png" alt=""></p><p>① 请求离开浏览器，并携带用户的请求信息。首先到达一个单例的前端控制器DispatcherServlet。</p><p>② DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，查询一个或多个处理映射器（handler mapping），获得下一步的Handler（Controller)。</p><p>③ DispatcherServlet 根据上一步获得的Handler，选择一个合适的HandlerAdapter。（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p><p>④ 提取Request中的请求消息，转换成Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><ul><li>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</li><li>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li><li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li><li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li></ul><p>⑤ 控制器执行完成后，产生一些信息，这些信息保存在模型（model）中。但是这些信息不可能直接展示，必须以一个友好的界面（html/jsp）来承载，这个界面就是视图（view）表示的界面。然后将模型和视图名返回给DispatcherServlet。</p><p>⑥ 上一步的视图名标示了一个界面，需要通过视图解析器（ViewResoler）来为view找到对应的视图实现（界面，比如JSP）。</p><p>⑦ 视图使用模型数据进行渲染。</p><p>⑧ 将渲染结果返回给用户。</p><blockquote><p>参考：<br>《Spring In Action》<br><a href="https://www.cnblogs.com/dreamworlds/p/5396112.html" target="_blank" rel="noopener">https://www.cnblogs.com/dreamworlds/p/5396112.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LnG9M8k.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;① 请求离开浏览器，并携带用户的请求信息。首先到达一个单例的前端控制器DispatcherServlet。&lt;/p&gt;
&lt;p&gt;② DispatcherServle
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring MVC，请求处理" scheme="http://yoursite.com/tags/Spring-MVC%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC如何接收请求参数</title>
    <link href="http://yoursite.com/2018/10/27/Spring%20MVC%E5%A6%82%E4%BD%95%E6%8E%A5%E5%8F%97%E5%8F%82%E6%95%B0%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/10/27/Spring MVC如何接受参数请求/</id>
    <published>2018-10-26T23:32:35.027Z</published>
    <updated>2018-10-27T22:54:27.242Z</updated>
    
    <content type="html"><![CDATA[<p>　　当用户与服务器交互时，需要将用户的输入传递到服务端。这时就涉及到Spring MVC控制器接收客户端请求参数。<br>控制器接收客户端请求参数的方式主要包括：</p><ul><li>查询参数</li><li>表单参数</li><li>路径参数</li></ul><hr><h1 id="方式一：查询参数。"><a href="#方式一：查询参数。" class="headerlink" title="方式一：查询参数。"></a>方式一：查询参数。</h1><p>请求中的查询参数作为Controller的方法参数。<br>请求 url：<code>http://localhost:8080/spittles?max=10&amp;count=2</code></p><h2 id="△-利用函数注解-RequestParam接收参数。"><a href="#△-利用函数注解-RequestParam接收参数。" class="headerlink" title="△ 利用函数注解@RequestParam接收参数。"></a>△ 利用函数注解@RequestParam接收参数。</h2><p><strong>后台代码：</strong></p><pre><code>@Controller@RequestMapping(&quot;/spittles&quot;)public class SpittleController{    private static final String MAX_LONG_AS_STRING = &quot;9223372036854775807&quot;;    @Autowired    private SpittleRepository spittleRepository;    @RequestMapping(method = RequestMethod.GET)    public List&lt;Spittle&gt; spittles(            @RequestParam(value = &quot;max&quot;, defaultValue = MAX_LONG_AS_STRING) long max,            @RequestParam(defaultValue = &quot;20&quot;) int count)    {        return spittleRepository.findSpittles(max, count);    }}</code></pre><p>　　上述片段中的@RequestParam如果有value属性，则value值必须与前台的入参名称一致，如果@RequestParam没有value属性，那其后的方法形参必须与前台的入参名称一致。</p><h2 id="△-通过HttpServletRequest来传递参数"><a href="#△-通过HttpServletRequest来传递参数" class="headerlink" title="△ 通过HttpServletRequest来传递参数"></a>△ 通过HttpServletRequest来传递参数</h2><p><strong>后台代码：</strong></p><pre><code>@Controller@RequestMapping(&quot;/spittles&quot;)public class SpittleController{        @Autowired    private SpittleRepository spittleRepository;    @RequestMapping(method = RequestMethod.GET)    public List&lt;Spittle&gt; spittles(HttpServletRequest request)    {        long max = request.getParameter(&quot;max&quot;);        long count = request.getParameter(&quot;count&quot;);        return spittleRepository.findSpittles(max, count);    }}</code></pre><hr><h1 id="方式二：路径变量。"><a href="#方式二：路径变量。" class="headerlink" title="方式二：路径变量。"></a>方式二：路径变量。</h1><p>请求路径中的一部分作为查询参数。<br>请求 url：<code>http://localhost:8080/spittles/1845647</code></p><p>尽管，这个也可以使用如<code>http://localhost:8080/spittles？spittleId=1845647</code>这样的rul来请求，但是一般在使用GET方法获取资源时，最合适的方式是通过路径，而不是参数。如果这里改成第二种url，则本质上是通过HTTP发起的RPC。</p><pre><code>@Controller@RequestMapping(&quot;/spittles&quot;)public class SpittleController{        @Autowired    private SpittleRepository spittleRepository;    @RequestMapping(value = &quot;/{spittleId}&quot;, method = RequestMethod.GET)    public String spittle(@PathVariable(&quot;spittleId&quot;) long spittleId, Model model)    {        model.addAttribute(spittleRepository.findOne(spittleId));        return &quot;spittle&quot;;    }}</code></pre><p>@RequestMapping(value = “/{spittleId}”, method = RequestMethod.GET)中的spittleId是一个占位符，这个占位符的名字可以随意取，但是这个占位符在url路径中的位置必须与请求url中的位置保持一致，占位符必须使用大括号“{}”表示。另外，这个占位符的名字与注解PathVariable的值spittleId是一致的，如果注解PathVariable不带参数，那么spittle方法的一个参数spittleId必须与占位符的名字一致。</p><hr><h1 id="方式三：表单参数。"><a href="#方式三：表单参数。" class="headerlink" title="方式三：表单参数。"></a>方式三：表单参数。</h1><p>表单参数用于接收大量的用户输入参数，以对输入参数完成处理。</p><h2 id="△-使用对象传递参数"><a href="#△-使用对象传递参数" class="headerlink" title="△ 使用对象传递参数"></a>△ 使用对象传递参数</h2><pre><code>@Controller@RequestMapping(&quot;/spittles&quot;)public class SpittleController{    @Autowired    private SpittleRepository spittleRepository;    @RequestMapping(value = &quot;/register&quot;, method = GET)    public String showRegistrationForm()    {        return &quot;registerForm&quot;;    }    @RequestMapping(value = &quot;/register&quot;, method = POST)    public String processRegistration(@Valid Spitter spitter, Errors errors)    {        if (errors.hasErrors())        {            return &quot;registerForm&quot;;        }        spitterRepository.save(spitter);        return &quot;redirect:/spitter/&quot; + spitter.getUsername();    }    @RequestMapping(value = &quot;/{username}&quot;, method = GET)    public String showSpitterProfile(@PathVariable String username, Model model)    {        Spitter spitter = spitterRepository.findByUsername(username);        model.addAttribute(spitter);        return &quot;profile&quot;;    }}</code></pre><p>　　方法showRegistrationForm()和processRegistration(@Valid Spitter spitter, Errors errors)所接收的url都是<strong>“/spittles/register”</strong>，<strong>前者用于接收GET查询</strong>，并返回一个“registerForm”视图，<strong>后者用于接收POST提交的表单</strong>，并重定向到”/spitter/“ + spitter.getUsername()视图。</p><p>　　也就是重定向（redirect）到showSpitterProfile(@PathVariable String username, Model model)方法所表示的视图，这里的Model中保存的GET请求获取到的结果参数集。</p><p>　　本例中的接收用户提交表单的方法processRegistration(@Valid Spitter spitter, Errors errors)，形参包含一个<strong>Spitter对象</strong>，这个对象中的属性字段与用户HTML中填写的参数名是对应的，如下：</p><pre><code>public class Spitter {  private Long id;  @NotNull  @Size(min=5, max=16)  private String username;  @NotNull  @Size(min=5, max=25)  private String password;  @NotNull  @Size(min=2, max=30)  private String firstName;  @NotNull  @Size(min=2, max=30)  private String lastName;  @NotNull  @Email  private String email;  //setter&amp;getter方法  ... ...}</code></pre><p><strong>前台代码form中submit后没有action属性，所以submit请求的url跟上一步GET到这个HTML页面的url是一致的，即“/spittles/register”。</strong></p><pre><code>&lt;html&gt;      &lt;head&gt;        &lt;title&gt;Spitter&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;               href=&quot;&lt;c:url value=&quot;/resources/style.css&quot; /&gt;&quot; &gt;      &lt;/head&gt;     &lt;body&gt;        &lt;h1&gt;Register&lt;/h1&gt;        &lt;form method=&quot;POST&quot;&gt;          First Name: &lt;input type=&quot;text&quot; name=&quot;firstName&quot; /&gt;&lt;br/&gt;          Last Name: &lt;input type=&quot;text&quot; name=&quot;lastName&quot; /&gt;&lt;br/&gt;          Email: &lt;input type=&quot;email&quot; name=&quot;email&quot; /&gt;&lt;br/&gt;          Username: &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br/&gt;          Password: &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br/&gt;          &lt;input type=&quot;submit&quot; value=&quot;Register&quot; /&gt;        &lt;/form&gt;     &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="△-直接传递参数"><a href="#△-直接传递参数" class="headerlink" title="△ 直接传递参数"></a>△ 直接传递参数</h2><p>字段作为参数进行传递。以方法processRegistration为例<br><strong>后台代码：</strong></p><pre><code>@Controller@RequestMapping(&quot;/spittles&quot;)public class SpittleController{    @Autowired    private SpittleRepository spittleRepository;    @RequestMapping(value = &quot;/register&quot;, method = POST)    public String processRegistration(HttpServletRequest request,ModelMap map,String username,String password,String firstName,String lastName, String email)    {        Spitter spitter = new Spitter();        spitter.setUsername(username);        spitter.setPassword(password);        spitterRepository.save(spitter);        return &quot;redirect:/spitter/&quot; + spitter.getUsername();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　当用户与服务器交互时，需要将用户的输入传递到服务端。这时就涉及到Spring MVC控制器接收客户端请求参数。&lt;br&gt;控制器接收客户端请求参数的方式主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询参数&lt;/li&gt;
&lt;li&gt;表单参数&lt;/li&gt;
&lt;li&gt;路径参数&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>基于dubbo的微服务部分容器化部署</title>
    <link href="http://yoursite.com/2018/10/22/%E5%9F%BA%E4%BA%8Edubbo%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E5%88%86%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/10/22/基于dubbo的微服务部分容器化部署/</id>
    <published>2018-10-22T15:20:07.273Z</published>
    <updated>2018-11-01T23:44:57.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vmall微服务特点"><a href="#Vmall微服务特点" class="headerlink" title="Vmall微服务特点"></a><table><tr><td bgcolor="#54FF9F"><strong>Vmall微服务特点</strong></td></tr></table></h2><ul><li>Vmall采用基于dubbo+zookeeper的RPC微服务化架构方案，划分40多个微服务。缓存层采用redis、memcache，持久层采用mysql，消息框架使用rocketMQ。</li><li>微服务间即存在RPC调用，又包含部分http调用。</li><li>生产环境同时部署在华为公有云的北京、廊坊和广州三地，三地间通过专线建立连接。</li></ul><h2 id="容器化策略"><a href="#容器化策略" class="headerlink" title="容器化策略"></a><table><tr><td bgcolor="#54FF9F"><strong>容器化策略</strong></td></tr></table></h2><ul><li>将服务分成有状态服务和无状态服务，因对数据要求较高，所以数据库等有状态服务暂时保持部署在ECS，仅对无状态服务实行容器化。</li><li>分步骤实施，初始阶段选取两个微服务进行容器化灰度试点，保证容器化的风险可控。</li><li>对docker swarm、k8s、mesos+Marathon、华为公有云CCE和华为IT平台的HIC的对比，鉴于成本、可靠性、稳定性等因素，决定采用华为公有云CCE。</li></ul><h2 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a><table><tr><td bgcolor="#54FF9F"><strong>面临的问题</strong></td></tr></table></h2><p>因为华为云的CCE是基于K8s的云服务引擎，很好的保证了高可用、弹性伸缩、监控告警、滚动升级、镜像管理等功能，所以我们只需要应对一下几个关键问题：</p><ul><li>统一配置中心，容器化需要统一配置中心的支持。</li><li>日志采集，需要解决日志的集中采集和处理问题。</li><li>部分服务的容器化，需要解决容器服务的dubbo注册问题和容器服务与非容器服务之间的网络通信问题。</li></ul><h2 id="实施过程"><a href="#实施过程" class="headerlink" title="实施过程"></a><table><tr><td bgcolor="#54FF9F"><strong>实施过程</strong></td></tr></table></h2><p>1.统一配置中心。选用携程的apollo开源组件。<br>2.日志采集与处理。将应用日志输出到宿主机目录，通过统一开源组件收集。<br>3.容器部署：<br>　步骤一 镜像制作</p><p>开机启动脚本</p><pre><code>#!/bin/bashif [[&quot;${ELB_IP}&quot;x!=&quot;&quot;x]]&amp;&amp;[SERVICE_NAME] ; then    cp /etc/hosts /etc/hosts.temp    sed -i &apos;s/^.*$&apos;{SERVICE_NAME}&apos;/&apos;${ELB_IP}&apos; $&apos;{SERVICE_NAME}&apos;/g&apos; /etc/hosts.temp    cat /etc/hosts.temp &gt; /etc/hostselse    echo &quot;Please set env SERVICE_NAME and ELB_IP&quot;    return1fisource /etc/profilebash /root/myApp/bin/start.sh run</code></pre><p>　步骤二 镜像上传<br>　步骤三 创建cce集群<br>　步骤四 创建工作负载<br>　步骤五 创建负载均衡<br>　步骤六 为工作负载创建访问方式<br>  步骤七 域名访问方式<br>　　　　四层负载均衡和七层负载均衡</p><p>遇到的问题？<br><strong>1）跨k8s集群的docker与zookeeper间的通信问题！</strong><br><strong>dubbo注册原理：</strong><br>dubbo服务提供者在注册服务到zookeeper时，如果dubbo:protocol中配置了本机IP和port会使用配置的参数到zookeeper注册，本机则会监听该port，如果服务的dubbo:protocol没有配置过本机IP和port时，dubbo服务提供者将通过网卡自己获取本机IP，同时port默认取20880，docker中的dubbo服务会获取到docker的私有ip。<br><strong>问题：</strong><br>实际试点时，dubbo和zookeeper是在单独的虚拟机上，并不属于k8s集群，而服务提供者在docker中，此时服务提供者将docker私有IP注册到zookeeper上，服务提供者定时向zookeeper发送TCP心跳保持连接，当消费者查找到这个docker的Ip，并去连接时就会出现找不到IP的问题，因为docker的私有Ip不能暴露到pod外。<br><strong>解决方法：</strong><br>方法一 通过iptables路由规则，通过多层桥接配置实现网络连通。<br>方法二 通过配置私网四层负载均衡，将负载均衡和docker做IP端口映射，并将负载均衡IP配置到dubbo:protocol中。消费者会访问负载均衡IP和端口，进而找到docker中的应用。在公有云上四层负载均衡是免费的，建议每个服务申请一个负载均衡，这样端口配置会更灵活。这里需要配套修改镜像，使用环境变量的方式将负载均衡IP替换docker的hosts文件中的私有IP，并在k8s的工作负载上配置环境变量。这个方法还存在一个缺点，相同负载均衡对应的相同服务注册到zookeeper上时，显示是完全相同的两条，无法区分。<br>方法三 升级dubbo到最新的2.6.4版本，该版本增加了对容器化的支持，它将注册IP、port与监听IP、port做了区分，向zookeeper注册时可以使用负载均衡的参数，docker服务本地监听仍然使用本地私有IP和port。</p><p>日志输出问题<br>配置中心问题<br><a href="https://blog.csdn.net/liu306487103/article/details/52221986" target="_blank" rel="noopener">https://blog.csdn.net/liu306487103/article/details/52221986</a><br><a href="https://www.kancloud.cn/good-rain/micro-services/248954" target="_blank" rel="noopener">https://www.kancloud.cn/good-rain/micro-services/248954</a><br><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D</a></p><p>VPC与子网<br>k8s<br>docker</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vmall微服务特点&quot;&gt;&lt;a href=&quot;#Vmall微服务特点&quot; class=&quot;headerlink&quot; title=&quot;Vmall微服务特点&quot;&gt;&lt;/a&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#54FF9F&quot;&gt;&lt;strong&gt;Vmall微服务特点&lt;/str
      
    
    </summary>
    
      <category term="容器化" scheme="http://yoursite.com/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
      <category term="容器化" scheme="http://yoursite.com/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="dubbo" scheme="http://yoursite.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Paxos</title>
    <link href="http://yoursite.com/2018/10/12/Paxos%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/12/Paxos算法/</id>
    <published>2018-10-11T23:28:05.438Z</published>
    <updated>2018-11-01T15:24:52.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-拜占庭将军问题"><a href="#1-拜占庭将军问题" class="headerlink" title="1. 拜占庭将军问题"></a>1. 拜占庭将军问题</h2><p>拜占庭位于如今的土耳其的伊斯坦布尔，是东罗马帝国的首都。由于当时拜占庭罗马帝国国土辽阔，为了防御目的，因此每个军队都分隔很远，将军与将军之间只能靠信差传消息。 在战争的时候，拜占庭军队内所有将军和副官必须达成一致的共识，决定是否有赢的机会才去攻打敌人的阵营。但是，在军队内有可能存有叛徒和敌军的间谍，左右将军们的决定又扰乱整体军队的秩序。在进行共识时，结果并不代表大多数人的意见。这时候，在已知有成员谋反的情况下，其余忠诚的将军在不受叛徒的影响下如何达成一致的协议，拜占庭问题就此形成。【百度百科】</p><p>拜占庭将军问题是一个协议问题，拜占庭帝国军队的将军们必须全体一致的决定是否攻击某一支敌军。问题是这些将军在地理上是分隔开来的，并且将军中存在叛徒。叛徒可以任意行动以达到以下目标：欺骗某些将军采取进攻行动；促成一个不是所有将军都同意的决定，如当将军们不希望进攻时促成进攻行动；或者迷惑某些将军，使他们无法做出决定。如果叛徒达到了这些目的之一，则任何攻击行动的结果都是注定要失败的，只有完全达成一致的努力才能获得胜利。</p><p>拜占庭假设是对现实世界的模型化，由于硬件错误、网络拥塞或断开以及遭到恶意攻击，计算机和网络可能出现不可预料的行为。拜占庭容错协议必须处理这些失效，并且这些协议还要满足所要解决的问题要求的规范。这些算法通常以其弹性t作为特征，t表示算法可以应付的错误进程数。</p><p>因为存在错误进程，因此拜占庭将军问题只有在n ≥ 3t+1时才有解，其中n是系统中进程的总数。</p><h2 id="2-希腊议会制度"><a href="#2-希腊议会制度" class="headerlink" title="2. 希腊议会制度"></a>2. 希腊议会制度</h2><p>在古希腊一个叫Paxos的小岛，岛上采用议会的形式通过法令，议会中的议员通过信使进行消息的传递。议员和信使都是兼职的，他们随时可能会离开议会，并且信使可能会重复传递消息，也可能一去不复返。因此，议会协议要保证在这种情况下法令仍然能够正确的产生，并且不会出现冲突。</p><p>Paxos是一种为提高分布式系统容错的一致性算法，意在解决拜占庭将军问题。</p><h2 id="3-Paxos算法详解"><a href="#3-Paxos算法详解" class="headerlink" title="3. Paxos算法详解"></a>3. Paxos算法详解</h2><h3 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h3><p>假设有一组可以提出提案的进程集合，那么对于一个一致性算法来说需要保证以下几点：</p><ul><li>在这些被提出的提案中，只有一个会被选定。</li><li>如果提案没有被提出，就不会有被选定的提案。</li><li>当一个提案被选定后，进程应该可以获取被选定的提案信息。</li></ul><p>一致性的安全需求有以下几点：</p><ul><li>只有被提出的提案才能被选定。</li><li>只能有一个值被选定。</li><li>如果某个进程认为某提案被选定了，那么这个提案必须是真的被选定的那个。</li></ul><h3 id="3-2-算法陈述"><a href="#3-2-算法陈述" class="headerlink" title="3.2 算法陈述"></a>3.2 算法陈述</h3><p>算法的推导过程比较复杂，这里不做解释。通过算法的推导，我们直接看结论。</p><ul><li><p><strong>算法的两阶段提交过程</strong><br><strong>阶段一</strong><br>  1）Proposer选择一个提案编号M，然后向Acceptor的某个超过半数的子集成员发送编号为M的Prepare请求。 </p><p>  2）Proposer选择一个提案编号为M的Prepare请求，且编号M大于该Acceptor已经响应的所有Prepare请求的编号，那么它就会将它已经批准过的最大编号的提案作为响应反馈给Proposer，同时该Acceptor会承诺不会再批准任何编号小于M的提案。</p><p>  <strong>阶段二</strong><br>  1）如果Proposer收到来自半数以上的Acceptor对于其发出的编号为M的Prepare请求的响应，那么它就会发送一个针对[M,V]提案的Accept请求给Acceptor。注意，V的值就是收到的响应中编号最大的提案的值，如果响应中不包含任何提案，那么它就是任意值。</p><p>  2）如果Acceptor收到这个针对[M,V]提案的Accept请求，只要该Acceptor尚未对编号大于M的Prepare请求作出响应，他就可以通过这个提案。</p></li><li><p><strong>算法的提案获取过程</strong><br>如何让Learner获取提案？</p><p>  <strong>方案一</strong><br>  Learner获取一个已经被选定的提案的前提是，该提案已经被半数以上的Acceptor批准。因此，最简单的做法就是一旦Acceptor批准了一个提案，就将该提案发送给所有Learner。</p><p>  这个方案需要让每个Acceptor与所有Learner逐个进行一次通信，通信次数至少为二者个数的乘积。</p><p>  <strong>方案二</strong><br>  所有的Acceptor将它们对提案的批准情况,统一发送给一个特定的Learner(主Learner)。主Learner负责通知其他Learner。</p><p>  这个方案的缺点是，主Learner故障时会出现问题。</p><p>  <strong>方案三</strong><br>  对方案二进行改进，主Learner是一个特定的Learner集合，该集合中的每个Learner都可以在一个提案被选定后通知所有其他Learner。</p></li></ul><ul><li><strong>如何保持算法的活性</strong><br>  为保证Paxos算法流程的可持续性，避免陷入死循环，必须选择一个主Proposer，并规定只有主Proposer才能提出议案。这个主Proposer提出的最高编号的提案时会被通过。如果这个Proposer发现当前算法流程中已经有一个编号更大的天被提出或正在接受批准，那么它会丢弃当前编号较小的提案，并最终选出一个编号足够大的提案。</li></ul><p>Paxos引入了“少数服从多数”的概念，解决了单点故障、脑裂和无限期等待问题，并且支持分布式节点角色之间的轮换，是目前最优秀的分布式一致性算法之一。<br>目前，分布式锁服务Google Chubby，数据库Hypertable和zookeeper中都使用了Paxos来解决分布式一致性问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-拜占庭将军问题&quot;&gt;&lt;a href=&quot;#1-拜占庭将军问题&quot; class=&quot;headerlink&quot; title=&quot;1. 拜占庭将军问题&quot;&gt;&lt;/a&gt;1. 拜占庭将军问题&lt;/h2&gt;&lt;p&gt;拜占庭位于如今的土耳其的伊斯坦布尔，是东罗马帝国的首都。由于当时拜占庭罗马帝国国
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式一致性算法" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/"/>
    
      <category term="拜占庭将军问题，希腊议会制度" scheme="http://yoursite.com/tags/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98%EF%BC%8C%E5%B8%8C%E8%85%8A%E8%AE%AE%E4%BC%9A%E5%88%B6%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>BASE理论</title>
    <link href="http://yoursite.com/2018/10/11/BASE%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/10/11/BASE理论/</id>
    <published>2018-10-11T15:27:43.197Z</published>
    <updated>2018-10-14T05:37:42.776Z</updated>
    
    <content type="html"><![CDATA[<p>BASE理论是基本可用（Basically Available）、软状态（Soft state）、最终一致性（Eventually），是eBay架构师Dan Pritchett提出的。它是基于CAP理论发展而来，主要是针对大规模互联网系统分布式实践的总结。基本思想史即使无法做到强一致性，也要达到最终一致性。</p><ul><li>基本可用<br>系统在出现不可预知故障时，允许损失部分可用性，以保证整体可用性。比如损失响应时间换取最终结果，或是出现流量高峰时引导用户到降级页面。</li><li>弱状态<br>允许系统中的数据存在中间状态，而这种中间状态不会影响整体可用性。比如数据在不同系统节点间同步时存在延时的情况。</li><li>最终一致性<br>系统中所有数据副本，经过一段时间同步后，最终能达到一个一致状态。</li></ul><p>最终一致性的几种变种：</p><ul><li>因果一致性（Causal consistency）<br>进程A更新数据后通知进程B，则B访问该数据时，获取的都是被A更新后的数据。与A无因果关心的C访问数据时，则没有限制。</li><li>读己之所写（Read you write）<br>进程A更新一个数据项之后，它自己总能访问更新过的最新值，看不到旧值。</li><li>会话一致性（Session consistency）<br>将系统数据的访问过程限定在一个会话当中，保证同一个有效会话中实现“读己之所写”的一致性。</li><li>单调读一致性（Monotonic read consistency）<br>如果一个进程从系统中读取出一个数据项的某个值后，那么系统对于该进程后续的任何数据访问都不应该返回更旧的值。</li><li>单调写一致性（Monotonic write consistency）<br>保证来自同一个进程的写操作被顺序地执行。</li></ul><p>想一想数据库的主从模式属于哪一种类型？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BASE理论是基本可用（Basically Available）、软状态（Soft state）、最终一致性（Eventually），是eBay架构师Dan Pritchett提出的。它是基于CAP理论发展而来，主要是针对大规模互联网系统分布式实践的总结。基本思想史即使无法
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式算法" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2PC与3PC</title>
    <link href="http://yoursite.com/2018/10/11/2PC%E5%92%8C3PC/"/>
    <id>http://yoursite.com/2018/10/11/2PC和3PC/</id>
    <published>2018-10-10T23:39:52.378Z</published>
    <updated>2018-11-01T15:17:48.414Z</updated>
    
    <content type="html"><![CDATA[<p>在分布式系统中，当一个事务操作需要跨越多个分布式节点时，为了保证事务处理的ACID特性，需要引入一个“协调者”的组件来统一调度所有分布式节点的执行逻辑，被调度的分布式节点称为“参与者”。<br>协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。这个思想衍生出二阶段提交和三阶段提交两种协议。</p><h2 id="2PC（Two-Phase-Commit）"><a href="#2PC（Two-Phase-Commit）" class="headerlink" title="2PC（Two-Phase Commit）"></a>2PC（Two-Phase Commit）</h2><p>目的是为了保证分布式系统架构下所有节点在进行事务处理过程中能够保持原子性和一致性而设计的算法。绝大部分关系型数据库采用的都是二阶段提交协议来完成分布式事务的处理。</p><p><strong>协议说明</strong></p><ul><li>阶段一：提交事务请求<ol><li>事务询问。<br>协调者向所有参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应。</li><li>执行事务。<br>各参与者执行事务操作，并将Undo和Redo信息记入事务日志中。</li><li>各参与者向协调者反馈事务询问的响应。<br>如果参与者成功执行了事务操作，则反馈给协调者Yes响应，表示事务可执行；否则就给协调者反馈NO响应，表示事务不可以执行。</li></ol></li></ul><p>这个阶段通常也称为“投票阶段”。</p><ul><li><p>阶段二：执行事务提交<br>协调者根据各参与者的反馈情况决定是否进行事务提交操作。包含两种可能：</p><p><strong>执行事务提交</strong><br>当所有参与者都反馈Yes响应时，协调者就会执行事务提交。执行过程如下</p><ol><li>发送提交请求<br>协调者向所有参与者发送Commit请求。</li><li>事务提交<br>参与者收到Commit请求后正式执行事务提交操作，在完成提交后释放整个事务执行期间占用的事务资源。</li><li>返回事务提交结果<br>向协调者发送Ack消息。</li><li>完成事务<br>协调者接收到所有参与者反馈的Ack消息后，完成事务。</li></ol><p><strong>中断事务</strong><br>当任何一个参与者向协调者反馈NO，或超时后协调者仍未收到某些参与者的响应，就会中断事务。</p><ol><li>发送事务回滚请求。<br>协调者向所有参与者发送Rollback请求。</li><li>事务回滚。<br>参与者接收到Rollback后，会利用其在阶段一种记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li><li>反馈事务回滚结果。<br>参与者在完成事务回滚之后，向协调者发送Ack消息。</li><li><p>中断事务。<br>协调者收到所有参与者的Ack消息后，完成事务中断。</p><p><img src="https://i.imgur.com/uVAXMiZ.png" alt=""></p><p><img src="https://i.imgur.com/WYubkPJ.png" alt=""></p></li></ol></li></ul><p><strong>优缺点</strong><br>优点：原理简单，实现方便<br>缺点：同步阻塞、单点问题、脑裂、保守</p><ul><li><p>同步阻塞<br>提交的执行过程中，所以参与者都需要等待其他参与者的响应，无法执行其他任何操作。限制性能。这是最大的问题。</p></li><li><p>单点问题<br>协调者如果出现问题，整个系统提交流程将无法进行，如果恰好在阶段二故障，则参与者将一直锁定事务资源状态，无法继续工作。</p></li><li><p>数据不一致（脑裂）<br>阶段二时，若协调者已向参与者发送Commit，此时发生局部网络异常或协调者只发送了部分Commit后自身崩溃，则只有部分参与者接收到Commit请求。就会出现部分参与者提交，部分未提交，导致数据不一致现象。</p></li><li><p>保守<br>协调者指示参与者进行事务提交询问的过程中，参与值故障无法响应时，协调者只能通过超时判断是否中断。缺少一个完善的容错机制，任意一个节点失败都会导致整个事务的失败。</p></li></ul><p>2PC协议因为其阻塞的特性，在执行过程中需要锁住其他更新，且容错不够好，所以对其支持的成本较高。分布式系统用2PC协议更多的是处理多个数据分片操作的原子性。而同一个数据分片的多个副本之间的数据一致性则更多的使用Paxos来实现。</p><h2 id="3PC-Three-Phase-Commit"><a href="#3PC-Three-Phase-Commit" class="headerlink" title="3PC(Three-Phase Commit)"></a>3PC(Three-Phase Commit)</h2><p>三阶段提交协议，对二阶段提交协议的不足进行了改进。</p><p><strong>协议说明</strong></p><p>其将二阶段提交的“提交事务请求”过程一分为二，形成了由CanCommit、PreCommit、do Commit三个阶段组成的事务处理协议。<br><img src="https://i.imgur.com/oaKJeoh.png" alt=""></p><ul><li><p>阶段一：CanCommit</p><ol><li><p>事务询问<br>协调者向所有参与者发送一个包含事务内容的canCommit请求，询问是否可以执行事务提交操作，并开始等待参与者响应。</p></li><li><p>各参与者向协议者反馈事务询问响应<br>参与者受到canCommit请求后，正常情况下，如果认为可以执行事务，则返回Yes响应，并进入预备状态，否则反馈No响应。</p></li></ol></li><li><p>阶段二：PreCommit<br>两种可能的操作：</p><p><strong>执行事务预提交</strong><br>假如协调者收到所有的响应Yes，则会执行事务预提交。</p><ol><li>发送预提交请求<br>协调者向所有参与者发出preCommit请求，并进入Prepared阶段。</li><li>事务预提交<br>参与者收到preCommit后，执行事务操作，并将Undo和Redo信息记录到事务日志中。</li><li>各参与值向协调者反馈事务执行的响应<br>如果参与者执行了事务操作，就会给协调者反馈Ack响应，同时等待最终的指令：提交（commit）或中止（abort）。</li></ol><p><strong>中断事务</strong><br>假如任何一个参与者反馈的是No响应，或者超时未响应，那么协调者就会中断事务。</p><ol><li>发送中断请求<br>协调者向所有参与者发送abort请求。</li><li>中断事务<br>无论收到来自协调者的abort请求，或是等待协调者请求过程中出现超时，参与者都会中断事务。</li></ol></li><li><p>阶段三：doCommit<br>进行真正的事务提交操作，存在两种情况：</p><p>  <strong>执行提交</strong></p><ol><li>发送提交请求<br>协调者收到所有响应者的Ack响应，他将从“预提交”状态转化到“提交”状态，并向所有参与者发送doCommit请求。</li><li>执行事务提交<br>参与者收到doCommit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li><li>反馈事务提交结果<br>参与者在完成事务提交之后，向协调者发送Ack消息。</li><li>完成事务<br>协调者接收到所有参与者的Ack消息后，完成事务。</li></ol><p><strong>中断事务</strong><br>任意一个参与者反馈No响应，或协调者等待超时后，协调者就会中断事务。</p><ol><li>发送中断请求<br>协调者向所有参与者节点发送abort请求。</li><li>事务回滚<br>参与者接收到abort请求后利用在阶段二中的Undo信息来执行回滚操作，并在完成回滚后释放在整个事务执行期间占用的资源。</li><li>反馈事务回滚结果<br>参与者完成事务回滚后，向协调者发送Ack消息。</li><li>中断事务<br>协调者接收到所有参与者反馈的Ack消息后，中断事务。</li></ol></li></ul><p>在阶段三中可能存在两种故障：</p><ul><li>协调者出现问题。</li><li>协调者和参与者之间的网络出现故障。</li></ul><p>无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的doCommit或abort请求，针对这样的异常情况，参与者都会在等待超时后，继续进行事务提交。</p><p><strong>优缺点</strong><br>优点：解决了二阶段提交参与者无限期阻塞的问题，并且在出现单点故障后能继续达成一致。<br>缺点：在第三阶段，如果参与者没有接收到协调者发出的abort请求，那超时后依然会自动完成事务提交，必然出现一致性问题。另外，3PC增加了交互的次数，降低了性能。</p><p>3PC保证了CAP理论中的C和A，但是无法保证P——分区容错性，在实际操作中极少使用3PC。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在分布式系统中，当一个事务操作需要跨越多个分布式节点时，为了保证事务处理的ACID特性，需要引入一个“协调者”的组件来统一调度所有分布式节点的执行逻辑，被调度的分布式节点称为“参与者”。&lt;br&gt;协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。这个思
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式算法" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ACID理论</title>
    <link href="http://yoursite.com/2018/10/10/ACID/"/>
    <id>http://yoursite.com/2018/10/10/ACID/</id>
    <published>2018-10-09T23:38:41.033Z</published>
    <updated>2018-10-14T05:44:49.999Z</updated>
    
    <content type="html"><![CDATA[<p>ACID是事务的四个特征，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。</p><ul><li>原子性（Atomicity）<br>事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现两种状态：全部执行成功、全部不执行。</li><li>一致性（Consistency）<br>事务的执行不能破坏数据的完整性和一致性。数据在所有应用、服务和数据库中的状态必须是一致的，并且是无缺失的。</li><li><p>隔离性（Isolation）<br>并发环境中，不同事务之间是隔离的，相互独立，无干扰。SQL规范中隔离性有4中级别：未授权读取、授权读取、可重复读取、串行化。<br><img src="https://i.imgur.com/CLMAV6s.png" alt=""></p></li><li><p>持久性（Durability）<br>事务一旦提交，其变更的数据的状态就会永久保存。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ACID是事务的四个特征，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）&lt;br&gt;事务必须是一个原子的操作序列单元。事务中包含的各项操
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式算法" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CAP理论</title>
    <link href="http://yoursite.com/2018/09/12/CAP%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/09/12/CAP理论/</id>
    <published>2018-09-12T15:36:58.684Z</published>
    <updated>2018-10-14T05:37:50.622Z</updated>
    
    <content type="html"><![CDATA[<p>分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition rolerance）这三项基本需求，最多只能同时满足两种。</p><ul><li>一致性：分布式环境中，数据在多个副本间保持一致。数据在两个节点上存在副本，数据在一个节点上更新后，在另一个节点上能马上读取到新的值（强一致性或严格一致性）。</li><li>可用性：对于用户的操作，总能在有限时间内返回结果。</li><li>分区容错性：分布式系统在遇到任何网络分区发生故障时，仍然能保证对外提供满足一致性和可用性的服务，除非是整个网络故障。</li></ul><p><strong>CAP理论示意图</strong><br><img src="https://i.imgur.com/Hujjfja.png" alt=""></p><p><strong>CAP理论应用</strong><br><img src="https://i.imgur.com/3wlzQjE.png" alt=""></p><p>既然是分布式系统，肯定是能满足分区容错性的，特别是现在的微服务系统。所以设计师往往会在一致性（Consistency）和可用性（Availability）之间抉择。</p><p><em>参考《从PAXOS到ZOOKEEPER分布式一致性原理与实践》</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式系统不可能同时满足一致性（Consistency）、可用性（Availability）、分区容错性（Partition rolerance）这三项基本需求，最多只能同时满足两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一致性：分布式环境中，数据在多个副本间保持一致。数据在两个节点
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式算法" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引</title>
    <link href="http://yoursite.com/2018/09/12/%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/09/12/索引分类/</id>
    <published>2018-09-11T16:03:58.217Z</published>
    <updated>2018-10-14T05:38:49.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><ul><li>按照字段个数划分：单列索引、组合索引</li><li>按照唯一性划分：普通索引、唯一索引</li><li>MyISAM特殊索引：全文索引（char、varchar、text类型的列，不支持多列，用于全文搜索）、空间索引（非空字段）</li></ul><h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2><p>方法一：创建表时创建</p><pre><code>CREATE TABLE &lt;table_name&gt; [col_name data_type][UNIQUE|FULLTEXT|SPATIAL][INDEX|KEY][index_name](col_name[length],...)[ASC|DESC]</code></pre><ul><li>UNIQUE|FULLTEXT|SPATIAL 均为可选，分别表示唯一索引、全文索引、空间索引。</li><li>INDEX|KEY 含义相同均指创建索引。</li><li>index_name为索引名，不指定时与列名相同。</li><li>col_name要创建索引的列名。</li><li>length可选，表示索引长度，只有字符串类型的字段才可以指定。</li><li>ASC|DESC可选，表示升序还是降序。</li></ul><p>方法二：已存在的表上创建索引</p><pre><code>ALTER TABLE &lt;table_name&gt; ADD [UNIQUE|FULLTEXT|SPATIAL][INDEX|KEY][index_name](col_name[length],...)[ASC|DESC]CREATE [UNIQUE|FULLTEXT|SPATIAL][INDEX|KEY][index_name] ON &lt;table_name&gt;(col_name[length],...)[ASC|DESC]</code></pre><h2 id="索引删除"><a href="#索引删除" class="headerlink" title="索引删除"></a>索引删除</h2><p>方法一：ALTER语句删除</p><pre><code>ALTER TABLE DROP INDEX &lt;index_name&gt;</code></pre><p>方法二：DROP语句删除</p><pre><code>DROP INDEX &lt;index_name&gt; ON &lt;table_name&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引分类&quot;&gt;&lt;a href=&quot;#索引分类&quot; class=&quot;headerlink&quot; title=&quot;索引分类&quot;&gt;&lt;/a&gt;索引分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;按照字段个数划分：单列索引、组合索引&lt;/li&gt;
&lt;li&gt;按照唯一性划分：普通索引、唯一索引&lt;/li&gt;
&lt;li&gt;M
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql基础" scheme="http://yoursite.com/tags/mysql%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL性能优化一——减少数据库交互次数</title>
    <link href="http://yoursite.com/2018/09/12/SQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%80%E2%80%94%E2%80%94%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%A4%E4%BA%92%E6%AC%A1%E6%95%B0/"/>
    <id>http://yoursite.com/2018/09/12/SQL性能优化一——减少数据库交互次数/</id>
    <published>2018-09-11T16:00:27.655Z</published>
    <updated>2018-10-14T05:38:26.775Z</updated>
    
    <content type="html"><![CDATA[<p>把多条SQL语句合并为一条，可减少数据库交互次数，提高性能，这是一种简单的优化改进。</p><p><strong>创建表t_user</strong></p><pre><code>CREATE TABLE `t_user` (　　`id` tinyint(10) UNSIGNED AUTO_INCREMENT NOT NULL,　　`name` varchar(255) DEFAULT NULL,　　`age` int(10) DEFAULT NULL,　　`updatetime` datetime DEFAULT NULL,　　INDEX index_name(name),) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><h2 id="1-整合DDL语句"><a href="#1-整合DDL语句" class="headerlink" title="1 整合DDL语句"></a>1 整合DDL语句</h2><p>多条的写法：</p><pre><code>ALTER table t_user ADD COLUMN uid TINYINT UNSIGNED;ALTER table t_user ADD UNIQUE INDEX (uid); ALTER table t_user DROP INDEX index_name, ADD INDEX index_name_age (name, age);ALTER TABLE t_user ADD PRIMARY KEY (id);</code></pre><p>合并为一条：</p><pre><code>ALTER TABLE t_user ADD COLUMN uid TINYINT UNSIGNED,　ADD UNIQUE INDEX (uid),　DROP INDEX index_name,　ADD INDEX index_name_age (NAME, age),　ADD PRIMARY KEY (id);</code></pre><h2 id="2-整合DML语句"><a href="#2-整合DML语句" class="headerlink" title="2 整合DML语句"></a>2 整合DML语句</h2><h3 id="2-1-INSERT的整合"><a href="#2-1-INSERT的整合" class="headerlink" title="2.1 INSERT的整合"></a>2.1 INSERT的整合</h3><pre><code>INSERT INTO &lt; table_name &gt; (　　　　columnname1,　　　　columnname2 ,...)VALUES(    　　columnvalue1,    　　columnvalue2 ,...) ,    ..., (        columnvalue1,        columnvalue2 ,...);</code></pre><p><strong>整合前：</strong></p><pre><code>INSERT INTO t_user (id, name, age) VALUES (1, &apos;张三丰&apos;, 200);INSERT INTO t_user (id, name, age) VALUES  (2, &apos;张无忌&apos;, 50) ;</code></pre><p><strong>整合后</strong></p><pre><code>INSERT INTO t_user (id, name, age) VALUES (1, &apos;张三丰&apos;, 200), (2, &apos;张无忌&apos;, 50) ;</code></pre><h3 id="2-2-UPDATE的整合"><a href="#2-2-UPDATE的整合" class="headerlink" title="2.2 UPDATE的整合"></a>2.2 UPDATE的整合</h3><p>在更新目标一致的情况下可使用下面语句整合。</p><pre><code>UPDATE &lt;table_name&gt; set &lt;columnname&gt;=&lt;columnvalue&gt;, ... where &lt;columnnamen&gt; in (value1, value2,...);</code></pre><h3 id="2-3-INSERT和UPDATE的整合"><a href="#2-3-INSERT和UPDATE的整合" class="headerlink" title="2.3 INSERT和UPDATE的整合"></a>2.3 INSERT和UPDATE的整合</h3><p>当在满足条件时，可合并：先检查要插入的主键是否存在，如果不存在就插入行，如果存在就执行update操作。</p><pre><code>INSERT ... ON DUPLICATE KEY UPDATE</code></pre><p>举例： id是主键，当不存在id=1的数据是，插入一行；若存在，则将id=1的那行数据的age更新为201。</p><pre><code>INSERT INTO t_user (id, name, age) VALUES (1, &apos;张三丰&apos;, 200) ON DUPLICATE KEY UPDATE age = 201;</code></pre><p>注意：该语句存在死锁风险，请在满足以下两条件时使用（1、尽量不对存在多个唯一键的table使用该语句；2、在有可能有并发事务执行的insert 的内容一样情况下不使用该语句）<a href="https://blog.csdn.net/pml18710973036/article/details/78452688" target="_blank" rel="noopener">bug</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把多条SQL语句合并为一条，可减少数据库交互次数，提高性能，这是一种简单的优化改进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建表t_user&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE `t_user` (
　　`id` tinyint(10) UN
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql性能优化" scheme="http://yoursite.com/tags/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL唯一性约束</title>
    <link href="http://yoursite.com/2018/09/11/MySQL%E5%94%AF%E4%B8%80%E6%80%A7%E7%BA%A6%E6%9D%9F/"/>
    <id>http://yoursite.com/2018/09/11/MySQL唯一性约束/</id>
    <published>2018-09-11T15:50:38.572Z</published>
    <updated>2018-10-14T05:38:14.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>一个表只能存在一个，且不允许空值 </p><ul><li>定义列时指定：</li></ul><p>　　<code>&lt;col_name&gt; &lt;data_type&gt; PRIMARY KEY [DEFAULT &lt;value&gt;]</code> </p><ul><li>定义完列后指定：</li></ul><p>　　<code>[CONSTANT&lt;key_name&gt;] PRIMARY KEY(&lt;col_name1&gt;,...)</code></p><h2 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h2><p>一个表允许有多个，且允许列上存在一个空值   </p><ul><li><p>定义列时指定：</p><p>  <code>&lt;col_name&gt; &lt;data_type&gt; UNIQUE</code></p></li><li><p>定义完列后指定：</p></li></ul><p>　　<code>[CONSTANT&lt;key_name&gt;] UNIQUE(&lt;col_name1&gt;,...)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主键&quot;&gt;&lt;a href=&quot;#主键&quot; class=&quot;headerlink&quot; title=&quot;主键&quot;&gt;&lt;/a&gt;主键&lt;/h2&gt;&lt;p&gt;一个表只能存在一个，且不允许空值 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义列时指定：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　&lt;code&gt;&amp;lt;col_n
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql基础" scheme="http://yoursite.com/tags/mysql%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
