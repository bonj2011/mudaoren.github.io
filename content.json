[{"title":"","date":"2018-09-06T23:37:51.865Z","path":"2018/09/07/CAS/","text":"CAS（compare and sweep)与乐观并发策略 CAS保证了并发时，操作和冲突检查的原子性。 CAS最初用到硬件指令上，是一条硬件指令，包括3个操作数：内存位置（地址）用V表示、旧的预期值用A表示、新值用B表示，在执行时，仅当V符合旧的预期值A时，处理器才会用新值B更新V的值，否则不执行更新，但无论是否更新了V，都会返回V的旧值，这个过程是一个原子操作。 jdk1.5后，java开始使用CAS操作，该操作由sun.misc.Unsafe类中的compareAndSweepInt()和compareAndSweepLong()等几个方法包装提供。在虚拟机即时编译出的结果就是一条平台相关的CAS指令，没有JAVA方法的调用过程。（即过程是原子性的）。这个功能在JDK1.8又做了增强，重试的过程也是在机器的指令集上执行的。 CAS的ABA问题，如果V的初始值是A，在第一次读取时也是A，但是在读取后——赋值前这期间V被改为B，然后又被改回到A，此时，CAS操作会认为V没有被改变过。这个就是著名的ABA问题。","tags":[]},{"title":"","date":"2018-09-03T14:05:09.918Z","path":"2018/09/03/JDBC类加载过程分析/","text":"mysql驱动的类加载过程 JDBC是开发中常用的驱动程序，但一直没有深入了解过其加载过程。JDBC驱动的加载也是线程上下文类加载器使用的经典案例。最近有时间研究一下源码，结合JVM线程上下文类加载器的知识做个总结。 public static void main(String[] args) throws ClassNotFoundException, SQLException { // 加载mysql驱动 Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); Connection connection = DriverManager.getConnection( &quot;jdbc://localhost:3306/mysql&quot;, &quot;username&quot;, &quot;password&quot;); } #1. Class.forName完成JDBC驱动的加载，底层是如何实现的？ # @CallerSensitive public static Class&lt;?&gt; forName(String className) throws ClassNotFoundException { Class&lt;?&gt; caller = Reflection.getCallerClass(); return forName0(className, true, ClassLoader.getClassLoader(caller), caller); } forName继续调用forName0方法，但是forName0方法是个Native方法，看不到源码了，如下： /** Called after security check for system loader access checks have been made. */ private static native Class&lt;?&gt; forName0(String name, boolean initialize, ClassLoader loader, Class&lt;?&gt; caller) throws ClassNotFoundException; 通过查询oracle的技术文档，这个方法返回的是一个由字符串className相同类限定名的Class对象“Returns the Class object associated with the class or interface with the given string name. Invoking this method is equivalent to: Class.forName(className, true, currentLoader)where currentLoader denotes the defining class loader of the current class.” 再来看Class.forName(className, true, currentLoader)方法的技术文档，如下： “Returns the Class object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface. The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded through the bootstrap class loader. The class is initialized only if the initialize parameter is true and if it has not been initialized earlier.If name denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is name. Therefore, this method cannot be used to obtain any of the Class objects representing primitive types or void. If name denotes an array class, the component type of the array class is loaded but not initialized.For example, in an instance method the expression: Class.forName(&quot;Foo&quot;)is equivalent to:Class.forName(&quot;Foo&quot;, true, this.getClass().getClassLoader())”。 forName方法返回的是一个指定全限定类（接口）名的对象，使用的是指定的类加载器进行加载，如果指定的类加载器为空并且initialize传入true，则使用bootstrapClassLoader进行加载。同时，如果加载器中没有该类的初始化信息，则会对类（接口）进行初始化。 这里就是类（接口）的初始化过程，将字节码信息转化成方法区（元数据区）的数据，并返回一个Class对象到堆内存中，作为调用的入口。 因为我们传入的是com.mysql.cj.jdbc.Driver，因此这个过程就是类Driver被初始化的过程。JVM虚拟机在类初始化过程中最重要的两个动作就是初始化本类和父类的成员变量和执行静态代码块。我们来看看Driver类中的成员变量和静态代码块，如下： public class Driver extends com.mysql.cj.jdbc.Driver { public Driver() throws SQLException { super(); } static { System.err.println(&quot;Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. &quot; + &quot;The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.&quot;); } } 代码中static块中只是打印了一个日志，没有其他动作。类加载时如果还会加载父类的信息，来看看com.mysql.cj.jdbc.Driver中是否有静态代码块。 public class Driver extends NonRegisteringDriver implements java.sql.Driver { // // Register ourselves with the DriverManager // static { try { // 实际加载的驱动，这里调用了DriverManager的静态方法，会触发该类的初始化动作 java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(&quot;Can&apos;t register driver!&quot;); } } /** * Construct a new driver and register it with DriverManager * * @throws SQLException * if a database error occurs. */ public Driver() throws SQLException { // Required for Class.forName().newInstance() } } 代码中看到com.mysql.cj.jdbc.Driver中静态块执行了这段代码java.sql.DriverManager.registerDriver(new Driver())，实际上是将自己作为参数传递给了jdk的DriverManager.registerDriver方法，而这个方法是将MySQL的Drive对象包装成jdk的DriverInfo对象后保存到成员变量DriverManager.registeredDrivers的数组中（如果已经存在就什么都不做）。 我们还遗漏了什么？ com.mysql.cj.jdbc.Driver还继承了NonRegisteringDriver，在Driver初始化前会先初始化NonRegisteringDriver中的静态成员变量和代码块，来看下代码： static { try { Class.forName(AbandonedConnectionCleanupThread.class.getName()); } catch (ClassNotFoundException e) { // ignore } } 这里又加载了一个类AbandonedConnectionCleanupThread，这个类什么作用呢？ 再来看一下他的代码： /**This class implements a thread that is responsible for closing abandoned MySQL connections, i.e., connections that are not explicitly closed. There is only one instance of this class and there is a single thread to do this task. This thread&apos;s executor is statically referenced in this same class. **/ public class AbandonedConnectionCleanupThread implements Runnable { private static final ExecutorService cleanupThreadExcecutorService; static Thread threadRef = null; static { cleanupThreadExcecutorService = Executors.newSingleThreadExecutor(new ThreadFactory() { public Thread newThread(Runnable r) { Thread t = new Thread(r, &quot;Abandoned connection cleanup thread&quot;); t.setDaemon(true); // Tie the thread&apos;s context ClassLoader to the ClassLoader that loaded the class instead of inheriting the context ClassLoader from the current // thread, which would happen by default. // Application servers may use this information if they attempt to shutdown this thread. By leaving the default context ClassLoader this thread // could end up being shut down even when it is shared by other applications and, being it statically initialized, thus, never restarted again. t.setContextClassLoader(AbandonedConnectionCleanupThread.class.getClassLoader()); return threadRef = t; } }); cleanupThreadExcecutorService.execute(new AbandonedConnectionCleanupThread()); } .... } 很明显，这里启动了一个守护线程，这个线程用来关闭没有被正确关闭的MySQL链接。 2.DriverManager.getConnection做了什么事情？ 继续看一下文章开头的第二行代码DriverManager.getConnection()做了什么。 @CallerSensitive public static Connection getConnection(String url, String user, String password) throws SQLException { java.util.Properties info = new java.util.Properties(); if (user != null) { info.put(&quot;user&quot;, user); } if (password != null) { info.put(&quot;password&quot;, password); } return (getConnection(url, info, Reflection.getCallerClass())); } 将mysql的用户名密码设置到Properties中，连同url、调用类（Reflection.getCallerClass获取）传递给getConnection方法，重点来了： // Worker method called by the public getConnection() methods. private static Connection getConnection( String url, java.util.Properties info, Class&lt;?&gt; caller) throws SQLException { /* * 当传入的caller不为空时，使用传入对象的类加载器，否则就进入到同步块中获取当前线程的上下文中的类加载器。而这类传入的caller不为空，是在DriverManager中调用了Reflection.getCallerClass()获取了DriverManager的Class,因此这里的ClassLoader应该是BootstrapClassLoader，然而系统类加载器是不能被程序获取的（JVM虚拟机限制）。所以callerCL获取了线程上下文类加载器，这里使用了currentThread()，实际上是获取了main方法的类加载器即appClassLoader。 */ ClassLoader callerCL = caller != null ? caller.getClassLoader() : null; synchronized(DriverManager.class) { // synchronize loading of the correct classloader. if (callerCL == null) { callerCL = Thread.currentThread().getContextClassLoader(); } } if(url == null) { throw new SQLException(&quot;The url cannot be null&quot;, &quot;08001&quot;); } println(&quot;DriverManager.getConnection(\\&quot;&quot; + url + &quot;\\&quot;)&quot;); // Walk through the loaded registeredDrivers attempting to make a connection. // Remember the first exception that gets raised so we can reraise it. SQLException reason = null; //轮训成员变量registeredDrivers中的DriverInfo,并创建连接。如果创建连接发生异常则将最近一次异常记录下来，后面会打日志并抛出这个异常。 for(DriverInfo aDriver : registeredDrivers) { // If the caller does not have permission to load the driver then // skip it. if(isDriverAllowed(aDriver.driver, callerCL)) { try { println(&quot; trying &quot; + aDriver.driver.getClass().getName()); Connection con = aDriver.driver.connect(url, info); if (con != null) { // Success! println(&quot;getConnection returning &quot; + aDriver.driver.getClass().getName()); return (con); } } catch (SQLException ex) { if (reason == null) { reason = ex; } } } else { println(&quot; skipping: &quot; + aDriver.getClass().getName()); } } // if we got here nobody could connect. if (reason != null) { println(&quot;getConnection failed: &quot; + reason); throw reason; } println(&quot;getConnection: no suitable driver found for &quot;+ url); throw new SQLException(&quot;No suitable driver found for &quot;+ url, &quot;08001&quot;); } 还有一个重要的点被我们忽略了！初始化一个对象、调用类的静态方法、读取或者设置一个类的静态变量、使用反射调用一个类、子类被初始化。了解了这些，我们再来看DriverManager.getConnection是不是调用了DriverManager的静态方法？是不是触发了DriverManager的初始化过程？ 这里执行了静态代码块： /** * Load the initial JDBC drivers by checking the System property * jdbc.properties and then use the {@code ServiceLoader} mechanism */ static { loadInitialDrivers(); println(&quot;JDBC DriverManager initialized&quot;); } 继续看loadInitialDrivers方法干了什么？ private static void loadInitialDrivers() { String drivers; try { // 通过权限控制器获取系统配置jdbc.drivers，这里我们没有设置系统，因此这里返回空 drivers = AccessController.doPrivileged(new PrivilegedAction&lt;String&gt;() { public String run() { return System.getProperty(&quot;jdbc.drivers&quot;); } }); } catch (Exception ex) { drivers = null; } // If the driver is packaged as a Service Provider, load it. // Get all the drivers through the classloader // exposed as a java.sql.Driver.class service. // ServiceLoader.load() replaces the sun.misc.Providers() AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() { public Void run() { // 重点在这里 ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class); //记住这里，后面会用到 Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator(); /* Load these drivers, so that they can be instantiated. * It may be the case that the driver class may not be there * i.e. there may be a packaged driver with the service class * as implementation of java.sql.Driver but the actual class * may be missing. In that case a java.util.ServiceConfigurationError * will be thrown at runtime by the VM trying to locate * and load the service. * * Adding a try catch block to catch those runtime errors * if driver not available in classpath but it&apos;s * packaged as service and that service is there in classpath. */ try{ while(driversIterator.hasNext()) { driversIterator.next(); } } catch(Throwable t) { // Do nothing } return null; } }); println(&quot;DriverManager.initialize: jdbc.drivers = &quot; + drivers); if (drivers == null || drivers.equals(&quot;&quot;)) { return; } String[] driversList = drivers.split(&quot;:&quot;); println(&quot;number of Drivers:&quot; + driversList.length); for (String aDriver : driversList) { try { println(&quot;DriverManager.Initialize: loading &quot; + aDriver); Class.forName(aDriver, true, ClassLoader.getSystemClassLoader()); } catch (Exception ex) { println(&quot;DriverManager.Initialize: load failed: &quot; + ex); } } } 上面这段代码因为drivers变量值为空，所以实际起作用的是中间的代码块。先来看代码ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class)传入的参数是java.sql.Driver.class，这里面做了什么： /** * Creates a new service loader for the given service type, using the * current thread&apos;s {@linkplain java.lang.Thread#getContextClassLoader * context class loader}. */ public static &lt;S&gt; ServiceLoader&lt;S&gt; load(Class&lt;S&gt; service) { ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl); } 注释写的很清楚，返回一个server loader，使用的是线程上下文类加载器,currentThread()即当前main线程的类加载器。继续到ServiceLoader.load(service, cl)中看一看： public static &lt;S&gt; ServiceLoader&lt;S&gt; load(Class&lt;S&gt; service, ClassLoader loader) { // 返回了一个ServiceLoader对象。service和loader是两个构造参数，实际上赋值给成员变量了。 return new ServiceLoader&lt;&gt;(service, loader); } 继续看ServiceLoader是如何构造新对象的，将参数传给了两个成员变量。这里要注意ClassLoader.getSystemClassLoader()获取的并不是boot类加载器，而是本线程的类加载器，即MAIN线程的类加载器appClassLoader。 private ServiceLoader(Class&lt;S&gt; svc, ClassLoader cl) { service = Objects.requireNonNull(svc, &quot;Service interface cannot be null&quot;); loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl; acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null; reload(); } 回到上面，来看一下loadInitialDrivers方法的while循环中的内容，ServiceLoader的iterator()方法返回了一个Iterator类型的对象，ServiceLoader实现了几个方法，看代码 public Iterator&lt;S&gt; iterator() { return new Iterator&lt;S&gt;() { ／／ 因为providers中并没有添加元素，因此元素数必定是０ Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders = providers.entrySet().iterator(); public boolean hasNext() { ／／loadInitialDrivers方法的while循环在执行hasNext时，因为knownProviders没有元素，所必定走到了lookupIterator.hasNext()，这个里边有个关键的信息。 if (knownProviders.hasNext()) return true; return lookupIterator.hasNext(); } public S next() { if (knownProviders.hasNext()) return knownProviders.next().getValue(); return lookupIterator.next(); } public void remove() { throw new UnsupportedOperationException(); } }; } 上面的过程看注释。 public boolean hasNext() { if (acc == null) { return hasNextService(); } else { PrivilegedAction&lt;Boolean&gt; action = new PrivilegedAction&lt;Boolean&gt;() { // 注意这行，重点在hasNextService()中。 public Boolean run() { return hasNextService(); } }; return AccessController.doPrivileged(action, acc); } } private boolean hasNextService() { if (nextName != null) { return true; } if (configs == null) { try { // PREFIX = &quot;META-INF/services/&quot;，而这里的service在前面ServiceLoader.load(Driver.class)传入的是java.sql.Driver.class, 完成的fullname就是&quot;META-INF/services/java.sql.Driver&quot; String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else configs = loader.getResources(fullName); } catch (IOException x) { fail(service, &quot;Error locating configuration files&quot;, x); } } while ((pending == null) || !pending.hasNext()) { if (!configs.hasMoreElements()) { return false; } pending = parse(service, configs.nextElement()); } nextName = pending.next(); return true; } 上面的”META-INF/services/java.sql.Driver”是哪里来的？ 来看看我们的驱动包驱动包的这个路径下有个java.sql.Driver命名的文件，而文件中的内容只有一行com.mysql.cj.jdbc.Driver，就是mysql的驱动类名。也就是JDK会查找驱动包中META-INF/services/java.sql.Driver，找到文件中列出的驱动类。 后面不再深入，有兴趣的自己看下。loadInitialDrivers方法的while循环driversIterator.next()方法就是用最初传入的类加载器加载了JDBC的驱动。 PS： 关于Reflection类的使用，可参考博文https://blog.csdn.net/aguda_king/article/details/72355807 关于线程上下文类加载器的理解可以参考博文https://blog.csdn.net/yangcheng33/article/details/52631940和https://blog.csdn.net/gabele/article/details/71250108","tags":[]}]