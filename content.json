[{"title":"","date":"2018-09-11T15:18:19.975Z","path":"2018/09/11/库存/","text":"概述 库存是一个复杂度很高的核心系统，提供前端实时查询的能力和后端的商品扣减，还要处理订单取消问题。这对库存系统的准确性和可靠性提出了很高的要求，在各种场景下能保证数据的准确，在遇到突发流量时能保证高可用，除此之外，还需要提供熔断和降级的能力，保证在极端情况下不拖垮主站。 技术架构 DUBBO是一款非常优秀的 RPC 层框架，提供高性能和透明化的RPC远程服务调用方案,以及SOA服务治理方案。 RocketMQ是一款低延迟、高可靠、可伸缩、易于使用的消息中间件。 Redisson是架设在Redis基础上的一个Java驻内存数据网格。 Redis单线程的高速缓存数据库，支持持久化、事务，通过哨兵和自动分区提供高可用。 Druid阿里的开源软件，专为监控而生的数据库连接池。 Mybatis是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。 MySQL关系型数据库系统。 库存扣减 为简化库存系统，库存系统之上建立交易系统和订单管理系统，库存只负责管理商品扣减。 1. 何时扣减 库存扣减一般有三个时机： 加购物车时扣减。商品加入购物车，并不能说明用户确实要购买，实际转化率并不高，假如此时扣库存，会导致库存被占用而无法释放，影响正常销售。 提交订单时扣减。用户下单后还有一个支付操作，如果用户仅仅下单而不进行支付，这部分库存将会被无效占用，影响正常销售。这里可以做一个支付时限，如果超过时限未支付，订单将被取消，预占得库存被返还。 支付时扣减。用户进行支付，说明交易即将完成，这部分是必须要留住的订单和用户，如果此时扣库存，出现库存不足导致用户支付失败会严重影响用户体验。 目前为提高库存效率和用户体验，系统采用提交订单扣库存的策略。这也是大部分电商平台采用的扣减策略。 2. 如何扣减 库存扣减需要应对主要问题是高并发问题、重复扣减问题（超卖）。 上游系统需要配合库存系统做好扩容、限流保护、隔离（业务隔离、数据隔离，以及系统隔离）、动静分离、localCache等措施，通过漏斗模型逐层减少用户流量，避免流量高峰对库存系统的冲击，必要时采用熔断进行降级（比如查询库存时直接返回有库存）。 系统采用Redission+Redis解决高并发问题，Redis是内存数据库性能相对较高，本身支持事务操作,使用Redisson的Rbatch保证事务性，扣减操作包含query和done，两个动作属于一个事务，且done操作保证幂等。 重复扣刷减最常出现的包括用户误操作、黄牛绕过前端进行单、交易系统重试操作： 用户误操作，前端购物车在用户提交订单后将购物车数据删除，无法继续提交。 黄牛绕过前段刷单，前端必须经过交易系统通过RPC调用库存系统，在交易系统中通过风控、调用次数限制、订单令牌等方法限制重复提交订单。 交易系统重试问题，库存系统通过限制一个订单只能进行一次事务性的库存扣减操作，防止交易系统重试导致的饭后服扣减。 还有重要的一点是记录库存扣减日志，在库存回滚时使用。 3. 如何回滚 用户取消订单、用户退货、异常订单流程都会触发库存回滚操作。 为每一个订单设定一个唯一编号，并且按照编号记录库存操作流日志，在需要做库存回滚时依据唯一编号进行库存的返还，回滚操作需要根据编号保证事务性和幂等性。 库存的返还采用同步回滚+异步重试机制，用户取消订单和异常订单的回滚操作首先进行订单的同步逆向操作，在库存返还时如果失败，将唯一编号记录下来，通过异步定时任务进行返还。 用户退货往往涉及到实物商品的退库，因此发起方是订单管理系统，当实物商品完成退库后，订单管理系统将发送MQ消息，库存系统通过订阅消息进行库存返还。 尽管同步回滚+异步重试已经足够保证库存的正确回滚，但是为万无一失，还需要增加一个数据健康度的自我检查能力，超时超次未完成回滚的库存数据需要人工干预。 数据库1.Redis 由于Redis的读写能力远胜于任何关系型数据库，因此在Redis中保存商品库存数据并完成扣减操作。 使用Redis的以下特性保证库存系统的高并发和高可用： 分库分表，因垂直电商业务特点且主站秒杀和抢购并不在主站中，因此为简化逻辑按照SKU维度采用HASH算法进行分库的策略。当然在极端情况下可以对每个SKU继续进行库存拆分，拆分成二级SKU，目前秒杀业务就是采用这种策略。 读写分离，采用Master/Slave模式，其中Master提供写操作，Slave提供读操作，降低Master的压力，提供高速读写操作。 主从+哨兵模式，为保证Redis的可靠性，启用Redis的主从模式和哨兵模式。部署Sentinel集群+Master/Slave集群，实现Master故障的自动发现和切换。 持久化，启用AOF实时持久化功能，保障数据的秒级备份。 2.MySQL 用于记录操作日志和扣减日志。 为提高读写性能采用主从模式和读写分离模式，最初MySQL还承担着库存数据的批量落盘功能，随着Redis库存方式的长时间稳定运行，库存逐渐完全转移到Redis上，MySQL仅仅承担着记录操作日志和扣减日志的功能。 http://www.iteye.com/news/32768https://mp.weixin.qq.com/s/aIzdMG1y0a5cWOS4lx6IuQhttps://www.cnblogs.com/liuchuanfeng/p/7190654.htmlRedis开发与运维","tags":[]},{"title":"","date":"2018-09-11T15:17:59.437Z","path":"2018/09/11/线程上下文类加载器的初始化/","text":"线程上下文类加载器的初始化 线程上线文类加载器是JVM类加载模型中的一个特殊存在，在使用时，只需要执行Thread.currentThread().getContextClassLoader()就可以获取线程上线文类加载器，即当前线程的类加载器。但是这个类加载器是什么时候设置的呢？ 我们执行下面代码 public static void main(String[] args) throws ClassNotFoundException, SQLException { System.out.println(Thread.currentThread().getContextClassLoader()); } 输出结果是 sun.misc.Launcher$AppClassLoader@c387f44 即使用的是AppClassLoader类加载器，但是这个上下文中的加载器是什么时候设置进去的？ 我们都知道，在调用类的静态方法时，类及其父类都会被初始化，初始化过程中最重要的部分就是执行类中的静态代码块、及初始化成员变量。但Thread的静态代码块中只是注册了一个本地方法而已。 static { registerNatives(); } 我们看看Thread对象被初始化时做了什么？ public Thread() { init(null, null, &quot;Thread-&quot; + nextThreadNum(), 0); } private void init(ThreadGroup g, Runnable target, String name, long stackSize) { init(g, target, name, stackSize, null); } private void init(ThreadGroup g, Runnable target, String name, long stackSize, AccessControlContext acc) { if (name == null) { throw new NullPointerException(&quot;name cannot be null&quot;); } this.name = name.toCharArray(); Thread parent = currentThread(); SecurityManager security = System.getSecurityManager(); if (g == null) { /* Determine if it&apos;s an applet or not */ /* If there is a security manager, ask the security manager what to do. */ if (security != null) { g = security.getThreadGroup(); } /* If the security doesn&apos;t have a strong opinion of the matter use the parent thread group. */ if (g == null) { g = parent.getThreadGroup(); } } /* checkAccess regardless of whether or not threadgroup is explicitly passed in. */ g.checkAccess(); /* * Do we have the required permissions? */ if (security != null) { if (isCCLOverridden(getClass())) { security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION); } } g.addUnstarted(); this.group = g; this.daemon = parent.isDaemon(); this.priority = parent.getPriority(); // 这里在做线程上下文类加载器的赋值操作，如果系统没有设置安全管理器，则会调用Thread的getContextClassLoader()方法获取类加载器。而parent是currentThread()即启动本线程的线程。把父线程的上下文类加载器给继承过来。这里的父子关系是指谁启动谁的关系，比如在线程A里面启动了线程B，那B线程的父线程就是A。 if (security == null || isCCLOverridden(parent.getClass())) this.contextClassLoader = parent.getContextClassLoader(); else this.contextClassLoader = parent.contextClassLoader; this.inheritedAccessControlContext = acc != null ? acc : AccessController.getContext(); this.target = target; setPriority(priority); if (parent.inheritableThreadLocals != null) this.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals); /* Stash the specified stack size in case the VM cares */ this.stackSize = stackSize; /* Set thread ID */ tid = nextThreadID(); } @CallerSensitive public ClassLoader getContextClassLoader() { if (contextClassLoader == null) return null; SecurityManager sm = System.getSecurityManager(); if (sm != null) { ClassLoader.checkClassLoaderPermission(contextClassLoader, Reflection.getCallerClass()); } return contextClassLoader; } 第一个被启动的线程是哪个？那第一个启动的线程（包含main方法的那个线程）里面的contextClassLoader是谁设置的呢？不要忘记，Main本身就启动了一个线程。这要看 sun.misc.Launcher 这个类的源码。Launcher是JRE中用于启动程序入口main()的类。 loader = AppClassLoader.getAppClassLoader(extcl); Thread.currentThread().setContextClassLoader(loader); 这里截取的两行代码出自 Launcher 的构造方法。第一行用一个扩展类加载器extcl构造了一个系统类加载器loader，第二行把loader设置为当前线程（包含main方法）的类加载器。所以，我们启动一个线程的时候，如果之前都没有调用 setContextClassLoader 方法明确指定的话，默认的就是系统类加载器。 参考https://www.cnblogs.com/cz123/p/6867345.htmlhttps://blog.csdn.net/gabele/article/details/71250108","tags":[]},{"title":"","date":"2018-09-06T23:37:51.865Z","path":"2018/09/07/CAS/","text":"CAS（compare and sweep)与乐观并发策略 CAS保证了并发时，操作和冲突检查的原子性。 CAS最初用到硬件指令上，是一条硬件指令，包括3个操作数：内存位置（地址）用V表示、旧的预期值用A表示、新值用B表示，在执行时，仅当V符合旧的预期值A时，处理器才会用新值B更新V的值，否则不执行更新，但无论是否更新了V，都会返回V的旧值，这个过程是一个原子操作。 jdk1.5后，java开始使用CAS操作，该操作由sun.misc.Unsafe类中的compareAndSweepInt()和compareAndSweepLong()等几个方法包装提供。在虚拟机即时编译出的结果就是一条平台相关的CAS指令，没有JAVA方法的调用过程。（即过程是原子性的）。这个功能在JDK1.8又做了增强，重试的过程也是在机器的指令集上执行的。 CAS的ABA问题，如果V的初始值是A，在第一次读取时也是A，但是在读取后——赋值前这期间V被改为B，然后又被改回到A，此时，CAS操作会认为V没有被改变过。这个就是著名的ABA问题。","tags":[]},{"title":"","date":"2018-09-03T14:05:09.918Z","path":"2018/09/03/JDBC类加载过程分析/","text":"mysql驱动的类加载过程 JDBC是开发中常用的驱动程序，但一直没有深入了解过其加载过程。JDBC驱动的加载也是线程上下文类加载器使用的经典案例。最近有时间研究一下源码，结合JVM线程上下文类加载器的知识做个总结。 public static void main(String[] args) throws ClassNotFoundException, SQLException { // 加载mysql驱动 Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); Connection connection = DriverManager.getConnection( &quot;jdbc://localhost:3306/mysql&quot;, &quot;username&quot;, &quot;password&quot;); } #1. Class.forName完成JDBC驱动的加载，底层是如何实现的？ # @CallerSensitive public static Class&lt;?&gt; forName(String className) throws ClassNotFoundException { Class&lt;?&gt; caller = Reflection.getCallerClass(); return forName0(className, true, ClassLoader.getClassLoader(caller), caller); } forName继续调用forName0方法，但是forName0方法是个Native方法，看不到源码了，如下： /** Called after security check for system loader access checks have been made. */ private static native Class&lt;?&gt; forName0(String name, boolean initialize, ClassLoader loader, Class&lt;?&gt; caller) throws ClassNotFoundException; 通过查询oracle的技术文档，这个方法返回的是一个由字符串className相同类限定名的Class对象“Returns the Class object associated with the class or interface with the given string name. Invoking this method is equivalent to: Class.forName(className, true, currentLoader)where currentLoader denotes the defining class loader of the current class.” 再来看Class.forName(className, true, currentLoader)方法的技术文档，如下： “Returns the Class object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface. The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded through the bootstrap class loader. The class is initialized only if the initialize parameter is true and if it has not been initialized earlier.If name denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is name. Therefore, this method cannot be used to obtain any of the Class objects representing primitive types or void. If name denotes an array class, the component type of the array class is loaded but not initialized.For example, in an instance method the expression: Class.forName(&quot;Foo&quot;)is equivalent to:Class.forName(&quot;Foo&quot;, true, this.getClass().getClassLoader())”。 forName方法返回的是一个指定全限定类（接口）名的对象，使用的是指定的类加载器进行加载，如果指定的类加载器为空并且initialize传入true，则使用bootstrapClassLoader进行加载。同时，如果加载器中没有该类的初始化信息，则会对类（接口）进行初始化。 这里就是类（接口）的初始化过程，将字节码信息转化成方法区（元数据区）的数据，并返回一个Class对象到堆内存中，作为调用的入口。 因为我们传入的是com.mysql.cj.jdbc.Driver，因此这个过程就是类Driver被初始化的过程。JVM虚拟机在类初始化过程中最重要的两个动作就是初始化本类和父类的成员变量和执行静态代码块。我们来看看Driver类中的成员变量和静态代码块，如下： public class Driver extends com.mysql.cj.jdbc.Driver { public Driver() throws SQLException { super(); } static { System.err.println(&quot;Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. &quot; + &quot;The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.&quot;); } } 代码中static块中只是打印了一个日志，没有其他动作。类加载时如果还会加载父类的信息，来看看com.mysql.cj.jdbc.Driver中是否有静态代码块。 public class Driver extends NonRegisteringDriver implements java.sql.Driver { // // Register ourselves with the DriverManager // static { try { // 实际加载的驱动，这里调用了DriverManager的静态方法，会触发该类的初始化动作 java.sql.DriverManager.registerDriver(new Driver()); } catch (SQLException E) { throw new RuntimeException(&quot;Can&apos;t register driver!&quot;); } } /** * Construct a new driver and register it with DriverManager * * @throws SQLException * if a database error occurs. */ public Driver() throws SQLException { // Required for Class.forName().newInstance() } } 代码中看到com.mysql.cj.jdbc.Driver中静态块执行了这段代码java.sql.DriverManager.registerDriver(new Driver())，实际上是将自己作为参数传递给了jdk的DriverManager.registerDriver方法，而这个方法是将MySQL的Drive对象包装成jdk的DriverInfo对象后保存到成员变量DriverManager.registeredDrivers的数组中（如果已经存在就什么都不做）。 我们还遗漏了什么？ com.mysql.cj.jdbc.Driver还继承了NonRegisteringDriver，在Driver初始化前会先初始化NonRegisteringDriver中的静态成员变量和代码块，来看下代码： static { try { Class.forName(AbandonedConnectionCleanupThread.class.getName()); } catch (ClassNotFoundException e) { // ignore } } 这里又加载了一个类AbandonedConnectionCleanupThread，这个类什么作用呢？ 再来看一下他的代码： /**This class implements a thread that is responsible for closing abandoned MySQL connections, i.e., connections that are not explicitly closed. There is only one instance of this class and there is a single thread to do this task. This thread&apos;s executor is statically referenced in this same class. **/ public class AbandonedConnectionCleanupThread implements Runnable { private static final ExecutorService cleanupThreadExcecutorService; static Thread threadRef = null; static { cleanupThreadExcecutorService = Executors.newSingleThreadExecutor(new ThreadFactory() { public Thread newThread(Runnable r) { Thread t = new Thread(r, &quot;Abandoned connection cleanup thread&quot;); t.setDaemon(true); // Tie the thread&apos;s context ClassLoader to the ClassLoader that loaded the class instead of inheriting the context ClassLoader from the current // thread, which would happen by default. // Application servers may use this information if they attempt to shutdown this thread. By leaving the default context ClassLoader this thread // could end up being shut down even when it is shared by other applications and, being it statically initialized, thus, never restarted again. t.setContextClassLoader(AbandonedConnectionCleanupThread.class.getClassLoader()); return threadRef = t; } }); cleanupThreadExcecutorService.execute(new AbandonedConnectionCleanupThread()); } .... } 很明显，这里启动了一个守护线程，这个线程用来关闭没有被正确关闭的MySQL链接。 2.DriverManager.getConnection做了什么事情？ 继续看一下文章开头的第二行代码DriverManager.getConnection()做了什么。 @CallerSensitive public static Connection getConnection(String url, String user, String password) throws SQLException { java.util.Properties info = new java.util.Properties(); if (user != null) { info.put(&quot;user&quot;, user); } if (password != null) { info.put(&quot;password&quot;, password); } return (getConnection(url, info, Reflection.getCallerClass())); } 将mysql的用户名密码设置到Properties中，连同url、调用类（Reflection.getCallerClass获取）传递给getConnection方法，重点来了： // Worker method called by the public getConnection() methods. private static Connection getConnection( String url, java.util.Properties info, Class&lt;?&gt; caller) throws SQLException { /* * 当传入的caller不为空时，使用传入对象的类加载器，否则就进入到同步块中获取当前线程的上下文中的类加载器。而这类传入的caller不为空，是在DriverManager中调用了Reflection.getCallerClass()获取了DriverManager的Class,因此这里的ClassLoader应该是BootstrapClassLoader，然而系统类加载器是不能被程序获取的（JVM虚拟机限制）。所以callerCL获取了线程上下文类加载器，这里使用了currentThread()，实际上是获取了main方法的类加载器即appClassLoader。 */ ClassLoader callerCL = caller != null ? caller.getClassLoader() : null; synchronized(DriverManager.class) { // synchronize loading of the correct classloader. if (callerCL == null) { callerCL = Thread.currentThread().getContextClassLoader(); } } if(url == null) { throw new SQLException(&quot;The url cannot be null&quot;, &quot;08001&quot;); } println(&quot;DriverManager.getConnection(\\&quot;&quot; + url + &quot;\\&quot;)&quot;); // Walk through the loaded registeredDrivers attempting to make a connection. // Remember the first exception that gets raised so we can reraise it. SQLException reason = null; //轮训成员变量registeredDrivers中的DriverInfo,并创建连接。如果创建连接发生异常则将最近一次异常记录下来，后面会打日志并抛出这个异常。 for(DriverInfo aDriver : registeredDrivers) { // If the caller does not have permission to load the driver then // skip it. if(isDriverAllowed(aDriver.driver, callerCL)) { try { println(&quot; trying &quot; + aDriver.driver.getClass().getName()); Connection con = aDriver.driver.connect(url, info); if (con != null) { // Success! println(&quot;getConnection returning &quot; + aDriver.driver.getClass().getName()); return (con); } } catch (SQLException ex) { if (reason == null) { reason = ex; } } } else { println(&quot; skipping: &quot; + aDriver.getClass().getName()); } } // if we got here nobody could connect. if (reason != null) { println(&quot;getConnection failed: &quot; + reason); throw reason; } println(&quot;getConnection: no suitable driver found for &quot;+ url); throw new SQLException(&quot;No suitable driver found for &quot;+ url, &quot;08001&quot;); } 还有一个重要的点被我们忽略了！初始化一个对象、调用类的静态方法、读取或者设置一个类的静态变量、使用反射调用一个类、子类被初始化。了解了这些，我们再来看DriverManager.getConnection是不是调用了DriverManager的静态方法？是不是触发了DriverManager的初始化过程？ 这里执行了静态代码块： /** * Load the initial JDBC drivers by checking the System property * jdbc.properties and then use the {@code ServiceLoader} mechanism */ static { loadInitialDrivers(); println(&quot;JDBC DriverManager initialized&quot;); } 继续看loadInitialDrivers方法干了什么？ private static void loadInitialDrivers() { String drivers; try { // 通过权限控制器获取系统配置jdbc.drivers，这里我们没有设置系统，因此这里返回空 drivers = AccessController.doPrivileged(new PrivilegedAction&lt;String&gt;() { public String run() { return System.getProperty(&quot;jdbc.drivers&quot;); } }); } catch (Exception ex) { drivers = null; } // If the driver is packaged as a Service Provider, load it. // Get all the drivers through the classloader // exposed as a java.sql.Driver.class service. // ServiceLoader.load() replaces the sun.misc.Providers() AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() { public Void run() { // 重点在这里 ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class); //记住这里，后面会用到 Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator(); /* Load these drivers, so that they can be instantiated. * It may be the case that the driver class may not be there * i.e. there may be a packaged driver with the service class * as implementation of java.sql.Driver but the actual class * may be missing. In that case a java.util.ServiceConfigurationError * will be thrown at runtime by the VM trying to locate * and load the service. * * Adding a try catch block to catch those runtime errors * if driver not available in classpath but it&apos;s * packaged as service and that service is there in classpath. */ try{ while(driversIterator.hasNext()) { driversIterator.next(); } } catch(Throwable t) { // Do nothing } return null; } }); println(&quot;DriverManager.initialize: jdbc.drivers = &quot; + drivers); if (drivers == null || drivers.equals(&quot;&quot;)) { return; } String[] driversList = drivers.split(&quot;:&quot;); println(&quot;number of Drivers:&quot; + driversList.length); for (String aDriver : driversList) { try { println(&quot;DriverManager.Initialize: loading &quot; + aDriver); Class.forName(aDriver, true, ClassLoader.getSystemClassLoader()); } catch (Exception ex) { println(&quot;DriverManager.Initialize: load failed: &quot; + ex); } } } 上面这段代码因为drivers变量值为空，所以实际起作用的是中间的代码块。先来看代码ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class)传入的参数是java.sql.Driver.class，这里面做了什么： /** * Creates a new service loader for the given service type, using the * current thread&apos;s {@linkplain java.lang.Thread#getContextClassLoader * context class loader}. */ public static &lt;S&gt; ServiceLoader&lt;S&gt; load(Class&lt;S&gt; service) { ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl); } 注释写的很清楚，返回一个server loader，使用的是线程上下文类加载器,currentThread()即当前main线程的类加载器。继续到ServiceLoader.load(service, cl)中看一看： public static &lt;S&gt; ServiceLoader&lt;S&gt; load(Class&lt;S&gt; service, ClassLoader loader) { // 返回了一个ServiceLoader对象。service和loader是两个构造参数，实际上赋值给成员变量了。 return new ServiceLoader&lt;&gt;(service, loader); } 继续看ServiceLoader是如何构造新对象的，将参数传给了两个成员变量。这里要注意ClassLoader.getSystemClassLoader()获取的并不是boot类加载器，而是本线程的类加载器，即MAIN线程的类加载器appClassLoader。 private ServiceLoader(Class&lt;S&gt; svc, ClassLoader cl) { service = Objects.requireNonNull(svc, &quot;Service interface cannot be null&quot;); loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl; acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null; reload(); } 回到上面，来看一下loadInitialDrivers方法的while循环中的内容，ServiceLoader的iterator()方法返回了一个Iterator类型的对象，ServiceLoader实现了几个方法，看代码 public Iterator&lt;S&gt; iterator() { return new Iterator&lt;S&gt;() { ／／ 因为providers中并没有添加元素，因此元素数必定是０ Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders = providers.entrySet().iterator(); public boolean hasNext() { ／／loadInitialDrivers方法的while循环在执行hasNext时，因为knownProviders没有元素，所必定走到了lookupIterator.hasNext()，这个里边有个关键的信息。 if (knownProviders.hasNext()) return true; return lookupIterator.hasNext(); } public S next() { if (knownProviders.hasNext()) return knownProviders.next().getValue(); return lookupIterator.next(); } public void remove() { throw new UnsupportedOperationException(); } }; } 上面的过程看注释。 public boolean hasNext() { if (acc == null) { return hasNextService(); } else { PrivilegedAction&lt;Boolean&gt; action = new PrivilegedAction&lt;Boolean&gt;() { // 注意这行，重点在hasNextService()中。 public Boolean run() { return hasNextService(); } }; return AccessController.doPrivileged(action, acc); } } private boolean hasNextService() { if (nextName != null) { return true; } if (configs == null) { try { // PREFIX = &quot;META-INF/services/&quot;，而这里的service在前面ServiceLoader.load(Driver.class)传入的是java.sql.Driver.class, 完成的fullname就是&quot;META-INF/services/java.sql.Driver&quot; String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else configs = loader.getResources(fullName); } catch (IOException x) { fail(service, &quot;Error locating configuration files&quot;, x); } } while ((pending == null) || !pending.hasNext()) { if (!configs.hasMoreElements()) { return false; } pending = parse(service, configs.nextElement()); } nextName = pending.next(); return true; } 上面的”META-INF/services/java.sql.Driver”是哪里来的？ 来看看我们的驱动包驱动包的这个路径下有个java.sql.Driver命名的文件，而文件中的内容只有一行com.mysql.cj.jdbc.Driver，就是mysql的驱动类名。也就是JDK会查找驱动包中META-INF/services/java.sql.Driver，找到文件中列出的驱动类。 后面不再深入，有兴趣的自己看下。loadInitialDrivers方法的while循环driversIterator.next()方法就是用最初传入的类加载器加载了JDBC的驱动。 PS： 关于Reflection类的使用，可参考博文https://blog.csdn.net/aguda_king/article/details/72355807 关于线程上下文类加载器的理解可以参考博文https://blog.csdn.net/yangcheng33/article/details/52631940和https://blog.csdn.net/gabele/article/details/71250108","tags":[]}]